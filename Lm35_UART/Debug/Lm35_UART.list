
Lm35_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08006448  08006448  00007448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006810  08006810  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006818  08006818  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006818  08006818  00007818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800681c  0800681c  0000781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006820  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          00000238  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008b10  00000000  00000000  000081fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017b5  00000000  00000000  00010d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  000124c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000614  00000000  00000000  00012cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002219b  00000000  00000000  000132dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009591  00000000  00000000  00035477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0e43  00000000  00000000  0003ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f84b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000317c  00000000  00000000  0010f890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00112a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006430 	.word	0x08006430

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006430 	.word	0x08006430

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_fmul>:
 8000280:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000284:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000288:	bf1e      	ittt	ne
 800028a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800028e:	ea92 0f0c 	teqne	r2, ip
 8000292:	ea93 0f0c 	teqne	r3, ip
 8000296:	d06f      	beq.n	8000378 <__aeabi_fmul+0xf8>
 8000298:	441a      	add	r2, r3
 800029a:	ea80 0c01 	eor.w	ip, r0, r1
 800029e:	0240      	lsls	r0, r0, #9
 80002a0:	bf18      	it	ne
 80002a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80002a6:	d01e      	beq.n	80002e6 <__aeabi_fmul+0x66>
 80002a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80002ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80002b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80002b4:	fba0 3101 	umull	r3, r1, r0, r1
 80002b8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80002bc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80002c0:	bf3e      	ittt	cc
 80002c2:	0049      	lslcc	r1, r1, #1
 80002c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80002c8:	005b      	lslcc	r3, r3, #1
 80002ca:	ea40 0001 	orr.w	r0, r0, r1
 80002ce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80002d2:	2afd      	cmp	r2, #253	@ 0xfd
 80002d4:	d81d      	bhi.n	8000312 <__aeabi_fmul+0x92>
 80002d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80002da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002de:	bf08      	it	eq
 80002e0:	f020 0001 	biceq.w	r0, r0, #1
 80002e4:	4770      	bx	lr
 80002e6:	f090 0f00 	teq	r0, #0
 80002ea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80002ee:	bf08      	it	eq
 80002f0:	0249      	lsleq	r1, r1, #9
 80002f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002fa:	3a7f      	subs	r2, #127	@ 0x7f
 80002fc:	bfc2      	ittt	gt
 80002fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000302:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000306:	4770      	bxgt	lr
 8000308:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	3a01      	subs	r2, #1
 8000312:	dc5d      	bgt.n	80003d0 <__aeabi_fmul+0x150>
 8000314:	f112 0f19 	cmn.w	r2, #25
 8000318:	bfdc      	itt	le
 800031a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800031e:	4770      	bxle	lr
 8000320:	f1c2 0200 	rsb	r2, r2, #0
 8000324:	0041      	lsls	r1, r0, #1
 8000326:	fa21 f102 	lsr.w	r1, r1, r2
 800032a:	f1c2 0220 	rsb	r2, r2, #32
 800032e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000332:	ea5f 0031 	movs.w	r0, r1, rrx
 8000336:	f140 0000 	adc.w	r0, r0, #0
 800033a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800033e:	bf08      	it	eq
 8000340:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000344:	4770      	bx	lr
 8000346:	f092 0f00 	teq	r2, #0
 800034a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800034e:	bf02      	ittt	eq
 8000350:	0040      	lsleq	r0, r0, #1
 8000352:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000356:	3a01      	subeq	r2, #1
 8000358:	d0f9      	beq.n	800034e <__aeabi_fmul+0xce>
 800035a:	ea40 000c 	orr.w	r0, r0, ip
 800035e:	f093 0f00 	teq	r3, #0
 8000362:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000366:	bf02      	ittt	eq
 8000368:	0049      	lsleq	r1, r1, #1
 800036a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800036e:	3b01      	subeq	r3, #1
 8000370:	d0f9      	beq.n	8000366 <__aeabi_fmul+0xe6>
 8000372:	ea41 010c 	orr.w	r1, r1, ip
 8000376:	e78f      	b.n	8000298 <__aeabi_fmul+0x18>
 8000378:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800037c:	ea92 0f0c 	teq	r2, ip
 8000380:	bf18      	it	ne
 8000382:	ea93 0f0c 	teqne	r3, ip
 8000386:	d00a      	beq.n	800039e <__aeabi_fmul+0x11e>
 8000388:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800038c:	bf18      	it	ne
 800038e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000392:	d1d8      	bne.n	8000346 <__aeabi_fmul+0xc6>
 8000394:	ea80 0001 	eor.w	r0, r0, r1
 8000398:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800039c:	4770      	bx	lr
 800039e:	f090 0f00 	teq	r0, #0
 80003a2:	bf17      	itett	ne
 80003a4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80003a8:	4608      	moveq	r0, r1
 80003aa:	f091 0f00 	teqne	r1, #0
 80003ae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80003b2:	d014      	beq.n	80003de <__aeabi_fmul+0x15e>
 80003b4:	ea92 0f0c 	teq	r2, ip
 80003b8:	d101      	bne.n	80003be <__aeabi_fmul+0x13e>
 80003ba:	0242      	lsls	r2, r0, #9
 80003bc:	d10f      	bne.n	80003de <__aeabi_fmul+0x15e>
 80003be:	ea93 0f0c 	teq	r3, ip
 80003c2:	d103      	bne.n	80003cc <__aeabi_fmul+0x14c>
 80003c4:	024b      	lsls	r3, r1, #9
 80003c6:	bf18      	it	ne
 80003c8:	4608      	movne	r0, r1
 80003ca:	d108      	bne.n	80003de <__aeabi_fmul+0x15e>
 80003cc:	ea80 0001 	eor.w	r0, r0, r1
 80003d0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80003d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80003d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003dc:	4770      	bx	lr
 80003de:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80003e2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_drsub>:
 80003e8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	e002      	b.n	80003f4 <__adddf3>
 80003ee:	bf00      	nop

080003f0 <__aeabi_dsub>:
 80003f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003f4 <__adddf3>:
 80003f4:	b530      	push	{r4, r5, lr}
 80003f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003fe:	ea94 0f05 	teq	r4, r5
 8000402:	bf08      	it	eq
 8000404:	ea90 0f02 	teqeq	r0, r2
 8000408:	bf1f      	itttt	ne
 800040a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800040e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000412:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000416:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041a:	f000 80e2 	beq.w	80005e2 <__adddf3+0x1ee>
 800041e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000422:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000426:	bfb8      	it	lt
 8000428:	426d      	neglt	r5, r5
 800042a:	dd0c      	ble.n	8000446 <__adddf3+0x52>
 800042c:	442c      	add	r4, r5
 800042e:	ea80 0202 	eor.w	r2, r0, r2
 8000432:	ea81 0303 	eor.w	r3, r1, r3
 8000436:	ea82 0000 	eor.w	r0, r2, r0
 800043a:	ea83 0101 	eor.w	r1, r3, r1
 800043e:	ea80 0202 	eor.w	r2, r0, r2
 8000442:	ea81 0303 	eor.w	r3, r1, r3
 8000446:	2d36      	cmp	r5, #54	@ 0x36
 8000448:	bf88      	it	hi
 800044a:	bd30      	pophi	{r4, r5, pc}
 800044c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000450:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000454:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000458:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x70>
 800045e:	4240      	negs	r0, r0
 8000460:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000464:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000468:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800046c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000470:	d002      	beq.n	8000478 <__adddf3+0x84>
 8000472:	4252      	negs	r2, r2
 8000474:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000478:	ea94 0f05 	teq	r4, r5
 800047c:	f000 80a7 	beq.w	80005ce <__adddf3+0x1da>
 8000480:	f1a4 0401 	sub.w	r4, r4, #1
 8000484:	f1d5 0e20 	rsbs	lr, r5, #32
 8000488:	db0d      	blt.n	80004a6 <__adddf3+0xb2>
 800048a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800048e:	fa22 f205 	lsr.w	r2, r2, r5
 8000492:	1880      	adds	r0, r0, r2
 8000494:	f141 0100 	adc.w	r1, r1, #0
 8000498:	fa03 f20e 	lsl.w	r2, r3, lr
 800049c:	1880      	adds	r0, r0, r2
 800049e:	fa43 f305 	asr.w	r3, r3, r5
 80004a2:	4159      	adcs	r1, r3
 80004a4:	e00e      	b.n	80004c4 <__adddf3+0xd0>
 80004a6:	f1a5 0520 	sub.w	r5, r5, #32
 80004aa:	f10e 0e20 	add.w	lr, lr, #32
 80004ae:	2a01      	cmp	r2, #1
 80004b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004b4:	bf28      	it	cs
 80004b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ba:	fa43 f305 	asr.w	r3, r3, r5
 80004be:	18c0      	adds	r0, r0, r3
 80004c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c8:	d507      	bpl.n	80004da <__adddf3+0xe6>
 80004ca:	f04f 0e00 	mov.w	lr, #0
 80004ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80004d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004da:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004de:	d31b      	bcc.n	8000518 <__adddf3+0x124>
 80004e0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004e4:	d30c      	bcc.n	8000500 <__adddf3+0x10c>
 80004e6:	0849      	lsrs	r1, r1, #1
 80004e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004f0:	f104 0401 	add.w	r4, r4, #1
 80004f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004fc:	f080 809a 	bcs.w	8000634 <__adddf3+0x240>
 8000500:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000504:	bf08      	it	eq
 8000506:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800050a:	f150 0000 	adcs.w	r0, r0, #0
 800050e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000512:	ea41 0105 	orr.w	r1, r1, r5
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800051c:	4140      	adcs	r0, r0
 800051e:	eb41 0101 	adc.w	r1, r1, r1
 8000522:	3c01      	subs	r4, #1
 8000524:	bf28      	it	cs
 8000526:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800052a:	d2e9      	bcs.n	8000500 <__adddf3+0x10c>
 800052c:	f091 0f00 	teq	r1, #0
 8000530:	bf04      	itt	eq
 8000532:	4601      	moveq	r1, r0
 8000534:	2000      	moveq	r0, #0
 8000536:	fab1 f381 	clz	r3, r1
 800053a:	bf08      	it	eq
 800053c:	3320      	addeq	r3, #32
 800053e:	f1a3 030b 	sub.w	r3, r3, #11
 8000542:	f1b3 0220 	subs.w	r2, r3, #32
 8000546:	da0c      	bge.n	8000562 <__adddf3+0x16e>
 8000548:	320c      	adds	r2, #12
 800054a:	dd08      	ble.n	800055e <__adddf3+0x16a>
 800054c:	f102 0c14 	add.w	ip, r2, #20
 8000550:	f1c2 020c 	rsb	r2, r2, #12
 8000554:	fa01 f00c 	lsl.w	r0, r1, ip
 8000558:	fa21 f102 	lsr.w	r1, r1, r2
 800055c:	e00c      	b.n	8000578 <__adddf3+0x184>
 800055e:	f102 0214 	add.w	r2, r2, #20
 8000562:	bfd8      	it	le
 8000564:	f1c2 0c20 	rsble	ip, r2, #32
 8000568:	fa01 f102 	lsl.w	r1, r1, r2
 800056c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000570:	bfdc      	itt	le
 8000572:	ea41 010c 	orrle.w	r1, r1, ip
 8000576:	4090      	lslle	r0, r2
 8000578:	1ae4      	subs	r4, r4, r3
 800057a:	bfa2      	ittt	ge
 800057c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000580:	4329      	orrge	r1, r5
 8000582:	bd30      	popge	{r4, r5, pc}
 8000584:	ea6f 0404 	mvn.w	r4, r4
 8000588:	3c1f      	subs	r4, #31
 800058a:	da1c      	bge.n	80005c6 <__adddf3+0x1d2>
 800058c:	340c      	adds	r4, #12
 800058e:	dc0e      	bgt.n	80005ae <__adddf3+0x1ba>
 8000590:	f104 0414 	add.w	r4, r4, #20
 8000594:	f1c4 0220 	rsb	r2, r4, #32
 8000598:	fa20 f004 	lsr.w	r0, r0, r4
 800059c:	fa01 f302 	lsl.w	r3, r1, r2
 80005a0:	ea40 0003 	orr.w	r0, r0, r3
 80005a4:	fa21 f304 	lsr.w	r3, r1, r4
 80005a8:	ea45 0103 	orr.w	r1, r5, r3
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	f1c4 040c 	rsb	r4, r4, #12
 80005b2:	f1c4 0220 	rsb	r2, r4, #32
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 f304 	lsl.w	r3, r1, r4
 80005be:	ea40 0003 	orr.w	r0, r0, r3
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	fa21 f004 	lsr.w	r0, r1, r4
 80005ca:	4629      	mov	r1, r5
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	f094 0f00 	teq	r4, #0
 80005d2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005d6:	bf06      	itte	eq
 80005d8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005dc:	3401      	addeq	r4, #1
 80005de:	3d01      	subne	r5, #1
 80005e0:	e74e      	b.n	8000480 <__adddf3+0x8c>
 80005e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005e6:	bf18      	it	ne
 80005e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005ec:	d029      	beq.n	8000642 <__adddf3+0x24e>
 80005ee:	ea94 0f05 	teq	r4, r5
 80005f2:	bf08      	it	eq
 80005f4:	ea90 0f02 	teqeq	r0, r2
 80005f8:	d005      	beq.n	8000606 <__adddf3+0x212>
 80005fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80005fe:	bf04      	itt	eq
 8000600:	4619      	moveq	r1, r3
 8000602:	4610      	moveq	r0, r2
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	ea91 0f03 	teq	r1, r3
 800060a:	bf1e      	ittt	ne
 800060c:	2100      	movne	r1, #0
 800060e:	2000      	movne	r0, #0
 8000610:	bd30      	popne	{r4, r5, pc}
 8000612:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000616:	d105      	bne.n	8000624 <__adddf3+0x230>
 8000618:	0040      	lsls	r0, r0, #1
 800061a:	4149      	adcs	r1, r1
 800061c:	bf28      	it	cs
 800061e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000628:	bf3c      	itt	cc
 800062a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800062e:	bd30      	popcc	{r4, r5, pc}
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000638:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800063c:	f04f 0000 	mov.w	r0, #0
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000646:	bf1a      	itte	ne
 8000648:	4619      	movne	r1, r3
 800064a:	4610      	movne	r0, r2
 800064c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000650:	bf1c      	itt	ne
 8000652:	460b      	movne	r3, r1
 8000654:	4602      	movne	r2, r0
 8000656:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800065a:	bf06      	itte	eq
 800065c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000660:	ea91 0f03 	teqeq	r1, r3
 8000664:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	bf00      	nop

0800066c <__aeabi_ui2d>:
 800066c:	f090 0f00 	teq	r0, #0
 8000670:	bf04      	itt	eq
 8000672:	2100      	moveq	r1, #0
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800067c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000680:	f04f 0500 	mov.w	r5, #0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e750      	b.n	800052c <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_i2d>:
 800068c:	f090 0f00 	teq	r0, #0
 8000690:	bf04      	itt	eq
 8000692:	2100      	moveq	r1, #0
 8000694:	4770      	bxeq	lr
 8000696:	b530      	push	{r4, r5, lr}
 8000698:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800069c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006a4:	bf48      	it	mi
 80006a6:	4240      	negmi	r0, r0
 80006a8:	f04f 0100 	mov.w	r1, #0
 80006ac:	e73e      	b.n	800052c <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_f2d>:
 80006b0:	0042      	lsls	r2, r0, #1
 80006b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006be:	bf1f      	itttt	ne
 80006c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006cc:	4770      	bxne	lr
 80006ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006d2:	bf08      	it	eq
 80006d4:	4770      	bxeq	lr
 80006d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006da:	bf04      	itt	eq
 80006dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	e71c      	b.n	800052c <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_ul2d>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	b530      	push	{r4, r5, lr}
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	e00a      	b.n	800071a <__aeabi_l2d+0x16>

08000704 <__aeabi_l2d>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	b530      	push	{r4, r5, lr}
 800070e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000712:	d502      	bpl.n	800071a <__aeabi_l2d+0x16>
 8000714:	4240      	negs	r0, r0
 8000716:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800071a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800071e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000722:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000726:	f43f aed8 	beq.w	80004da <__adddf3+0xe6>
 800072a:	f04f 0203 	mov.w	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800073a:	bf18      	it	ne
 800073c:	3203      	addne	r2, #3
 800073e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	fa00 fc03 	lsl.w	ip, r0, r3
 800074a:	fa20 f002 	lsr.w	r0, r0, r2
 800074e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000752:	ea40 000e 	orr.w	r0, r0, lr
 8000756:	fa21 f102 	lsr.w	r1, r1, r2
 800075a:	4414      	add	r4, r2
 800075c:	e6bd      	b.n	80004da <__adddf3+0xe6>
 800075e:	bf00      	nop

08000760 <__aeabi_dmul>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8de 	bleq	800093c <__aeabi_dmul+0x1dc>
 8000780:	442c      	add	r4, r5
 8000782:	ea81 0603 	eor.w	r6, r1, r3
 8000786:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800078a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800078e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000792:	bf18      	it	ne
 8000794:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000798:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800079c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80007a0:	d038      	beq.n	8000814 <__aeabi_dmul+0xb4>
 80007a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80007a6:	f04f 0500 	mov.w	r5, #0
 80007aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80007ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80007b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80007b6:	f04f 0600 	mov.w	r6, #0
 80007ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007be:	f09c 0f00 	teq	ip, #0
 80007c2:	bf18      	it	ne
 80007c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80007c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80007cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80007d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80007d4:	d204      	bcs.n	80007e0 <__aeabi_dmul+0x80>
 80007d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007da:	416d      	adcs	r5, r5
 80007dc:	eb46 0606 	adc.w	r6, r6, r6
 80007e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007f8:	bf88      	it	hi
 80007fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007fe:	d81e      	bhi.n	800083e <__aeabi_dmul+0xde>
 8000800:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000804:	bf08      	it	eq
 8000806:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800080a:	f150 0000 	adcs.w	r0, r0, #0
 800080e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000818:	ea46 0101 	orr.w	r1, r6, r1
 800081c:	ea40 0002 	orr.w	r0, r0, r2
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000828:	bfc2      	ittt	gt
 800082a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800082e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000832:	bd70      	popgt	{r4, r5, r6, pc}
 8000834:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000838:	f04f 0e00 	mov.w	lr, #0
 800083c:	3c01      	subs	r4, #1
 800083e:	f300 80ab 	bgt.w	8000998 <__aeabi_dmul+0x238>
 8000842:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000846:	bfde      	ittt	le
 8000848:	2000      	movle	r0, #0
 800084a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800084e:	bd70      	pople	{r4, r5, r6, pc}
 8000850:	f1c4 0400 	rsb	r4, r4, #0
 8000854:	3c20      	subs	r4, #32
 8000856:	da35      	bge.n	80008c4 <__aeabi_dmul+0x164>
 8000858:	340c      	adds	r4, #12
 800085a:	dc1b      	bgt.n	8000894 <__aeabi_dmul+0x134>
 800085c:	f104 0414 	add.w	r4, r4, #20
 8000860:	f1c4 0520 	rsb	r5, r4, #32
 8000864:	fa00 f305 	lsl.w	r3, r0, r5
 8000868:	fa20 f004 	lsr.w	r0, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea40 0002 	orr.w	r0, r0, r2
 8000874:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000878:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000880:	fa21 f604 	lsr.w	r6, r1, r4
 8000884:	eb42 0106 	adc.w	r1, r2, r6
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f1c4 040c 	rsb	r4, r4, #12
 8000898:	f1c4 0520 	rsb	r5, r4, #32
 800089c:	fa00 f304 	lsl.w	r3, r0, r4
 80008a0:	fa20 f005 	lsr.w	r0, r0, r5
 80008a4:	fa01 f204 	lsl.w	r2, r1, r4
 80008a8:	ea40 0002 	orr.w	r0, r0, r2
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80008b4:	f141 0100 	adc.w	r1, r1, #0
 80008b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008bc:	bf08      	it	eq
 80008be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
 80008c4:	f1c4 0520 	rsb	r5, r4, #32
 80008c8:	fa00 f205 	lsl.w	r2, r0, r5
 80008cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80008d0:	fa20 f304 	lsr.w	r3, r0, r4
 80008d4:	fa01 f205 	lsl.w	r2, r1, r5
 80008d8:	ea43 0302 	orr.w	r3, r3, r2
 80008dc:	fa21 f004 	lsr.w	r0, r1, r4
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	fa21 f204 	lsr.w	r2, r1, r4
 80008e8:	ea20 0002 	bic.w	r0, r0, r2
 80008ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008f4:	bf08      	it	eq
 80008f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f094 0f00 	teq	r4, #0
 8000900:	d10f      	bne.n	8000922 <__aeabi_dmul+0x1c2>
 8000902:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000906:	0040      	lsls	r0, r0, #1
 8000908:	eb41 0101 	adc.w	r1, r1, r1
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	bf08      	it	eq
 8000912:	3c01      	subeq	r4, #1
 8000914:	d0f7      	beq.n	8000906 <__aeabi_dmul+0x1a6>
 8000916:	ea41 0106 	orr.w	r1, r1, r6
 800091a:	f095 0f00 	teq	r5, #0
 800091e:	bf18      	it	ne
 8000920:	4770      	bxne	lr
 8000922:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000926:	0052      	lsls	r2, r2, #1
 8000928:	eb43 0303 	adc.w	r3, r3, r3
 800092c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000930:	bf08      	it	eq
 8000932:	3d01      	subeq	r5, #1
 8000934:	d0f7      	beq.n	8000926 <__aeabi_dmul+0x1c6>
 8000936:	ea43 0306 	orr.w	r3, r3, r6
 800093a:	4770      	bx	lr
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000944:	bf18      	it	ne
 8000946:	ea95 0f0c 	teqne	r5, ip
 800094a:	d00c      	beq.n	8000966 <__aeabi_dmul+0x206>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	d1d1      	bne.n	80008fc <__aeabi_dmul+0x19c>
 8000958:	ea81 0103 	eor.w	r1, r1, r3
 800095c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000960:	f04f 0000 	mov.w	r0, #0
 8000964:	bd70      	pop	{r4, r5, r6, pc}
 8000966:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096a:	bf06      	itte	eq
 800096c:	4610      	moveq	r0, r2
 800096e:	4619      	moveq	r1, r3
 8000970:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000974:	d019      	beq.n	80009aa <__aeabi_dmul+0x24a>
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	d102      	bne.n	8000982 <__aeabi_dmul+0x222>
 800097c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000980:	d113      	bne.n	80009aa <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	d105      	bne.n	8000994 <__aeabi_dmul+0x234>
 8000988:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800098c:	bf1c      	itt	ne
 800098e:	4610      	movne	r0, r2
 8000990:	4619      	movne	r1, r3
 8000992:	d10a      	bne.n	80009aa <__aeabi_dmul+0x24a>
 8000994:	ea81 0103 	eor.w	r1, r1, r3
 8000998:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800099c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80009a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	bd70      	pop	{r4, r5, r6, pc}
 80009aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80009ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80009b2:	bd70      	pop	{r4, r5, r6, pc}

080009b4 <__aeabi_ddiv>:
 80009b4:	b570      	push	{r4, r5, r6, lr}
 80009b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80009be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009c2:	bf1d      	ittte	ne
 80009c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009c8:	ea94 0f0c 	teqne	r4, ip
 80009cc:	ea95 0f0c 	teqne	r5, ip
 80009d0:	f000 f8a7 	bleq	8000b22 <__aeabi_ddiv+0x16e>
 80009d4:	eba4 0405 	sub.w	r4, r4, r5
 80009d8:	ea81 0e03 	eor.w	lr, r1, r3
 80009dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009e4:	f000 8088 	beq.w	8000af8 <__aeabi_ddiv+0x144>
 80009e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80009f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a04:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a08:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000a0c:	429d      	cmp	r5, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4296      	cmpeq	r6, r2
 8000a12:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000a16:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000a1a:	d202      	bcs.n	8000a22 <__aeabi_ddiv+0x6e>
 8000a1c:	085b      	lsrs	r3, r3, #1
 8000a1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a22:	1ab6      	subs	r6, r6, r2
 8000a24:	eb65 0503 	sbc.w	r5, r5, r3
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a2e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000a32:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a48:	085b      	lsrs	r3, r3, #1
 8000a4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a56:	bf22      	ittt	cs
 8000a58:	1ab6      	subcs	r6, r6, r2
 8000a5a:	4675      	movcs	r5, lr
 8000a5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a6e:	bf22      	ittt	cs
 8000a70:	1ab6      	subcs	r6, r6, r2
 8000a72:	4675      	movcs	r5, lr
 8000a74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a78:	085b      	lsrs	r3, r3, #1
 8000a7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a86:	bf22      	ittt	cs
 8000a88:	1ab6      	subcs	r6, r6, r2
 8000a8a:	4675      	movcs	r5, lr
 8000a8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a90:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a94:	d018      	beq.n	8000ac8 <__aeabi_ddiv+0x114>
 8000a96:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000aa2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000aa6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000aaa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000aae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000ab2:	d1c0      	bne.n	8000a36 <__aeabi_ddiv+0x82>
 8000ab4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ab8:	d10b      	bne.n	8000ad2 <__aeabi_ddiv+0x11e>
 8000aba:	ea41 0100 	orr.w	r1, r1, r0
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000ac6:	e7b6      	b.n	8000a36 <__aeabi_ddiv+0x82>
 8000ac8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000acc:	bf04      	itt	eq
 8000ace:	4301      	orreq	r1, r0
 8000ad0:	2000      	moveq	r0, #0
 8000ad2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000ad6:	bf88      	it	hi
 8000ad8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000adc:	f63f aeaf 	bhi.w	800083e <__aeabi_dmul+0xde>
 8000ae0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000ae4:	bf04      	itt	eq
 8000ae6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aee:	f150 0000 	adcs.w	r0, r0, #0
 8000af2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
 8000af8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000afc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b04:	bfc2      	ittt	gt
 8000b06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000b10:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b14:	f04f 0e00 	mov.w	lr, #0
 8000b18:	3c01      	subs	r4, #1
 8000b1a:	e690      	b.n	800083e <__aeabi_dmul+0xde>
 8000b1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000b20:	e68d      	b.n	800083e <__aeabi_dmul+0xde>
 8000b22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b26:	ea94 0f0c 	teq	r4, ip
 8000b2a:	bf08      	it	eq
 8000b2c:	ea95 0f0c 	teqeq	r5, ip
 8000b30:	f43f af3b 	beq.w	80009aa <__aeabi_dmul+0x24a>
 8000b34:	ea94 0f0c 	teq	r4, ip
 8000b38:	d10a      	bne.n	8000b50 <__aeabi_ddiv+0x19c>
 8000b3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b3e:	f47f af34 	bne.w	80009aa <__aeabi_dmul+0x24a>
 8000b42:	ea95 0f0c 	teq	r5, ip
 8000b46:	f47f af25 	bne.w	8000994 <__aeabi_dmul+0x234>
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	e72c      	b.n	80009aa <__aeabi_dmul+0x24a>
 8000b50:	ea95 0f0c 	teq	r5, ip
 8000b54:	d106      	bne.n	8000b64 <__aeabi_ddiv+0x1b0>
 8000b56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b5a:	f43f aefd 	beq.w	8000958 <__aeabi_dmul+0x1f8>
 8000b5e:	4610      	mov	r0, r2
 8000b60:	4619      	mov	r1, r3
 8000b62:	e722      	b.n	80009aa <__aeabi_dmul+0x24a>
 8000b64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b68:	bf18      	it	ne
 8000b6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b6e:	f47f aec5 	bne.w	80008fc <__aeabi_dmul+0x19c>
 8000b72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b76:	f47f af0d 	bne.w	8000994 <__aeabi_dmul+0x234>
 8000b7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b7e:	f47f aeeb 	bne.w	8000958 <__aeabi_dmul+0x1f8>
 8000b82:	e712      	b.n	80009aa <__aeabi_dmul+0x24a>

08000b84 <__gedf2>:
 8000b84:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b88:	e006      	b.n	8000b98 <__cmpdf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__ledf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	e002      	b.n	8000b98 <__cmpdf2+0x4>
 8000b92:	bf00      	nop

08000b94 <__cmpdf2>:
 8000b94:	f04f 0c01 	mov.w	ip, #1
 8000b98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba8:	bf18      	it	ne
 8000baa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000bae:	d01b      	beq.n	8000be8 <__cmpdf2+0x54>
 8000bb0:	b001      	add	sp, #4
 8000bb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bb6:	bf0c      	ite	eq
 8000bb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bbc:	ea91 0f03 	teqne	r1, r3
 8000bc0:	bf02      	ittt	eq
 8000bc2:	ea90 0f02 	teqeq	r0, r2
 8000bc6:	2000      	moveq	r0, #0
 8000bc8:	4770      	bxeq	lr
 8000bca:	f110 0f00 	cmn.w	r0, #0
 8000bce:	ea91 0f03 	teq	r1, r3
 8000bd2:	bf58      	it	pl
 8000bd4:	4299      	cmppl	r1, r3
 8000bd6:	bf08      	it	eq
 8000bd8:	4290      	cmpeq	r0, r2
 8000bda:	bf2c      	ite	cs
 8000bdc:	17d8      	asrcs	r0, r3, #31
 8000bde:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000be2:	f040 0001 	orr.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf0:	d102      	bne.n	8000bf8 <__cmpdf2+0x64>
 8000bf2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bf6:	d107      	bne.n	8000c08 <__cmpdf2+0x74>
 8000bf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c00:	d1d6      	bne.n	8000bb0 <__cmpdf2+0x1c>
 8000c02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c06:	d0d3      	beq.n	8000bb0 <__cmpdf2+0x1c>
 8000c08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_cdrcmple>:
 8000c10:	4684      	mov	ip, r0
 8000c12:	4610      	mov	r0, r2
 8000c14:	4662      	mov	r2, ip
 8000c16:	468c      	mov	ip, r1
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4663      	mov	r3, ip
 8000c1c:	e000      	b.n	8000c20 <__aeabi_cdcmpeq>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_cdcmpeq>:
 8000c20:	b501      	push	{r0, lr}
 8000c22:	f7ff ffb7 	bl	8000b94 <__cmpdf2>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	bf48      	it	mi
 8000c2a:	f110 0f00 	cmnmi.w	r0, #0
 8000c2e:	bd01      	pop	{r0, pc}

08000c30 <__aeabi_dcmpeq>:
 8000c30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c34:	f7ff fff4 	bl	8000c20 <__aeabi_cdcmpeq>
 8000c38:	bf0c      	ite	eq
 8000c3a:	2001      	moveq	r0, #1
 8000c3c:	2000      	movne	r0, #0
 8000c3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c42:	bf00      	nop

08000c44 <__aeabi_dcmplt>:
 8000c44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c48:	f7ff ffea 	bl	8000c20 <__aeabi_cdcmpeq>
 8000c4c:	bf34      	ite	cc
 8000c4e:	2001      	movcc	r0, #1
 8000c50:	2000      	movcs	r0, #0
 8000c52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c56:	bf00      	nop

08000c58 <__aeabi_dcmple>:
 8000c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c5c:	f7ff ffe0 	bl	8000c20 <__aeabi_cdcmpeq>
 8000c60:	bf94      	ite	ls
 8000c62:	2001      	movls	r0, #1
 8000c64:	2000      	movhi	r0, #0
 8000c66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6a:	bf00      	nop

08000c6c <__aeabi_dcmpge>:
 8000c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c70:	f7ff ffce 	bl	8000c10 <__aeabi_cdrcmple>
 8000c74:	bf94      	ite	ls
 8000c76:	2001      	movls	r0, #1
 8000c78:	2000      	movhi	r0, #0
 8000c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7e:	bf00      	nop

08000c80 <__aeabi_dcmpgt>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff ffc4 	bl	8000c10 <__aeabi_cdrcmple>
 8000c88:	bf34      	ite	cc
 8000c8a:	2001      	movcc	r0, #1
 8000c8c:	2000      	movcs	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_dcmpun>:
 8000c94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c9c:	d102      	bne.n	8000ca4 <__aeabi_dcmpun+0x10>
 8000c9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ca2:	d10a      	bne.n	8000cba <__aeabi_dcmpun+0x26>
 8000ca4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ca8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cac:	d102      	bne.n	8000cb4 <__aeabi_dcmpun+0x20>
 8000cae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cb2:	d102      	bne.n	8000cba <__aeabi_dcmpun+0x26>
 8000cb4:	f04f 0000 	mov.w	r0, #0
 8000cb8:	4770      	bx	lr
 8000cba:	f04f 0001 	mov.w	r0, #1
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2iz>:
 8000cc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cc4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cc8:	d215      	bcs.n	8000cf6 <__aeabi_d2iz+0x36>
 8000cca:	d511      	bpl.n	8000cf0 <__aeabi_d2iz+0x30>
 8000ccc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cd4:	d912      	bls.n	8000cfc <__aeabi_d2iz+0x3c>
 8000cd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ce2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ce6:	fa23 f002 	lsr.w	r0, r3, r2
 8000cea:	bf18      	it	ne
 8000cec:	4240      	negne	r0, r0
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d105      	bne.n	8000d08 <__aeabi_d2iz+0x48>
 8000cfc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000d00:	bf08      	it	eq
 8000d02:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d06:	4770      	bx	lr
 8000d08:	f04f 0000 	mov.w	r0, #0
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2f>:
 8000d10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000d18:	bf24      	itt	cs
 8000d1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000d1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000d22:	d90d      	bls.n	8000d40 <__aeabi_d2f+0x30>
 8000d24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d38:	bf08      	it	eq
 8000d3a:	f020 0001 	biceq.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d44:	d121      	bne.n	8000d8a <__aeabi_d2f+0x7a>
 8000d46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d4a:	bfbc      	itt	lt
 8000d4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d50:	4770      	bxlt	lr
 8000d52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d5a:	f1c2 0218 	rsb	r2, r2, #24
 8000d5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d66:	fa20 f002 	lsr.w	r0, r0, r2
 8000d6a:	bf18      	it	ne
 8000d6c:	f040 0001 	orrne.w	r0, r0, #1
 8000d70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d7c:	ea40 000c 	orr.w	r0, r0, ip
 8000d80:	fa23 f302 	lsr.w	r3, r3, r2
 8000d84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d88:	e7cc      	b.n	8000d24 <__aeabi_d2f+0x14>
 8000d8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d8e:	d107      	bne.n	8000da0 <__aeabi_d2f+0x90>
 8000d90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d94:	bf1e      	ittt	ne
 8000d96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d9e:	4770      	bxne	lr
 8000da0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000da4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <__aeabi_uldivmod>:
 8000db0:	b953      	cbnz	r3, 8000dc8 <__aeabi_uldivmod+0x18>
 8000db2:	b94a      	cbnz	r2, 8000dc8 <__aeabi_uldivmod+0x18>
 8000db4:	2900      	cmp	r1, #0
 8000db6:	bf08      	it	eq
 8000db8:	2800      	cmpeq	r0, #0
 8000dba:	bf1c      	itt	ne
 8000dbc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000dc0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000dc4:	f000 b96a 	b.w	800109c <__aeabi_idiv0>
 8000dc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dd0:	f000 f806 	bl	8000de0 <__udivmoddi4>
 8000dd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ddc:	b004      	add	sp, #16
 8000dde:	4770      	bx	lr

08000de0 <__udivmoddi4>:
 8000de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de4:	9d08      	ldr	r5, [sp, #32]
 8000de6:	460c      	mov	r4, r1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d14e      	bne.n	8000e8a <__udivmoddi4+0xaa>
 8000dec:	4694      	mov	ip, r2
 8000dee:	458c      	cmp	ip, r1
 8000df0:	4686      	mov	lr, r0
 8000df2:	fab2 f282 	clz	r2, r2
 8000df6:	d962      	bls.n	8000ebe <__udivmoddi4+0xde>
 8000df8:	b14a      	cbz	r2, 8000e0e <__udivmoddi4+0x2e>
 8000dfa:	f1c2 0320 	rsb	r3, r2, #32
 8000dfe:	4091      	lsls	r1, r2
 8000e00:	fa20 f303 	lsr.w	r3, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	4319      	orrs	r1, r3
 8000e0a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f f68c 	uxth.w	r6, ip
 8000e16:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb07 1114 	mls	r1, r7, r4, r1
 8000e22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e26:	fb04 f106 	mul.w	r1, r4, r6
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	d90a      	bls.n	8000e44 <__udivmoddi4+0x64>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e36:	f080 8112 	bcs.w	800105e <__udivmoddi4+0x27e>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 810f 	bls.w	800105e <__udivmoddi4+0x27e>
 8000e40:	3c02      	subs	r4, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a59      	subs	r1, r3, r1
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e4e:	fb07 1110 	mls	r1, r7, r0, r1
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f606 	mul.w	r6, r0, r6
 8000e5a:	429e      	cmp	r6, r3
 8000e5c:	d90a      	bls.n	8000e74 <__udivmoddi4+0x94>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e66:	f080 80fc 	bcs.w	8001062 <__udivmoddi4+0x282>
 8000e6a:	429e      	cmp	r6, r3
 8000e6c:	f240 80f9 	bls.w	8001062 <__udivmoddi4+0x282>
 8000e70:	4463      	add	r3, ip
 8000e72:	3802      	subs	r0, #2
 8000e74:	1b9b      	subs	r3, r3, r6
 8000e76:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	b11d      	cbz	r5, 8000e86 <__udivmoddi4+0xa6>
 8000e7e:	40d3      	lsrs	r3, r2
 8000e80:	2200      	movs	r2, #0
 8000e82:	e9c5 3200 	strd	r3, r2, [r5]
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d905      	bls.n	8000e9a <__udivmoddi4+0xba>
 8000e8e:	b10d      	cbz	r5, 8000e94 <__udivmoddi4+0xb4>
 8000e90:	e9c5 0100 	strd	r0, r1, [r5]
 8000e94:	2100      	movs	r1, #0
 8000e96:	4608      	mov	r0, r1
 8000e98:	e7f5      	b.n	8000e86 <__udivmoddi4+0xa6>
 8000e9a:	fab3 f183 	clz	r1, r3
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	d146      	bne.n	8000f30 <__udivmoddi4+0x150>
 8000ea2:	42a3      	cmp	r3, r4
 8000ea4:	d302      	bcc.n	8000eac <__udivmoddi4+0xcc>
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	f0c0 80f0 	bcc.w	800108c <__udivmoddi4+0x2ac>
 8000eac:	1a86      	subs	r6, r0, r2
 8000eae:	eb64 0303 	sbc.w	r3, r4, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d0e6      	beq.n	8000e86 <__udivmoddi4+0xa6>
 8000eb8:	e9c5 6300 	strd	r6, r3, [r5]
 8000ebc:	e7e3      	b.n	8000e86 <__udivmoddi4+0xa6>
 8000ebe:	2a00      	cmp	r2, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x204>
 8000ec4:	eba1 040c 	sub.w	r4, r1, ip
 8000ec8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ecc:	fa1f f78c 	uxth.w	r7, ip
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ed6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eda:	fb08 4416 	mls	r4, r8, r6, r4
 8000ede:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ee2:	fb07 f006 	mul.w	r0, r7, r6
 8000ee6:	4298      	cmp	r0, r3
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x11c>
 8000eea:	eb1c 0303 	adds.w	r3, ip, r3
 8000eee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ef2:	d202      	bcs.n	8000efa <__udivmoddi4+0x11a>
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	f200 80cd 	bhi.w	8001094 <__udivmoddi4+0x2b4>
 8000efa:	4626      	mov	r6, r4
 8000efc:	1a1c      	subs	r4, r3, r0
 8000efe:	fa1f f38e 	uxth.w	r3, lr
 8000f02:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f06:	fb08 4410 	mls	r4, r8, r0, r4
 8000f0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f0e:	fb00 f707 	mul.w	r7, r0, r7
 8000f12:	429f      	cmp	r7, r3
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x148>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x146>
 8000f20:	429f      	cmp	r7, r3
 8000f22:	f200 80b0 	bhi.w	8001086 <__udivmoddi4+0x2a6>
 8000f26:	4620      	mov	r0, r4
 8000f28:	1bdb      	subs	r3, r3, r7
 8000f2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f2e:	e7a5      	b.n	8000e7c <__udivmoddi4+0x9c>
 8000f30:	f1c1 0620 	rsb	r6, r1, #32
 8000f34:	408b      	lsls	r3, r1
 8000f36:	fa22 f706 	lsr.w	r7, r2, r6
 8000f3a:	431f      	orrs	r7, r3
 8000f3c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f40:	fa04 f301 	lsl.w	r3, r4, r1
 8000f44:	ea43 030c 	orr.w	r3, r3, ip
 8000f48:	40f4      	lsrs	r4, r6
 8000f4a:	fa00 f801 	lsl.w	r8, r0, r1
 8000f4e:	0c38      	lsrs	r0, r7, #16
 8000f50:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f54:	fbb4 fef0 	udiv	lr, r4, r0
 8000f58:	fa1f fc87 	uxth.w	ip, r7
 8000f5c:	fb00 441e 	mls	r4, r0, lr, r4
 8000f60:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f64:	fb0e f90c 	mul.w	r9, lr, ip
 8000f68:	45a1      	cmp	r9, r4
 8000f6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6e:	d90a      	bls.n	8000f86 <__udivmoddi4+0x1a6>
 8000f70:	193c      	adds	r4, r7, r4
 8000f72:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f76:	f080 8084 	bcs.w	8001082 <__udivmoddi4+0x2a2>
 8000f7a:	45a1      	cmp	r9, r4
 8000f7c:	f240 8081 	bls.w	8001082 <__udivmoddi4+0x2a2>
 8000f80:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f84:	443c      	add	r4, r7
 8000f86:	eba4 0409 	sub.w	r4, r4, r9
 8000f8a:	fa1f f983 	uxth.w	r9, r3
 8000f8e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f92:	fb00 4413 	mls	r4, r0, r3, r4
 8000f96:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f9a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f9e:	45a4      	cmp	ip, r4
 8000fa0:	d907      	bls.n	8000fb2 <__udivmoddi4+0x1d2>
 8000fa2:	193c      	adds	r4, r7, r4
 8000fa4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fa8:	d267      	bcs.n	800107a <__udivmoddi4+0x29a>
 8000faa:	45a4      	cmp	ip, r4
 8000fac:	d965      	bls.n	800107a <__udivmoddi4+0x29a>
 8000fae:	3b02      	subs	r3, #2
 8000fb0:	443c      	add	r4, r7
 8000fb2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fb6:	fba0 9302 	umull	r9, r3, r0, r2
 8000fba:	eba4 040c 	sub.w	r4, r4, ip
 8000fbe:	429c      	cmp	r4, r3
 8000fc0:	46ce      	mov	lr, r9
 8000fc2:	469c      	mov	ip, r3
 8000fc4:	d351      	bcc.n	800106a <__udivmoddi4+0x28a>
 8000fc6:	d04e      	beq.n	8001066 <__udivmoddi4+0x286>
 8000fc8:	b155      	cbz	r5, 8000fe0 <__udivmoddi4+0x200>
 8000fca:	ebb8 030e 	subs.w	r3, r8, lr
 8000fce:	eb64 040c 	sbc.w	r4, r4, ip
 8000fd2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fd6:	40cb      	lsrs	r3, r1
 8000fd8:	431e      	orrs	r6, r3
 8000fda:	40cc      	lsrs	r4, r1
 8000fdc:	e9c5 6400 	strd	r6, r4, [r5]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	e750      	b.n	8000e86 <__udivmoddi4+0xa6>
 8000fe4:	f1c2 0320 	rsb	r3, r2, #32
 8000fe8:	fa20 f103 	lsr.w	r1, r0, r3
 8000fec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff0:	fa24 f303 	lsr.w	r3, r4, r3
 8000ff4:	4094      	lsls	r4, r2
 8000ff6:	430c      	orrs	r4, r1
 8000ff8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ffc:	fa00 fe02 	lsl.w	lr, r0, r2
 8001000:	fa1f f78c 	uxth.w	r7, ip
 8001004:	fbb3 f0f8 	udiv	r0, r3, r8
 8001008:	fb08 3110 	mls	r1, r8, r0, r3
 800100c:	0c23      	lsrs	r3, r4, #16
 800100e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001012:	fb00 f107 	mul.w	r1, r0, r7
 8001016:	4299      	cmp	r1, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x24c>
 800101a:	eb1c 0303 	adds.w	r3, ip, r3
 800101e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001022:	d22c      	bcs.n	800107e <__udivmoddi4+0x29e>
 8001024:	4299      	cmp	r1, r3
 8001026:	d92a      	bls.n	800107e <__udivmoddi4+0x29e>
 8001028:	3802      	subs	r0, #2
 800102a:	4463      	add	r3, ip
 800102c:	1a5b      	subs	r3, r3, r1
 800102e:	b2a4      	uxth	r4, r4
 8001030:	fbb3 f1f8 	udiv	r1, r3, r8
 8001034:	fb08 3311 	mls	r3, r8, r1, r3
 8001038:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800103c:	fb01 f307 	mul.w	r3, r1, r7
 8001040:	42a3      	cmp	r3, r4
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x276>
 8001044:	eb1c 0404 	adds.w	r4, ip, r4
 8001048:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800104c:	d213      	bcs.n	8001076 <__udivmoddi4+0x296>
 800104e:	42a3      	cmp	r3, r4
 8001050:	d911      	bls.n	8001076 <__udivmoddi4+0x296>
 8001052:	3902      	subs	r1, #2
 8001054:	4464      	add	r4, ip
 8001056:	1ae4      	subs	r4, r4, r3
 8001058:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800105c:	e739      	b.n	8000ed2 <__udivmoddi4+0xf2>
 800105e:	4604      	mov	r4, r0
 8001060:	e6f0      	b.n	8000e44 <__udivmoddi4+0x64>
 8001062:	4608      	mov	r0, r1
 8001064:	e706      	b.n	8000e74 <__udivmoddi4+0x94>
 8001066:	45c8      	cmp	r8, r9
 8001068:	d2ae      	bcs.n	8000fc8 <__udivmoddi4+0x1e8>
 800106a:	ebb9 0e02 	subs.w	lr, r9, r2
 800106e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001072:	3801      	subs	r0, #1
 8001074:	e7a8      	b.n	8000fc8 <__udivmoddi4+0x1e8>
 8001076:	4631      	mov	r1, r6
 8001078:	e7ed      	b.n	8001056 <__udivmoddi4+0x276>
 800107a:	4603      	mov	r3, r0
 800107c:	e799      	b.n	8000fb2 <__udivmoddi4+0x1d2>
 800107e:	4630      	mov	r0, r6
 8001080:	e7d4      	b.n	800102c <__udivmoddi4+0x24c>
 8001082:	46d6      	mov	lr, sl
 8001084:	e77f      	b.n	8000f86 <__udivmoddi4+0x1a6>
 8001086:	4463      	add	r3, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e74d      	b.n	8000f28 <__udivmoddi4+0x148>
 800108c:	4606      	mov	r6, r0
 800108e:	4623      	mov	r3, r4
 8001090:	4608      	mov	r0, r1
 8001092:	e70f      	b.n	8000eb4 <__udivmoddi4+0xd4>
 8001094:	3e02      	subs	r6, #2
 8001096:	4463      	add	r3, ip
 8001098:	e730      	b.n	8000efc <__udivmoddi4+0x11c>
 800109a:	bf00      	nop

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <read_temperature>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
    float read_temperature(void)    // To read the Sensor Data
    {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
    		HAL_ADC_Start(&hadc1);
 80010a6:	4822      	ldr	r0, [pc, #136]	@ (8001130 <read_temperature+0x90>)
 80010a8:	f000 fc82 	bl	80019b0 <HAL_ADC_Start>
    		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010b0:	481f      	ldr	r0, [pc, #124]	@ (8001130 <read_temperature+0x90>)
 80010b2:	f000 fd81 	bl	8001bb8 <HAL_ADC_PollForConversion>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d106      	bne.n	80010ca <read_temperature+0x2a>
    		{
    			value = HAL_ADC_GetValue(&hadc1);
 80010bc:	481c      	ldr	r0, [pc, #112]	@ (8001130 <read_temperature+0x90>)
 80010be:	f000 fe06 	bl	8001cce <HAL_ADC_GetValue>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <read_temperature+0x94>)
 80010c8:	801a      	strh	r2, [r3, #0]
    		}
	HAL_ADC_Stop(&hadc1);
 80010ca:	4819      	ldr	r0, [pc, #100]	@ (8001130 <read_temperature+0x90>)
 80010cc:	f000 fd42 	bl	8001b54 <HAL_ADC_Stop>
	// Convert ADC value to temperature in Celsius
    float voltage = ((value * 3.3) / 4095.0);      // Voltage calculation
 80010d0:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <read_temperature+0x94>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fad9 	bl	800068c <__aeabi_i2d>
 80010da:	a311      	add	r3, pc, #68	@ (adr r3, 8001120 <read_temperature+0x80>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff fb3e 	bl	8000760 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8001128 <read_temperature+0x88>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fc5f 	bl	80009b4 <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fe07 	bl	8000d10 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	607b      	str	r3, [r7, #4]
    float temperature = (voltage * 100.0);       // LM35 gives 10mV per degree Celsius
 8001106:	490c      	ldr	r1, [pc, #48]	@ (8001138 <read_temperature+0x98>)
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff f8b9 	bl	8000280 <__aeabi_fmul>
 800110e:	4603      	mov	r3, r0
 8001110:	603b      	str	r3, [r7, #0]
    return temperature;
 8001112:	683b      	ldr	r3, [r7, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	f3af 8000 	nop.w
 8001120:	66666666 	.word	0x66666666
 8001124:	400a6666 	.word	0x400a6666
 8001128:	00000000 	.word	0x00000000
 800112c:	40affe00 	.word	0x40affe00
 8001130:	200001f0 	.word	0x200001f0
 8001134:	20000280 	.word	0x20000280
 8001138:	42c80000 	.word	0x42c80000

0800113c <send_temperature>:
    // Prepare the message
void  send_temperature(float temperature)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "Temperature: %.2f C\r\n", temperature); // To print the temperature data
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff fab3 	bl	80006b0 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4909      	ldr	r1, [pc, #36]	@ (8001174 <send_temperature+0x38>)
 8001150:	4809      	ldr	r0, [pc, #36]	@ (8001178 <send_temperature+0x3c>)
 8001152:	f003 f845 	bl	80041e0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_msg, strlen(uart_msg), HAL_MAX_DELAY);   // Data Sent on UART
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <send_temperature+0x3c>)
 8001158:	f7ff f88a 	bl	8000270 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	b29a      	uxth	r2, r3
 8001160:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001164:	4904      	ldr	r1, [pc, #16]	@ (8001178 <send_temperature+0x3c>)
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <send_temperature+0x40>)
 8001168:	f001 ff5e 	bl	8003028 <HAL_UART_Transmit>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08006448 	.word	0x08006448
 8001178:	20000284 	.word	0x20000284
 800117c:	20000238 	.word	0x20000238

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f000 fb3d 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f82b 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f000 f90f 	bl	80013b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001192:	f000 f891 	bl	80012b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001196:	f000 f8e1 	bl	800135c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char msg[]="LM35 Sensor Measuring Temperature";
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <main+0x5c>)
 800119c:	463c      	mov	r4, r7
 800119e:	461d      	mov	r5, r3
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a8:	682b      	ldr	r3, [r5, #0]
 80011aa:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); // HAL_MAX_Delay means timeout delay
 80011ac:	463b      	mov	r3, r7
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f85e 	bl	8000270 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4639      	mov	r1, r7
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011be:	4808      	ldr	r0, [pc, #32]	@ (80011e0 <main+0x60>)
 80011c0:	f001 ff32 	bl	8003028 <HAL_UART_Transmit>
  while (1)						                  // To fetch the reading in continous manner
  {
		float temperature  = read_temperature();  // Call to Read the Temperature
 80011c4:	f7ff ff6c 	bl	80010a0 <read_temperature>
 80011c8:	6278      	str	r0, [r7, #36]	@ 0x24
		send_temperature(temperature);            // Access the Data and Sent on UART
 80011ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011cc:	f7ff ffb6 	bl	800113c <send_temperature>
		HAL_Delay(1000);   						  // 10s Delay
 80011d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011d4:	f000 fb84 	bl	80018e0 <HAL_Delay>
  {
 80011d8:	bf00      	nop
 80011da:	e7f3      	b.n	80011c4 <main+0x44>
 80011dc:	08006460 	.word	0x08006460
 80011e0:	20000238 	.word	0x20000238

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	@ 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2230      	movs	r2, #48	@ 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 f857 	bl	80042a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <SystemClock_Config+0xcc>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a27      	ldr	r2, [pc, #156]	@ (80012b0 <SystemClock_Config+0xcc>)
 8001212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <SystemClock_Config+0xcc>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <SystemClock_Config+0xd0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <SystemClock_Config+0xd0>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <SystemClock_Config+0xd0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001258:	2332      	movs	r3, #50	@ 0x32
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800125c:	2304      	movs	r3, #4
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001260:	2307      	movs	r3, #7
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f001 f9f1 	bl	8002650 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001274:	f000 f8ee 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001284:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fc52 	bl	8002b40 <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012a2:	f000 f8d7 	bl	8001454 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	@ 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012cc:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <MX_ADC1_Init+0x9c>)
 80012ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012f8:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <MX_ADC1_Init+0xa0>)
 80012fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_ADC1_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_ADC1_Init+0x98>)
 8001304:	2201      	movs	r2, #1
 8001306:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_ADC1_Init+0x98>)
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_ADC1_Init+0x98>)
 8001312:	2201      	movs	r2, #1
 8001314:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001316:	480e      	ldr	r0, [pc, #56]	@ (8001350 <MX_ADC1_Init+0x98>)
 8001318:	f000 fb06 	bl	8001928 <HAL_ADC_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001322:	f000 f897 	bl	8001454 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800132a:	2301      	movs	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <MX_ADC1_Init+0x98>)
 8001338:	f000 fcd6 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001342:	f000 f887 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200001f0 	.word	0x200001f0
 8001354:	40012000 	.word	0x40012000
 8001358:	0f000001 	.word	0x0f000001

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <MX_USART2_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001394:	f001 fdf8 	bl	8002f88 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f000 f859 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000238 	.word	0x20000238
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b20      	ldr	r3, [pc, #128]	@ (800144c <MX_GPIO_Init+0x9c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a1f      	ldr	r2, [pc, #124]	@ (800144c <MX_GPIO_Init+0x9c>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <MX_GPIO_Init+0x9c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <MX_GPIO_Init+0x9c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4a18      	ldr	r2, [pc, #96]	@ (800144c <MX_GPIO_Init+0x9c>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_GPIO_Init+0x9c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MX_GPIO_Init+0x9c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a11      	ldr	r2, [pc, #68]	@ (800144c <MX_GPIO_Init+0x9c>)
 8001408:	f043 0308 	orr.w	r3, r3, #8
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_GPIO_Init+0x9c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001420:	480b      	ldr	r0, [pc, #44]	@ (8001450 <MX_GPIO_Init+0xa0>)
 8001422:	f001 f8fd 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	4804      	ldr	r0, [pc, #16]	@ (8001450 <MX_GPIO_Init+0xa0>)
 8001440:	f000 ff54 	bl	80022ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	40020c00 	.word	0x40020c00

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <Error_Handler+0x8>

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <HAL_MspInit+0x4c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <HAL_MspInit+0x4c>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <HAL_MspInit+0x4c>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800149e:	2007      	movs	r0, #7
 80014a0:	f000 fef0 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a17      	ldr	r2, [pc, #92]	@ (800152c <HAL_ADC_MspInit+0x7c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d127      	bne.n	8001522 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <HAL_ADC_MspInit+0x80>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a15      	ldr	r2, [pc, #84]	@ (8001530 <HAL_ADC_MspInit+0x80>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <HAL_ADC_MspInit+0x80>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <HAL_ADC_MspInit+0x80>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001530 <HAL_ADC_MspInit+0x80>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <HAL_ADC_MspInit+0x80>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800150a:	2301      	movs	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <HAL_ADC_MspInit+0x84>)
 800151e:	f000 fee5 	bl	80022ec <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	@ 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40012000 	.word	0x40012000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000

08001538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	@ (80015bc <HAL_UART_MspInit+0x84>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d12b      	bne.n	80015b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4a17      	ldr	r2, [pc, #92]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	6413      	str	r3, [r2, #64]	@ 0x40
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a10      	ldr	r2, [pc, #64]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <HAL_UART_MspInit+0x88>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001592:	230c      	movs	r3, #12
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a2:	2307      	movs	r3, #7
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <HAL_UART_MspInit+0x8c>)
 80015ae:	f000 fe9d 	bl	80022ec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	@ 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40004400 	.word	0x40004400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <NMI_Handler+0x4>

080015d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <HardFault_Handler+0x4>

080015d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <MemManage_Handler+0x4>

080015e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <BusFault_Handler+0x4>

080015e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <UsageFault_Handler+0x4>

080015f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001618:	f000 f946 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}

08001620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return 1;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <_kill>:

int _kill(int pid, int sig)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001638:	f002 fe88 	bl	800434c <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	2216      	movs	r2, #22
 8001640:	601a      	str	r2, [r3, #0]
  return -1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_exit>:

void _exit (int status)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001656:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffe7 	bl	800162e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <_exit+0x12>

08001664 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e00a      	b.n	800168c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001676:	f3af 8000 	nop.w
 800167a:	4601      	mov	r1, r0
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	60ba      	str	r2, [r7, #8]
 8001682:	b2ca      	uxtb	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	429a      	cmp	r2, r3
 8001692:	dbf0      	blt.n	8001676 <_read+0x12>
  }

  return len;
 8001694:	687b      	ldr	r3, [r7, #4]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e009      	b.n	80016c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dbf1      	blt.n	80016b0 <_write+0x12>
  }
  return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_close>:

int _close(int file)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fc:	605a      	str	r2, [r3, #4]
  return 0;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <_isatty>:

int _isatty(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
	...

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	@ (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	@ (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f002 fdf0 	bl	800434c <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	@ (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	@ (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20020000 	.word	0x20020000
 8001798:	00000400 	.word	0x00000400
 800179c:	200002b8 	.word	0x200002b8
 80017a0:	20000410 	.word	0x20000410

080017a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017b4:	f7ff fff6 	bl	80017a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b8:	480c      	ldr	r0, [pc, #48]	@ (80017ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ba:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d0:	4c0a      	ldr	r4, [pc, #40]	@ (80017fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017de:	f002 fdbb 	bl	8004358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e2:	f7ff fccd 	bl	8001180 <main>
  bx  lr    
 80017e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017f4:	08006820 	.word	0x08006820
  ldr r2, =_sbss
 80017f8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017fc:	2000040c 	.word	0x2000040c

08001800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <HAL_Init+0x40>)
 800180e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <HAL_Init+0x40>)
 800181a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800181e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <HAL_Init+0x40>)
 8001826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 fd29 	bl	8002284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fe12 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023c00 	.word	0x40023c00

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fd33 	bl	80022d2 <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001884:	f000 fd09 	bl	800229a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	@ (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_IncTick+0x1c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_IncTick+0x20>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a03      	ldr	r2, [pc, #12]	@ (80018c8 <HAL_IncTick+0x20>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	20000008 	.word	0x20000008
 80018c8:	200002bc 	.word	0x200002bc

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b02      	ldr	r3, [pc, #8]	@ (80018dc <HAL_GetTick+0x10>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	200002bc 	.word	0x200002bc

080018e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff fff0 	bl	80018cc <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f8:	d005      	beq.n	8001906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <HAL_Delay+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001906:	bf00      	nop
 8001908:	f7ff ffe0 	bl	80018cc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8f7      	bhi.n	8001908 <HAL_Delay+0x28>
  {
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008

08001928 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e033      	b.n	80019a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff fdb2 	bl	80014b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d118      	bne.n	8001998 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	f043 0202 	orr.w	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fad6 	bl	8001f2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
 8001996:	e001      	b.n	800199c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_ADC_Start+0x1a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e0b2      	b.n	8001b30 <HAL_ADC_Start+0x180>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d018      	beq.n	8001a12 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019f0:	4b52      	ldr	r3, [pc, #328]	@ (8001b3c <HAL_ADC_Start+0x18c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a52      	ldr	r2, [pc, #328]	@ (8001b40 <HAL_ADC_Start+0x190>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9a      	lsrs	r2, r3, #18
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a04:	e002      	b.n	8001a0c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f9      	bne.n	8001a06 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d17a      	bne.n	8001b16 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a5e:	d106      	bne.n	8001a6e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a64:	f023 0206 	bic.w	r2, r3, #6
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a6c:	e002      	b.n	8001a74 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a7c:	4b31      	ldr	r3, [pc, #196]	@ (8001b44 <HAL_ADC_Start+0x194>)
 8001a7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a88:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d12a      	bne.n	8001aec <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001b48 <HAL_ADC_Start+0x198>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d015      	beq.n	8001acc <HAL_ADC_Start+0x11c>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a29      	ldr	r2, [pc, #164]	@ (8001b4c <HAL_ADC_Start+0x19c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d105      	bne.n	8001ab6 <HAL_ADC_Start+0x106>
 8001aaa:	4b26      	ldr	r3, [pc, #152]	@ (8001b44 <HAL_ADC_Start+0x194>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00a      	beq.n	8001acc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a25      	ldr	r2, [pc, #148]	@ (8001b50 <HAL_ADC_Start+0x1a0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d136      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_ADC_Start+0x194>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d130      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d129      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	e020      	b.n	8001b2e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a15      	ldr	r2, [pc, #84]	@ (8001b48 <HAL_ADC_Start+0x198>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11b      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d114      	bne.n	8001b2e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e00b      	b.n	8001b2e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f043 0210 	orr.w	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	40012300 	.word	0x40012300
 8001b48:	40012000 	.word	0x40012000
 8001b4c:	40012100 	.word	0x40012100
 8001b50:	40012200 	.word	0x40012200

08001b54 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Stop+0x16>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e021      	b.n	8001bae <HAL_ADC_Stop+0x5a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd4:	d113      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be4:	d10b      	bne.n	8001bfe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f043 0220 	orr.w	r2, r3, #32
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e063      	b.n	8001cc6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bfe:	f7ff fe65 	bl	80018cc <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c04:	e021      	b.n	8001c4a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c0c:	d01d      	beq.n	8001c4a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d007      	beq.n	8001c24 <HAL_ADC_PollForConversion+0x6c>
 8001c14:	f7ff fe5a 	bl	80018cc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d212      	bcs.n	8001c4a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d00b      	beq.n	8001c4a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f043 0204 	orr.w	r2, r3, #4
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e03d      	b.n	8001cc6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d1d6      	bne.n	8001c06 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f06f 0212 	mvn.w	r2, #18
 8001c60:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d123      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d11f      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d111      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e105      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x228>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d925      	bls.n	8001d60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4403      	add	r3, r0
 8001d52:	3b1e      	subs	r3, #30
 8001d54:	409a      	lsls	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e022      	b.n	8001da6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	2207      	movs	r2, #7
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4403      	add	r3, r0
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d824      	bhi.n	8001df8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b05      	subs	r3, #5
 8001dc0:	221f      	movs	r2, #31
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	400a      	ands	r2, r1
 8001dce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4618      	mov	r0, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b05      	subs	r3, #5
 8001dea:	fa00 f203 	lsl.w	r2, r0, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001df6:	e04c      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d824      	bhi.n	8001e4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b23      	subs	r3, #35	@ 0x23
 8001e12:	221f      	movs	r2, #31
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	400a      	ands	r2, r1
 8001e20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b23      	subs	r3, #35	@ 0x23
 8001e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e48:	e023      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b41      	subs	r3, #65	@ 0x41
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b41      	subs	r3, #65	@ 0x41
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e92:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <HAL_ADC_ConfigChannel+0x234>)
 8001e94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a21      	ldr	r2, [pc, #132]	@ (8001f20 <HAL_ADC_ConfigChannel+0x238>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b12      	cmp	r3, #18
 8001ea6:	d105      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <HAL_ADC_ConfigChannel+0x238>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d123      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d003      	beq.n	8001ece <HAL_ADC_ConfigChannel+0x1e6>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b11      	cmp	r3, #17
 8001ecc:	d11b      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d111      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_ADC_ConfigChannel+0x23c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a10      	ldr	r2, [pc, #64]	@ (8001f28 <HAL_ADC_ConfigChannel+0x240>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0c9a      	lsrs	r2, r3, #18
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40012300 	.word	0x40012300
 8001f20:	40012000 	.word	0x40012000
 8001f24:	20000000 	.word	0x20000000
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f34:	4b79      	ldr	r3, [pc, #484]	@ (800211c <ADC_Init+0x1f0>)
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	021a      	lsls	r2, r3, #8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fbe:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <ADC_Init+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d022      	beq.n	800200a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6899      	ldr	r1, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	e00f      	b.n	800202a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002028:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0202 	bic.w	r2, r2, #2
 8002038:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7e1b      	ldrb	r3, [r3, #24]
 8002044:	005a      	lsls	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01b      	beq.n	8002090 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002066:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002076:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	3b01      	subs	r3, #1
 8002084:	035a      	lsls	r2, r3, #13
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	e007      	b.n	80020a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800209e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	051a      	lsls	r2, r3, #20
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020e2:	025a      	lsls	r2, r3, #9
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6899      	ldr	r1, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	029a      	lsls	r2, r3, #10
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40012300 	.word	0x40012300
 8002120:	0f000001 	.word	0x0f000001

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	@ (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	@ (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	@ 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002250:	d301      	bcc.n	8002256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002252:	2301      	movs	r3, #1
 8002254:	e00f      	b.n	8002276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <SysTick_Config+0x40>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800225e:	210f      	movs	r1, #15
 8002260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002264:	f7ff ff90 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <SysTick_Config+0x40>)
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800226e:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <SysTick_Config+0x40>)
 8002270:	2207      	movs	r2, #7
 8002272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	e000e010 	.word	0xe000e010

08002284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ff49 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	4603      	mov	r3, r0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff5e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff90 	bl	80021dc <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5f 	bl	8002188 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffb0 	bl	8002240 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	e16b      	b.n	80025e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	f040 815a 	bne.w	80025da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	2b01      	cmp	r3, #1
 8002330:	d005      	beq.n	800233e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	2b02      	cmp	r3, #2
 800233c:	d130      	bne.n	80023a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002374:	2201      	movs	r2, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 0201 	and.w	r2, r3, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d017      	beq.n	80023dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d123      	bne.n	8002430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	08da      	lsrs	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3208      	adds	r2, #8
 800242a:	69b9      	ldr	r1, [r7, #24]
 800242c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 0203 	and.w	r2, r3, #3
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 80b4 	beq.w	80025da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b5f      	ldr	r3, [pc, #380]	@ (80025f4 <HAL_GPIO_Init+0x308>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	4a5e      	ldr	r2, [pc, #376]	@ (80025f4 <HAL_GPIO_Init+0x308>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002480:	6453      	str	r3, [r2, #68]	@ 0x44
 8002482:	4b5c      	ldr	r3, [pc, #368]	@ (80025f4 <HAL_GPIO_Init+0x308>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248e:	4a5a      	ldr	r2, [pc, #360]	@ (80025f8 <HAL_GPIO_Init+0x30c>)
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	220f      	movs	r2, #15
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a51      	ldr	r2, [pc, #324]	@ (80025fc <HAL_GPIO_Init+0x310>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d02b      	beq.n	8002512 <HAL_GPIO_Init+0x226>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a50      	ldr	r2, [pc, #320]	@ (8002600 <HAL_GPIO_Init+0x314>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d025      	beq.n	800250e <HAL_GPIO_Init+0x222>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002604 <HAL_GPIO_Init+0x318>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01f      	beq.n	800250a <HAL_GPIO_Init+0x21e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002608 <HAL_GPIO_Init+0x31c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_Init+0x21a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4d      	ldr	r2, [pc, #308]	@ (800260c <HAL_GPIO_Init+0x320>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0x216>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002610 <HAL_GPIO_Init+0x324>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_Init+0x212>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002614 <HAL_GPIO_Init+0x328>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x20e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002618 <HAL_GPIO_Init+0x32c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_Init+0x20a>
 80024f2:	2307      	movs	r3, #7
 80024f4:	e00e      	b.n	8002514 <HAL_GPIO_Init+0x228>
 80024f6:	2308      	movs	r3, #8
 80024f8:	e00c      	b.n	8002514 <HAL_GPIO_Init+0x228>
 80024fa:	2306      	movs	r3, #6
 80024fc:	e00a      	b.n	8002514 <HAL_GPIO_Init+0x228>
 80024fe:	2305      	movs	r3, #5
 8002500:	e008      	b.n	8002514 <HAL_GPIO_Init+0x228>
 8002502:	2304      	movs	r3, #4
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x228>
 8002506:	2303      	movs	r3, #3
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x228>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x228>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x228>
 8002512:	2300      	movs	r3, #0
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f002 0203 	and.w	r2, r2, #3
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	4093      	lsls	r3, r2
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002524:	4934      	ldr	r1, [pc, #208]	@ (80025f8 <HAL_GPIO_Init+0x30c>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3302      	adds	r3, #2
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002532:	4b3a      	ldr	r3, [pc, #232]	@ (800261c <HAL_GPIO_Init+0x330>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002556:	4a31      	ldr	r2, [pc, #196]	@ (800261c <HAL_GPIO_Init+0x330>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255c:	4b2f      	ldr	r3, [pc, #188]	@ (800261c <HAL_GPIO_Init+0x330>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002580:	4a26      	ldr	r2, [pc, #152]	@ (800261c <HAL_GPIO_Init+0x330>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002586:	4b25      	ldr	r3, [pc, #148]	@ (800261c <HAL_GPIO_Init+0x330>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025aa:	4a1c      	ldr	r2, [pc, #112]	@ (800261c <HAL_GPIO_Init+0x330>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_GPIO_Init+0x330>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d4:	4a11      	ldr	r2, [pc, #68]	@ (800261c <HAL_GPIO_Init+0x330>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3301      	adds	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	f67f ae90 	bls.w	8002308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	@ 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40020000 	.word	0x40020000
 8002600:	40020400 	.word	0x40020400
 8002604:	40020800 	.word	0x40020800
 8002608:	40020c00 	.word	0x40020c00
 800260c:	40021000 	.word	0x40021000
 8002610:	40021400 	.word	0x40021400
 8002614:	40021800 	.word	0x40021800
 8002618:	40021c00 	.word	0x40021c00
 800261c:	40013c00 	.word	0x40013c00

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e267      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d075      	beq.n	800275a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800266e:	4b88      	ldr	r3, [pc, #544]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b04      	cmp	r3, #4
 8002678:	d00c      	beq.n	8002694 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267a:	4b85      	ldr	r3, [pc, #532]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002682:	2b08      	cmp	r3, #8
 8002684:	d112      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b82      	ldr	r3, [pc, #520]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800268e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002692:	d10b      	bne.n	80026ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	4b7e      	ldr	r3, [pc, #504]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05b      	beq.n	8002758 <HAL_RCC_OscConfig+0x108>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d157      	bne.n	8002758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e242      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x74>
 80026b6:	4b76      	ldr	r3, [pc, #472]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a75      	ldr	r2, [pc, #468]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e01d      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x98>
 80026ce:	4b70      	ldr	r3, [pc, #448]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b6d      	ldr	r3, [pc, #436]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6c      	ldr	r2, [pc, #432]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0xb0>
 80026e8:	4b69      	ldr	r3, [pc, #420]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a68      	ldr	r2, [pc, #416]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b66      	ldr	r3, [pc, #408]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a65      	ldr	r2, [pc, #404]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80026fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff f8e0 	bl	80018cc <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff f8dc 	bl	80018cc <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	@ 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e207      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b5b      	ldr	r3, [pc, #364]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0xc0>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7ff f8cc 	bl	80018cc <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7ff f8c8 	bl	80018cc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	@ 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1f3      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	4b51      	ldr	r3, [pc, #324]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0xe8>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002766:	4b4a      	ldr	r3, [pc, #296]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002772:	4b47      	ldr	r3, [pc, #284]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800277a:	2b08      	cmp	r3, #8
 800277c:	d11c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b44      	ldr	r3, [pc, #272]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	4b41      	ldr	r3, [pc, #260]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <HAL_RCC_OscConfig+0x152>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e1c7      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4937      	ldr	r1, [pc, #220]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	e03a      	b.n	800282e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d020      	beq.n	8002802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027c0:	4b34      	ldr	r3, [pc, #208]	@ (8002894 <HAL_RCC_OscConfig+0x244>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7ff f881 	bl	80018cc <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7ff f87d 	bl	80018cc <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1a8      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4925      	ldr	r1, [pc, #148]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	e015      	b.n	800282e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002802:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_RCC_OscConfig+0x244>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002808:	f7ff f860 	bl	80018cc <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002810:	f7ff f85c 	bl	80018cc <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e187      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d036      	beq.n	80028a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002842:	4b15      	ldr	r3, [pc, #84]	@ (8002898 <HAL_RCC_OscConfig+0x248>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7ff f840 	bl	80018cc <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002850:	f7ff f83c 	bl	80018cc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e167      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <HAL_RCC_OscConfig+0x240>)
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0x200>
 800286e:	e01b      	b.n	80028a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_RCC_OscConfig+0x248>)
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7ff f829 	bl	80018cc <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	e00e      	b.n	800289c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287e:	f7ff f825 	bl	80018cc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d907      	bls.n	800289c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e150      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
 8002890:	40023800 	.word	0x40023800
 8002894:	42470000 	.word	0x42470000
 8002898:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ea      	bne.n	800287e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8097 	beq.w	80029e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b81      	ldr	r3, [pc, #516]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b7d      	ldr	r3, [pc, #500]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a7c      	ldr	r2, [pc, #496]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b77      	ldr	r3, [pc, #476]	@ (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f2:	4b74      	ldr	r3, [pc, #464]	@ (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a73      	ldr	r2, [pc, #460]	@ (8002ac4 <HAL_RCC_OscConfig+0x474>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7fe ffe5 	bl	80018cc <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe ffe1 	bl	80018cc <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e10c      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac4 <HAL_RCC_OscConfig+0x474>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x2ea>
 800292c:	4b64      	ldr	r3, [pc, #400]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	4a63      	ldr	r2, [pc, #396]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	@ 0x70
 8002938:	e01c      	b.n	8002974 <HAL_RCC_OscConfig+0x324>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b05      	cmp	r3, #5
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x30c>
 8002942:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002946:	4a5e      	ldr	r2, [pc, #376]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	@ 0x70
 800294e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	4a5b      	ldr	r2, [pc, #364]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6713      	str	r3, [r2, #112]	@ 0x70
 800295a:	e00b      	b.n	8002974 <HAL_RCC_OscConfig+0x324>
 800295c:	4b58      	ldr	r3, [pc, #352]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a57      	ldr	r2, [pc, #348]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	4b55      	ldr	r3, [pc, #340]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a54      	ldr	r2, [pc, #336]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe ffa6 	bl	80018cc <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe ffa2 	bl	80018cc <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0cb      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	4b49      	ldr	r3, [pc, #292]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0ee      	beq.n	8002984 <HAL_RCC_OscConfig+0x334>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a8:	f7fe ff90 	bl	80018cc <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe ff8c 	bl	80018cc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0b5      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1ee      	bne.n	80029b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4b39      	ldr	r3, [pc, #228]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	4a38      	ldr	r2, [pc, #224]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80a1 	beq.w	8002b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029ee:	4b34      	ldr	r3, [pc, #208]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d05c      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d141      	bne.n	8002a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b31      	ldr	r3, [pc, #196]	@ (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe ff60 	bl	80018cc <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe ff5c 	bl	80018cc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e087      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69da      	ldr	r2, [r3, #28]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	3b01      	subs	r3, #1
 8002a48:	041b      	lsls	r3, r3, #16
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	491b      	ldr	r1, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7fe ff35 	bl	80018cc <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe ff31 	bl	80018cc <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e05c      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a78:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x416>
 8002a84:	e054      	b.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <HAL_RCC_OscConfig+0x478>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe ff1e 	bl	80018cc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a94:	f7fe ff1a 	bl	80018cc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e045      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x444>
 8002ab2:	e03d      	b.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e038      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_RCC_OscConfig+0x4ec>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d028      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d121      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d11a      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d111      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	3b01      	subs	r3, #1
 8002b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0cc      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b68      	ldr	r3, [pc, #416]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d90c      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b65      	ldr	r3, [pc, #404]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b63      	ldr	r3, [pc, #396]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0b8      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d020      	beq.n	8002bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b94:	4b59      	ldr	r3, [pc, #356]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a58      	ldr	r2, [pc, #352]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bac:	4b53      	ldr	r3, [pc, #332]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb8:	4b50      	ldr	r3, [pc, #320]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	494d      	ldr	r1, [pc, #308]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d044      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b47      	ldr	r3, [pc, #284]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d119      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e07f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e067      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	4b37      	ldr	r3, [pc, #220]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4934      	ldr	r1, [pc, #208]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c30:	f7fe fe4c 	bl	80018cc <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fe fe48 	bl	80018cc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e04f      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c60:	4b25      	ldr	r3, [pc, #148]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d20c      	bcs.n	8002c88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c76:	4b20      	ldr	r3, [pc, #128]	@ (8002cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e032      	b.n	8002cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c94:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4916      	ldr	r1, [pc, #88]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	490e      	ldr	r1, [pc, #56]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cc6:	f000 f821 	bl	8002d0c <HAL_RCC_GetSysClockFreq>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	490a      	ldr	r1, [pc, #40]	@ (8002d00 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	5ccb      	ldrb	r3, [r1, r3]
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	4a09      	ldr	r2, [pc, #36]	@ (8002d04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fdae 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023c00 	.word	0x40023c00
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08006484 	.word	0x08006484
 8002d04:	20000000 	.word	0x20000000
 8002d08:	20000004 	.word	0x20000004

08002d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d10:	b094      	sub	sp, #80	@ 0x50
 8002d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d24:	4b7c      	ldr	r3, [pc, #496]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d00d      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x40>
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	f200 80e7 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x1f8>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x34>
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d3e:	e0e1      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b76      	ldr	r3, [pc, #472]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x210>)
 8002d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d44:	e0e1      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d46:	4b76      	ldr	r3, [pc, #472]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x214>)
 8002d48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d4a:	e0de      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d4c:	4b72      	ldr	r3, [pc, #456]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d56:	4b70      	ldr	r3, [pc, #448]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d065      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d62:	4b6d      	ldr	r3, [pc, #436]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d76:	2300      	movs	r3, #0
 8002d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d7e:	4622      	mov	r2, r4
 8002d80:	462b      	mov	r3, r5
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	0159      	lsls	r1, r3, #5
 8002d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d90:	0150      	lsls	r0, r2, #5
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4621      	mov	r1, r4
 8002d98:	1a51      	subs	r1, r2, r1
 8002d9a:	6139      	str	r1, [r7, #16]
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002db0:	4659      	mov	r1, fp
 8002db2:	018b      	lsls	r3, r1, #6
 8002db4:	4651      	mov	r1, sl
 8002db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dba:	4651      	mov	r1, sl
 8002dbc:	018a      	lsls	r2, r1, #6
 8002dbe:	46d4      	mov	ip, sl
 8002dc0:	ebb2 080c 	subs.w	r8, r2, ip
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dde:	4690      	mov	r8, r2
 8002de0:	4699      	mov	r9, r3
 8002de2:	4623      	mov	r3, r4
 8002de4:	eb18 0303 	adds.w	r3, r8, r3
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	462b      	mov	r3, r5
 8002dec:	eb49 0303 	adc.w	r3, r9, r3
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	024b      	lsls	r3, r1, #9
 8002e02:	4620      	mov	r0, r4
 8002e04:	4629      	mov	r1, r5
 8002e06:	4604      	mov	r4, r0
 8002e08:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002e0c:	4601      	mov	r1, r0
 8002e0e:	024a      	lsls	r2, r1, #9
 8002e10:	4610      	mov	r0, r2
 8002e12:	4619      	mov	r1, r3
 8002e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e20:	f7fd ffc6 	bl	8000db0 <__aeabi_uldivmod>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4613      	mov	r3, r2
 8002e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e2c:	e05c      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	099b      	lsrs	r3, r3, #6
 8002e34:	2200      	movs	r2, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	4611      	mov	r1, r2
 8002e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e48:	4642      	mov	r2, r8
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	f04f 0000 	mov.w	r0, #0
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	0159      	lsls	r1, r3, #5
 8002e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e5a:	0150      	lsls	r0, r2, #5
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	46c4      	mov	ip, r8
 8002e62:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002e66:	4640      	mov	r0, r8
 8002e68:	4649      	mov	r1, r9
 8002e6a:	468c      	mov	ip, r1
 8002e6c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e84:	ebb2 040a 	subs.w	r4, r2, sl
 8002e88:	eb63 050b 	sbc.w	r5, r3, fp
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	00eb      	lsls	r3, r5, #3
 8002e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9a:	00e2      	lsls	r2, r4, #3
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	18e3      	adds	r3, r4, r3
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	eb45 0303 	adc.w	r3, r5, r3
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eba:	4629      	mov	r1, r5
 8002ebc:	028b      	lsls	r3, r1, #10
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002ec8:	4601      	mov	r1, r0
 8002eca:	028a      	lsls	r2, r1, #10
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	61fa      	str	r2, [r7, #28]
 8002ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002edc:	f7fd ff68 	bl	8000db0 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ef8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x210>)
 8002f06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3750      	adds	r7, #80	@ 0x50
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b02      	ldr	r3, [pc, #8]	@ (8002f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr
 8002f34:	20000000 	.word	0x20000000

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f3c:	f7ff fff2 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0a9b      	lsrs	r3, r3, #10
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4903      	ldr	r1, [pc, #12]	@ (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	08006494 	.word	0x08006494

08002f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f64:	f7ff ffde 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	0b5b      	lsrs	r3, r3, #13
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	@ (8002f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40023800 	.word	0x40023800
 8002f84:	08006494 	.word	0x08006494

08002f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e042      	b.n	8003020 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe fac2 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	@ 0x24
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f971 	bl	80032b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	@ 0x28
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b20      	cmp	r3, #32
 8003046:	d175      	bne.n	8003134 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_UART_Transmit+0x2c>
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e06e      	b.n	8003136 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2221      	movs	r2, #33	@ 0x21
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003066:	f7fe fc31 	bl	80018cc <HAL_GetTick>
 800306a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	88fa      	ldrh	r2, [r7, #6]
 8003076:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003080:	d108      	bne.n	8003094 <HAL_UART_Transmit+0x6c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	e003      	b.n	800309c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800309c:	e02e      	b.n	80030fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	2180      	movs	r1, #128	@ 0x80
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f848 	bl	800313e <UART_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e03a      	b.n	8003136 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10b      	bne.n	80030de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3302      	adds	r3, #2
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e007      	b.n	80030ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	3301      	adds	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1cb      	bne.n	800309e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2200      	movs	r2, #0
 800310e:	2140      	movs	r1, #64	@ 0x40
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f814 	bl	800313e <UART_WaitOnFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e006      	b.n	8003136 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	603b      	str	r3, [r7, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314e:	e03b      	b.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003156:	d037      	beq.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003158:	f7fe fbb8 	bl	80018cc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	6a3a      	ldr	r2, [r7, #32]
 8003164:	429a      	cmp	r2, r3
 8003166:	d302      	bcc.n	800316e <UART_WaitOnFlagUntilTimeout+0x30>
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e03a      	b.n	80031e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d023      	beq.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b80      	cmp	r3, #128	@ 0x80
 8003184:	d020      	beq.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b40      	cmp	r3, #64	@ 0x40
 800318a:	d01d      	beq.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b08      	cmp	r3, #8
 8003198:	d116      	bne.n	80031c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f81d 	bl	80031f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2208      	movs	r2, #8
 80031ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e00f      	b.n	80031e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d0b4      	beq.n	8003150 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b095      	sub	sp, #84	@ 0x54
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	330c      	adds	r3, #12
 80031fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800320e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	330c      	adds	r3, #12
 8003216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003218:	643a      	str	r2, [r7, #64]	@ 0x40
 800321a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800321e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e5      	bne.n	80031f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3314      	adds	r3, #20
 8003232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	61fb      	str	r3, [r7, #28]
   return(result);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3314      	adds	r3, #20
 800324a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800324c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800324e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e5      	bne.n	800322c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	2b01      	cmp	r3, #1
 8003266:	d119      	bne.n	800329c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	330c      	adds	r3, #12
 800326e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	60bb      	str	r3, [r7, #8]
   return(result);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f023 0310 	bic.w	r3, r3, #16
 800327e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003288:	61ba      	str	r2, [r7, #24]
 800328a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6979      	ldr	r1, [r7, #20]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	613b      	str	r3, [r7, #16]
   return(result);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e5      	bne.n	8003268 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032aa:	bf00      	nop
 80032ac:	3754      	adds	r7, #84	@ 0x54
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr

080032b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b8:	b0c0      	sub	sp, #256	@ 0x100
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d0:	68d9      	ldr	r1, [r3, #12]
 80032d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	ea40 0301 	orr.w	r3, r0, r1
 80032dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800330c:	f021 010c 	bic.w	r1, r1, #12
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800331a:	430b      	orrs	r3, r1
 800331c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800331e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332e:	6999      	ldr	r1, [r3, #24]
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	ea40 0301 	orr.w	r3, r0, r1
 800333a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800333c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b91      	ldr	r3, [pc, #580]	@ (8003588 <UART_SetConfig+0x2d4>)
 8003344:	429a      	cmp	r2, r3
 8003346:	d005      	beq.n	8003354 <UART_SetConfig+0xa0>
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b8f      	ldr	r3, [pc, #572]	@ (800358c <UART_SetConfig+0x2d8>)
 8003350:	429a      	cmp	r2, r3
 8003352:	d104      	bne.n	800335e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003354:	f7ff fe04 	bl	8002f60 <HAL_RCC_GetPCLK2Freq>
 8003358:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800335c:	e003      	b.n	8003366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800335e:	f7ff fdeb 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 8003362:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003370:	f040 8110 	bne.w	8003594 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003378:	2200      	movs	r2, #0
 800337a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800337e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003386:	4622      	mov	r2, r4
 8003388:	462b      	mov	r3, r5
 800338a:	1891      	adds	r1, r2, r2
 800338c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800338e:	415b      	adcs	r3, r3
 8003390:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003396:	4620      	mov	r0, r4
 8003398:	4629      	mov	r1, r5
 800339a:	4604      	mov	r4, r0
 800339c:	eb12 0804 	adds.w	r8, r2, r4
 80033a0:	460c      	mov	r4, r1
 80033a2:	eb43 0904 	adc.w	r9, r3, r4
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ba:	4690      	mov	r8, r2
 80033bc:	4699      	mov	r9, r3
 80033be:	4603      	mov	r3, r0
 80033c0:	eb18 0303 	adds.w	r3, r8, r3
 80033c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033c8:	460b      	mov	r3, r1
 80033ca:	eb49 0303 	adc.w	r3, r9, r3
 80033ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033e6:	460b      	mov	r3, r1
 80033e8:	18db      	adds	r3, r3, r3
 80033ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80033ec:	4613      	mov	r3, r2
 80033ee:	eb42 0303 	adc.w	r3, r2, r3
 80033f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80033f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033fc:	f7fd fcd8 	bl	8000db0 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4b62      	ldr	r3, [pc, #392]	@ (8003590 <UART_SetConfig+0x2dc>)
 8003406:	fba3 2302 	umull	r2, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	011c      	lsls	r4, r3, #4
 800340e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003418:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800341c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003420:	4642      	mov	r2, r8
 8003422:	464b      	mov	r3, r9
 8003424:	1891      	adds	r1, r2, r2
 8003426:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003428:	415b      	adcs	r3, r3
 800342a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800342c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003430:	4645      	mov	r5, r8
 8003432:	eb12 0a05 	adds.w	sl, r2, r5
 8003436:	4640      	mov	r0, r8
 8003438:	4649      	mov	r1, r9
 800343a:	460d      	mov	r5, r1
 800343c:	eb43 0b05 	adc.w	fp, r3, r5
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800344c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003454:	4692      	mov	sl, r2
 8003456:	469b      	mov	fp, r3
 8003458:	4603      	mov	r3, r0
 800345a:	eb1a 0303 	adds.w	r3, sl, r3
 800345e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003462:	460b      	mov	r3, r1
 8003464:	eb4b 0303 	adc.w	r3, fp, r3
 8003468:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003478:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800347c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003480:	460b      	mov	r3, r1
 8003482:	18db      	adds	r3, r3, r3
 8003484:	643b      	str	r3, [r7, #64]	@ 0x40
 8003486:	4613      	mov	r3, r2
 8003488:	eb42 0303 	adc.w	r3, r2, r3
 800348c:	647b      	str	r3, [r7, #68]	@ 0x44
 800348e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003492:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003496:	f7fd fc8b 	bl	8000db0 <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003590 <UART_SetConfig+0x2dc>)
 80034a2:	fba3 2301 	umull	r2, r3, r3, r1
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2264      	movs	r2, #100	@ 0x64
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	1acb      	subs	r3, r1, r3
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034b6:	4b36      	ldr	r3, [pc, #216]	@ (8003590 <UART_SetConfig+0x2dc>)
 80034b8:	fba3 2302 	umull	r2, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034c4:	441c      	add	r4, r3
 80034c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034e0:	415b      	adcs	r3, r3
 80034e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034e8:	4641      	mov	r1, r8
 80034ea:	1851      	adds	r1, r2, r1
 80034ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80034ee:	4649      	mov	r1, r9
 80034f0:	414b      	adcs	r3, r1
 80034f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003500:	4659      	mov	r1, fp
 8003502:	00cb      	lsls	r3, r1, #3
 8003504:	4655      	mov	r5, sl
 8003506:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800350a:	4651      	mov	r1, sl
 800350c:	00ca      	lsls	r2, r1, #3
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	4603      	mov	r3, r0
 8003514:	4642      	mov	r2, r8
 8003516:	189b      	adds	r3, r3, r2
 8003518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800351c:	464b      	mov	r3, r9
 800351e:	460a      	mov	r2, r1
 8003520:	eb42 0303 	adc.w	r3, r2, r3
 8003524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003534:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800353c:	460b      	mov	r3, r1
 800353e:	18db      	adds	r3, r3, r3
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003542:	4613      	mov	r3, r2
 8003544:	eb42 0303 	adc.w	r3, r2, r3
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800354a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800354e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003552:	f7fd fc2d 	bl	8000db0 <__aeabi_uldivmod>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <UART_SetConfig+0x2dc>)
 800355c:	fba3 1302 	umull	r1, r3, r3, r2
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	2164      	movs	r1, #100	@ 0x64
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	3332      	adds	r3, #50	@ 0x32
 800356e:	4a08      	ldr	r2, [pc, #32]	@ (8003590 <UART_SetConfig+0x2dc>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	f003 0207 	and.w	r2, r3, #7
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4422      	add	r2, r4
 8003582:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003584:	e10a      	b.n	800379c <UART_SetConfig+0x4e8>
 8003586:	bf00      	nop
 8003588:	40011000 	.word	0x40011000
 800358c:	40011400 	.word	0x40011400
 8003590:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003598:	2200      	movs	r2, #0
 800359a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800359e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035a6:	4642      	mov	r2, r8
 80035a8:	464b      	mov	r3, r9
 80035aa:	1891      	adds	r1, r2, r2
 80035ac:	6239      	str	r1, [r7, #32]
 80035ae:	415b      	adcs	r3, r3
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035b6:	4641      	mov	r1, r8
 80035b8:	1854      	adds	r4, r2, r1
 80035ba:	46cc      	mov	ip, r9
 80035bc:	eb43 050c 	adc.w	r5, r3, ip
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	00eb      	lsls	r3, r5, #3
 80035ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ce:	00e2      	lsls	r2, r4, #3
 80035d0:	4614      	mov	r4, r2
 80035d2:	461d      	mov	r5, r3
 80035d4:	4640      	mov	r0, r8
 80035d6:	4649      	mov	r1, r9
 80035d8:	4603      	mov	r3, r0
 80035da:	18e3      	adds	r3, r4, r3
 80035dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035e0:	460b      	mov	r3, r1
 80035e2:	eb45 0303 	adc.w	r3, r5, r3
 80035e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003606:	4629      	mov	r1, r5
 8003608:	008b      	lsls	r3, r1, #2
 800360a:	4620      	mov	r0, r4
 800360c:	4629      	mov	r1, r5
 800360e:	4604      	mov	r4, r0
 8003610:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003614:	4601      	mov	r1, r0
 8003616:	008a      	lsls	r2, r1, #2
 8003618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800361c:	f7fd fbc8 	bl	8000db0 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4b60      	ldr	r3, [pc, #384]	@ (80037a8 <UART_SetConfig+0x4f4>)
 8003626:	fba3 2302 	umull	r2, r3, r3, r2
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	011c      	lsls	r4, r3, #4
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800363c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	61b9      	str	r1, [r7, #24]
 8003648:	415b      	adcs	r3, r3
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003650:	4641      	mov	r1, r8
 8003652:	1851      	adds	r1, r2, r1
 8003654:	6139      	str	r1, [r7, #16]
 8003656:	4649      	mov	r1, r9
 8003658:	414b      	adcs	r3, r1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003668:	4659      	mov	r1, fp
 800366a:	00cb      	lsls	r3, r1, #3
 800366c:	4655      	mov	r5, sl
 800366e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003672:	4651      	mov	r1, sl
 8003674:	00ca      	lsls	r2, r1, #3
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	4603      	mov	r3, r0
 800367c:	4642      	mov	r2, r8
 800367e:	189b      	adds	r3, r3, r2
 8003680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003684:	464b      	mov	r3, r9
 8003686:	460a      	mov	r2, r1
 8003688:	eb42 0303 	adc.w	r3, r2, r3
 800368c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800369a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036a8:	4649      	mov	r1, r9
 80036aa:	008b      	lsls	r3, r1, #2
 80036ac:	4645      	mov	r5, r8
 80036ae:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 80036b2:	4641      	mov	r1, r8
 80036b4:	008a      	lsls	r2, r1, #2
 80036b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036ba:	f7fd fb79 	bl	8000db0 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <UART_SetConfig+0x4f4>)
 80036c6:	fba3 2301 	umull	r2, r3, r3, r1
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2264      	movs	r2, #100	@ 0x64
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	1acb      	subs	r3, r1, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	3332      	adds	r3, #50	@ 0x32
 80036d8:	4a33      	ldr	r2, [pc, #204]	@ (80037a8 <UART_SetConfig+0x4f4>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036e4:	441c      	add	r4, r3
 80036e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ea:	2200      	movs	r2, #0
 80036ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80036ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80036f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	415b      	adcs	r3, r3
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003704:	4641      	mov	r1, r8
 8003706:	1851      	adds	r1, r2, r1
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	4649      	mov	r1, r9
 800370c:	414b      	adcs	r3, r1
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800371c:	4659      	mov	r1, fp
 800371e:	00cb      	lsls	r3, r1, #3
 8003720:	4655      	mov	r5, sl
 8003722:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003726:	4651      	mov	r1, sl
 8003728:	00ca      	lsls	r2, r1, #3
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	4603      	mov	r3, r0
 8003730:	4642      	mov	r2, r8
 8003732:	189b      	adds	r3, r3, r2
 8003734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003736:	464b      	mov	r3, r9
 8003738:	460a      	mov	r2, r1
 800373a:	eb42 0303 	adc.w	r3, r2, r3
 800373e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	663b      	str	r3, [r7, #96]	@ 0x60
 800374a:	667a      	str	r2, [r7, #100]	@ 0x64
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003758:	4649      	mov	r1, r9
 800375a:	008b      	lsls	r3, r1, #2
 800375c:	4645      	mov	r5, r8
 800375e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003762:	4641      	mov	r1, r8
 8003764:	008a      	lsls	r2, r1, #2
 8003766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800376a:	f7fd fb21 	bl	8000db0 <__aeabi_uldivmod>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4b0d      	ldr	r3, [pc, #52]	@ (80037a8 <UART_SetConfig+0x4f4>)
 8003774:	fba3 1302 	umull	r1, r3, r3, r2
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	2164      	movs	r1, #100	@ 0x64
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	3332      	adds	r3, #50	@ 0x32
 8003786:	4a08      	ldr	r2, [pc, #32]	@ (80037a8 <UART_SetConfig+0x4f4>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	f003 020f 	and.w	r2, r3, #15
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4422      	add	r2, r4
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037a2:	46bd      	mov	sp, r7
 80037a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a8:	51eb851f 	.word	0x51eb851f

080037ac <__cvt>:
 80037ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037b0:	b088      	sub	sp, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	461d      	mov	r5, r3
 80037b6:	4614      	mov	r4, r2
 80037b8:	bfbc      	itt	lt
 80037ba:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80037be:	4614      	movlt	r4, r2
 80037c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80037c2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80037c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80037c8:	bfb6      	itet	lt
 80037ca:	461d      	movlt	r5, r3
 80037cc:	2300      	movge	r3, #0
 80037ce:	232d      	movlt	r3, #45	@ 0x2d
 80037d0:	7013      	strb	r3, [r2, #0]
 80037d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80037d4:	f023 0820 	bic.w	r8, r3, #32
 80037d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80037dc:	d005      	beq.n	80037ea <__cvt+0x3e>
 80037de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80037e2:	d100      	bne.n	80037e6 <__cvt+0x3a>
 80037e4:	3601      	adds	r6, #1
 80037e6:	2302      	movs	r3, #2
 80037e8:	e000      	b.n	80037ec <__cvt+0x40>
 80037ea:	2303      	movs	r3, #3
 80037ec:	aa07      	add	r2, sp, #28
 80037ee:	9204      	str	r2, [sp, #16]
 80037f0:	aa06      	add	r2, sp, #24
 80037f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80037f6:	e9cd 3600 	strd	r3, r6, [sp]
 80037fa:	4622      	mov	r2, r4
 80037fc:	462b      	mov	r3, r5
 80037fe:	f000 fe5b 	bl	80044b8 <_dtoa_r>
 8003802:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003806:	4607      	mov	r7, r0
 8003808:	d119      	bne.n	800383e <__cvt+0x92>
 800380a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800380c:	07db      	lsls	r3, r3, #31
 800380e:	d50e      	bpl.n	800382e <__cvt+0x82>
 8003810:	eb00 0906 	add.w	r9, r0, r6
 8003814:	2200      	movs	r2, #0
 8003816:	2300      	movs	r3, #0
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	f7fd fa08 	bl	8000c30 <__aeabi_dcmpeq>
 8003820:	b108      	cbz	r0, 8003826 <__cvt+0x7a>
 8003822:	f8cd 901c 	str.w	r9, [sp, #28]
 8003826:	2230      	movs	r2, #48	@ 0x30
 8003828:	9b07      	ldr	r3, [sp, #28]
 800382a:	454b      	cmp	r3, r9
 800382c:	d31e      	bcc.n	800386c <__cvt+0xc0>
 800382e:	9b07      	ldr	r3, [sp, #28]
 8003830:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003832:	1bdb      	subs	r3, r3, r7
 8003834:	4638      	mov	r0, r7
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	b008      	add	sp, #32
 800383a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003842:	eb00 0906 	add.w	r9, r0, r6
 8003846:	d1e5      	bne.n	8003814 <__cvt+0x68>
 8003848:	7803      	ldrb	r3, [r0, #0]
 800384a:	2b30      	cmp	r3, #48	@ 0x30
 800384c:	d10a      	bne.n	8003864 <__cvt+0xb8>
 800384e:	2200      	movs	r2, #0
 8003850:	2300      	movs	r3, #0
 8003852:	4620      	mov	r0, r4
 8003854:	4629      	mov	r1, r5
 8003856:	f7fd f9eb 	bl	8000c30 <__aeabi_dcmpeq>
 800385a:	b918      	cbnz	r0, 8003864 <__cvt+0xb8>
 800385c:	f1c6 0601 	rsb	r6, r6, #1
 8003860:	f8ca 6000 	str.w	r6, [sl]
 8003864:	f8da 3000 	ldr.w	r3, [sl]
 8003868:	4499      	add	r9, r3
 800386a:	e7d3      	b.n	8003814 <__cvt+0x68>
 800386c:	1c59      	adds	r1, r3, #1
 800386e:	9107      	str	r1, [sp, #28]
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e7d9      	b.n	8003828 <__cvt+0x7c>

08003874 <__exponent>:
 8003874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003876:	2900      	cmp	r1, #0
 8003878:	bfba      	itte	lt
 800387a:	4249      	neglt	r1, r1
 800387c:	232d      	movlt	r3, #45	@ 0x2d
 800387e:	232b      	movge	r3, #43	@ 0x2b
 8003880:	2909      	cmp	r1, #9
 8003882:	7002      	strb	r2, [r0, #0]
 8003884:	7043      	strb	r3, [r0, #1]
 8003886:	dd29      	ble.n	80038dc <__exponent+0x68>
 8003888:	f10d 0307 	add.w	r3, sp, #7
 800388c:	461d      	mov	r5, r3
 800388e:	270a      	movs	r7, #10
 8003890:	461a      	mov	r2, r3
 8003892:	fbb1 f6f7 	udiv	r6, r1, r7
 8003896:	fb07 1416 	mls	r4, r7, r6, r1
 800389a:	3430      	adds	r4, #48	@ 0x30
 800389c:	f802 4c01 	strb.w	r4, [r2, #-1]
 80038a0:	460c      	mov	r4, r1
 80038a2:	2c63      	cmp	r4, #99	@ 0x63
 80038a4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80038a8:	4631      	mov	r1, r6
 80038aa:	dcf1      	bgt.n	8003890 <__exponent+0x1c>
 80038ac:	3130      	adds	r1, #48	@ 0x30
 80038ae:	1e94      	subs	r4, r2, #2
 80038b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80038b4:	1c41      	adds	r1, r0, #1
 80038b6:	4623      	mov	r3, r4
 80038b8:	42ab      	cmp	r3, r5
 80038ba:	d30a      	bcc.n	80038d2 <__exponent+0x5e>
 80038bc:	f10d 0309 	add.w	r3, sp, #9
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	42ac      	cmp	r4, r5
 80038c4:	bf88      	it	hi
 80038c6:	2300      	movhi	r3, #0
 80038c8:	3302      	adds	r3, #2
 80038ca:	4403      	add	r3, r0
 80038cc:	1a18      	subs	r0, r3, r0
 80038ce:	b003      	add	sp, #12
 80038d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80038d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80038da:	e7ed      	b.n	80038b8 <__exponent+0x44>
 80038dc:	2330      	movs	r3, #48	@ 0x30
 80038de:	3130      	adds	r1, #48	@ 0x30
 80038e0:	7083      	strb	r3, [r0, #2]
 80038e2:	70c1      	strb	r1, [r0, #3]
 80038e4:	1d03      	adds	r3, r0, #4
 80038e6:	e7f1      	b.n	80038cc <__exponent+0x58>

080038e8 <_printf_float>:
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ec:	b091      	sub	sp, #68	@ 0x44
 80038ee:	460c      	mov	r4, r1
 80038f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80038f4:	4616      	mov	r6, r2
 80038f6:	461f      	mov	r7, r3
 80038f8:	4605      	mov	r5, r0
 80038fa:	f000 fcdd 	bl	80042b8 <_localeconv_r>
 80038fe:	6803      	ldr	r3, [r0, #0]
 8003900:	9308      	str	r3, [sp, #32]
 8003902:	4618      	mov	r0, r3
 8003904:	f7fc fcb4 	bl	8000270 <strlen>
 8003908:	2300      	movs	r3, #0
 800390a:	930e      	str	r3, [sp, #56]	@ 0x38
 800390c:	f8d8 3000 	ldr.w	r3, [r8]
 8003910:	9009      	str	r0, [sp, #36]	@ 0x24
 8003912:	3307      	adds	r3, #7
 8003914:	f023 0307 	bic.w	r3, r3, #7
 8003918:	f103 0208 	add.w	r2, r3, #8
 800391c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003920:	f8d4 b000 	ldr.w	fp, [r4]
 8003924:	f8c8 2000 	str.w	r2, [r8]
 8003928:	e9d3 8900 	ldrd	r8, r9, [r3]
 800392c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003930:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003932:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003936:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800393a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800393e:	4b9d      	ldr	r3, [pc, #628]	@ (8003bb4 <_printf_float+0x2cc>)
 8003940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003944:	f7fd f9a6 	bl	8000c94 <__aeabi_dcmpun>
 8003948:	bb70      	cbnz	r0, 80039a8 <_printf_float+0xc0>
 800394a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800394e:	4b99      	ldr	r3, [pc, #612]	@ (8003bb4 <_printf_float+0x2cc>)
 8003950:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003954:	f7fd f980 	bl	8000c58 <__aeabi_dcmple>
 8003958:	bb30      	cbnz	r0, 80039a8 <_printf_float+0xc0>
 800395a:	2200      	movs	r2, #0
 800395c:	2300      	movs	r3, #0
 800395e:	4640      	mov	r0, r8
 8003960:	4649      	mov	r1, r9
 8003962:	f7fd f96f 	bl	8000c44 <__aeabi_dcmplt>
 8003966:	b110      	cbz	r0, 800396e <_printf_float+0x86>
 8003968:	232d      	movs	r3, #45	@ 0x2d
 800396a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800396e:	4a92      	ldr	r2, [pc, #584]	@ (8003bb8 <_printf_float+0x2d0>)
 8003970:	4b92      	ldr	r3, [pc, #584]	@ (8003bbc <_printf_float+0x2d4>)
 8003972:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003976:	bf94      	ite	ls
 8003978:	4690      	movls	r8, r2
 800397a:	4698      	movhi	r8, r3
 800397c:	2303      	movs	r3, #3
 800397e:	6123      	str	r3, [r4, #16]
 8003980:	f02b 0304 	bic.w	r3, fp, #4
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	f04f 0900 	mov.w	r9, #0
 800398a:	9700      	str	r7, [sp, #0]
 800398c:	4633      	mov	r3, r6
 800398e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003990:	4621      	mov	r1, r4
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f9d4 	bl	8003d40 <_printf_common>
 8003998:	3001      	adds	r0, #1
 800399a:	f040 808f 	bne.w	8003abc <_printf_float+0x1d4>
 800399e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039a2:	b011      	add	sp, #68	@ 0x44
 80039a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a8:	4642      	mov	r2, r8
 80039aa:	464b      	mov	r3, r9
 80039ac:	4640      	mov	r0, r8
 80039ae:	4649      	mov	r1, r9
 80039b0:	f7fd f970 	bl	8000c94 <__aeabi_dcmpun>
 80039b4:	b140      	cbz	r0, 80039c8 <_printf_float+0xe0>
 80039b6:	464b      	mov	r3, r9
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bfbc      	itt	lt
 80039bc:	232d      	movlt	r3, #45	@ 0x2d
 80039be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80039c2:	4a7f      	ldr	r2, [pc, #508]	@ (8003bc0 <_printf_float+0x2d8>)
 80039c4:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc4 <_printf_float+0x2dc>)
 80039c6:	e7d4      	b.n	8003972 <_printf_float+0x8a>
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80039d0:	d13f      	bne.n	8003a52 <_printf_float+0x16a>
 80039d2:	2306      	movs	r3, #6
 80039d4:	6063      	str	r3, [r4, #4]
 80039d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80039da:	2200      	movs	r2, #0
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	9206      	str	r2, [sp, #24]
 80039e0:	aa0e      	add	r2, sp, #56	@ 0x38
 80039e2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80039e6:	aa0d      	add	r2, sp, #52	@ 0x34
 80039e8:	9203      	str	r2, [sp, #12]
 80039ea:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80039ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80039f2:	6863      	ldr	r3, [r4, #4]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4642      	mov	r2, r8
 80039f8:	464b      	mov	r3, r9
 80039fa:	4628      	mov	r0, r5
 80039fc:	910a      	str	r1, [sp, #40]	@ 0x28
 80039fe:	f7ff fed5 	bl	80037ac <__cvt>
 8003a02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003a04:	2947      	cmp	r1, #71	@ 0x47
 8003a06:	4680      	mov	r8, r0
 8003a08:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003a0a:	d128      	bne.n	8003a5e <_printf_float+0x176>
 8003a0c:	1cc8      	adds	r0, r1, #3
 8003a0e:	db02      	blt.n	8003a16 <_printf_float+0x12e>
 8003a10:	6863      	ldr	r3, [r4, #4]
 8003a12:	4299      	cmp	r1, r3
 8003a14:	dd40      	ble.n	8003a98 <_printf_float+0x1b0>
 8003a16:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a1a:	fa5f fa8a 	uxtb.w	sl, sl
 8003a1e:	3901      	subs	r1, #1
 8003a20:	4652      	mov	r2, sl
 8003a22:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003a26:	910d      	str	r1, [sp, #52]	@ 0x34
 8003a28:	f7ff ff24 	bl	8003874 <__exponent>
 8003a2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003a2e:	1813      	adds	r3, r2, r0
 8003a30:	2a01      	cmp	r2, #1
 8003a32:	4681      	mov	r9, r0
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	dc02      	bgt.n	8003a3e <_printf_float+0x156>
 8003a38:	6822      	ldr	r2, [r4, #0]
 8003a3a:	07d2      	lsls	r2, r2, #31
 8003a3c:	d501      	bpl.n	8003a42 <_printf_float+0x15a>
 8003a3e:	3301      	adds	r3, #1
 8003a40:	6123      	str	r3, [r4, #16]
 8003a42:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d09f      	beq.n	800398a <_printf_float+0xa2>
 8003a4a:	232d      	movs	r3, #45	@ 0x2d
 8003a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a50:	e79b      	b.n	800398a <_printf_float+0xa2>
 8003a52:	2947      	cmp	r1, #71	@ 0x47
 8003a54:	d1bf      	bne.n	80039d6 <_printf_float+0xee>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1bd      	bne.n	80039d6 <_printf_float+0xee>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e7ba      	b.n	80039d4 <_printf_float+0xec>
 8003a5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003a62:	d9dc      	bls.n	8003a1e <_printf_float+0x136>
 8003a64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003a68:	d118      	bne.n	8003a9c <_printf_float+0x1b4>
 8003a6a:	2900      	cmp	r1, #0
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	dd0b      	ble.n	8003a88 <_printf_float+0x1a0>
 8003a70:	6121      	str	r1, [r4, #16]
 8003a72:	b913      	cbnz	r3, 8003a7a <_printf_float+0x192>
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	07d0      	lsls	r0, r2, #31
 8003a78:	d502      	bpl.n	8003a80 <_printf_float+0x198>
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	440b      	add	r3, r1
 8003a7e:	6123      	str	r3, [r4, #16]
 8003a80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003a82:	f04f 0900 	mov.w	r9, #0
 8003a86:	e7dc      	b.n	8003a42 <_printf_float+0x15a>
 8003a88:	b913      	cbnz	r3, 8003a90 <_printf_float+0x1a8>
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	07d2      	lsls	r2, r2, #31
 8003a8e:	d501      	bpl.n	8003a94 <_printf_float+0x1ac>
 8003a90:	3302      	adds	r3, #2
 8003a92:	e7f4      	b.n	8003a7e <_printf_float+0x196>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e7f2      	b.n	8003a7e <_printf_float+0x196>
 8003a98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a9e:	4299      	cmp	r1, r3
 8003aa0:	db05      	blt.n	8003aae <_printf_float+0x1c6>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	6121      	str	r1, [r4, #16]
 8003aa6:	07d8      	lsls	r0, r3, #31
 8003aa8:	d5ea      	bpl.n	8003a80 <_printf_float+0x198>
 8003aaa:	1c4b      	adds	r3, r1, #1
 8003aac:	e7e7      	b.n	8003a7e <_printf_float+0x196>
 8003aae:	2900      	cmp	r1, #0
 8003ab0:	bfd4      	ite	le
 8003ab2:	f1c1 0202 	rsble	r2, r1, #2
 8003ab6:	2201      	movgt	r2, #1
 8003ab8:	4413      	add	r3, r2
 8003aba:	e7e0      	b.n	8003a7e <_printf_float+0x196>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	055a      	lsls	r2, r3, #21
 8003ac0:	d407      	bmi.n	8003ad2 <_printf_float+0x1ea>
 8003ac2:	6923      	ldr	r3, [r4, #16]
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	4628      	mov	r0, r5
 8003aca:	47b8      	blx	r7
 8003acc:	3001      	adds	r0, #1
 8003ace:	d12b      	bne.n	8003b28 <_printf_float+0x240>
 8003ad0:	e765      	b.n	800399e <_printf_float+0xb6>
 8003ad2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ad6:	f240 80dd 	bls.w	8003c94 <_printf_float+0x3ac>
 8003ada:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f7fd f8a5 	bl	8000c30 <__aeabi_dcmpeq>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d033      	beq.n	8003b52 <_printf_float+0x26a>
 8003aea:	4a37      	ldr	r2, [pc, #220]	@ (8003bc8 <_printf_float+0x2e0>)
 8003aec:	2301      	movs	r3, #1
 8003aee:	4631      	mov	r1, r6
 8003af0:	4628      	mov	r0, r5
 8003af2:	47b8      	blx	r7
 8003af4:	3001      	adds	r0, #1
 8003af6:	f43f af52 	beq.w	800399e <_printf_float+0xb6>
 8003afa:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003afe:	4543      	cmp	r3, r8
 8003b00:	db02      	blt.n	8003b08 <_printf_float+0x220>
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	07d8      	lsls	r0, r3, #31
 8003b06:	d50f      	bpl.n	8003b28 <_printf_float+0x240>
 8003b08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	4628      	mov	r0, r5
 8003b10:	47b8      	blx	r7
 8003b12:	3001      	adds	r0, #1
 8003b14:	f43f af43 	beq.w	800399e <_printf_float+0xb6>
 8003b18:	f04f 0900 	mov.w	r9, #0
 8003b1c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003b20:	f104 0a1a 	add.w	sl, r4, #26
 8003b24:	45c8      	cmp	r8, r9
 8003b26:	dc09      	bgt.n	8003b3c <_printf_float+0x254>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	079b      	lsls	r3, r3, #30
 8003b2c:	f100 8103 	bmi.w	8003d36 <_printf_float+0x44e>
 8003b30:	68e0      	ldr	r0, [r4, #12]
 8003b32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003b34:	4298      	cmp	r0, r3
 8003b36:	bfb8      	it	lt
 8003b38:	4618      	movlt	r0, r3
 8003b3a:	e732      	b.n	80039a2 <_printf_float+0xba>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	4652      	mov	r2, sl
 8003b40:	4631      	mov	r1, r6
 8003b42:	4628      	mov	r0, r5
 8003b44:	47b8      	blx	r7
 8003b46:	3001      	adds	r0, #1
 8003b48:	f43f af29 	beq.w	800399e <_printf_float+0xb6>
 8003b4c:	f109 0901 	add.w	r9, r9, #1
 8003b50:	e7e8      	b.n	8003b24 <_printf_float+0x23c>
 8003b52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dc39      	bgt.n	8003bcc <_printf_float+0x2e4>
 8003b58:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc8 <_printf_float+0x2e0>)
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4628      	mov	r0, r5
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f af1b 	beq.w	800399e <_printf_float+0xb6>
 8003b68:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003b6c:	ea59 0303 	orrs.w	r3, r9, r3
 8003b70:	d102      	bne.n	8003b78 <_printf_float+0x290>
 8003b72:	6823      	ldr	r3, [r4, #0]
 8003b74:	07d9      	lsls	r1, r3, #31
 8003b76:	d5d7      	bpl.n	8003b28 <_printf_float+0x240>
 8003b78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003b7c:	4631      	mov	r1, r6
 8003b7e:	4628      	mov	r0, r5
 8003b80:	47b8      	blx	r7
 8003b82:	3001      	adds	r0, #1
 8003b84:	f43f af0b 	beq.w	800399e <_printf_float+0xb6>
 8003b88:	f04f 0a00 	mov.w	sl, #0
 8003b8c:	f104 0b1a 	add.w	fp, r4, #26
 8003b90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003b92:	425b      	negs	r3, r3
 8003b94:	4553      	cmp	r3, sl
 8003b96:	dc01      	bgt.n	8003b9c <_printf_float+0x2b4>
 8003b98:	464b      	mov	r3, r9
 8003b9a:	e793      	b.n	8003ac4 <_printf_float+0x1dc>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	465a      	mov	r2, fp
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	47b8      	blx	r7
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	f43f aef9 	beq.w	800399e <_printf_float+0xb6>
 8003bac:	f10a 0a01 	add.w	sl, sl, #1
 8003bb0:	e7ee      	b.n	8003b90 <_printf_float+0x2a8>
 8003bb2:	bf00      	nop
 8003bb4:	7fefffff 	.word	0x7fefffff
 8003bb8:	0800649c 	.word	0x0800649c
 8003bbc:	080064a0 	.word	0x080064a0
 8003bc0:	080064a4 	.word	0x080064a4
 8003bc4:	080064a8 	.word	0x080064a8
 8003bc8:	080064ac 	.word	0x080064ac
 8003bcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003bd2:	4553      	cmp	r3, sl
 8003bd4:	bfa8      	it	ge
 8003bd6:	4653      	movge	r3, sl
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	4699      	mov	r9, r3
 8003bdc:	dc36      	bgt.n	8003c4c <_printf_float+0x364>
 8003bde:	f04f 0b00 	mov.w	fp, #0
 8003be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003be6:	f104 021a 	add.w	r2, r4, #26
 8003bea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bec:	930a      	str	r3, [sp, #40]	@ 0x28
 8003bee:	eba3 0309 	sub.w	r3, r3, r9
 8003bf2:	455b      	cmp	r3, fp
 8003bf4:	dc31      	bgt.n	8003c5a <_printf_float+0x372>
 8003bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003bf8:	459a      	cmp	sl, r3
 8003bfa:	dc3a      	bgt.n	8003c72 <_printf_float+0x38a>
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	07da      	lsls	r2, r3, #31
 8003c00:	d437      	bmi.n	8003c72 <_printf_float+0x38a>
 8003c02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c04:	ebaa 0903 	sub.w	r9, sl, r3
 8003c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c0a:	ebaa 0303 	sub.w	r3, sl, r3
 8003c0e:	4599      	cmp	r9, r3
 8003c10:	bfa8      	it	ge
 8003c12:	4699      	movge	r9, r3
 8003c14:	f1b9 0f00 	cmp.w	r9, #0
 8003c18:	dc33      	bgt.n	8003c82 <_printf_float+0x39a>
 8003c1a:	f04f 0800 	mov.w	r8, #0
 8003c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c22:	f104 0b1a 	add.w	fp, r4, #26
 8003c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c28:	ebaa 0303 	sub.w	r3, sl, r3
 8003c2c:	eba3 0309 	sub.w	r3, r3, r9
 8003c30:	4543      	cmp	r3, r8
 8003c32:	f77f af79 	ble.w	8003b28 <_printf_float+0x240>
 8003c36:	2301      	movs	r3, #1
 8003c38:	465a      	mov	r2, fp
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47b8      	blx	r7
 8003c40:	3001      	adds	r0, #1
 8003c42:	f43f aeac 	beq.w	800399e <_printf_float+0xb6>
 8003c46:	f108 0801 	add.w	r8, r8, #1
 8003c4a:	e7ec      	b.n	8003c26 <_printf_float+0x33e>
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4628      	mov	r0, r5
 8003c52:	47b8      	blx	r7
 8003c54:	3001      	adds	r0, #1
 8003c56:	d1c2      	bne.n	8003bde <_printf_float+0x2f6>
 8003c58:	e6a1      	b.n	800399e <_printf_float+0xb6>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	4631      	mov	r1, r6
 8003c5e:	4628      	mov	r0, r5
 8003c60:	920a      	str	r2, [sp, #40]	@ 0x28
 8003c62:	47b8      	blx	r7
 8003c64:	3001      	adds	r0, #1
 8003c66:	f43f ae9a 	beq.w	800399e <_printf_float+0xb6>
 8003c6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c6c:	f10b 0b01 	add.w	fp, fp, #1
 8003c70:	e7bb      	b.n	8003bea <_printf_float+0x302>
 8003c72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003c76:	4631      	mov	r1, r6
 8003c78:	4628      	mov	r0, r5
 8003c7a:	47b8      	blx	r7
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d1c0      	bne.n	8003c02 <_printf_float+0x31a>
 8003c80:	e68d      	b.n	800399e <_printf_float+0xb6>
 8003c82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003c84:	464b      	mov	r3, r9
 8003c86:	4442      	add	r2, r8
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	47b8      	blx	r7
 8003c8e:	3001      	adds	r0, #1
 8003c90:	d1c3      	bne.n	8003c1a <_printf_float+0x332>
 8003c92:	e684      	b.n	800399e <_printf_float+0xb6>
 8003c94:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003c98:	f1ba 0f01 	cmp.w	sl, #1
 8003c9c:	dc01      	bgt.n	8003ca2 <_printf_float+0x3ba>
 8003c9e:	07db      	lsls	r3, r3, #31
 8003ca0:	d536      	bpl.n	8003d10 <_printf_float+0x428>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	4631      	mov	r1, r6
 8003ca8:	4628      	mov	r0, r5
 8003caa:	47b8      	blx	r7
 8003cac:	3001      	adds	r0, #1
 8003cae:	f43f ae76 	beq.w	800399e <_printf_float+0xb6>
 8003cb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4628      	mov	r0, r5
 8003cba:	47b8      	blx	r7
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	f43f ae6e 	beq.w	800399e <_printf_float+0xb6>
 8003cc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003cce:	f7fc ffaf 	bl	8000c30 <__aeabi_dcmpeq>
 8003cd2:	b9c0      	cbnz	r0, 8003d06 <_printf_float+0x41e>
 8003cd4:	4653      	mov	r3, sl
 8003cd6:	f108 0201 	add.w	r2, r8, #1
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4628      	mov	r0, r5
 8003cde:	47b8      	blx	r7
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d10c      	bne.n	8003cfe <_printf_float+0x416>
 8003ce4:	e65b      	b.n	800399e <_printf_float+0xb6>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	465a      	mov	r2, fp
 8003cea:	4631      	mov	r1, r6
 8003cec:	4628      	mov	r0, r5
 8003cee:	47b8      	blx	r7
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	f43f ae54 	beq.w	800399e <_printf_float+0xb6>
 8003cf6:	f108 0801 	add.w	r8, r8, #1
 8003cfa:	45d0      	cmp	r8, sl
 8003cfc:	dbf3      	blt.n	8003ce6 <_printf_float+0x3fe>
 8003cfe:	464b      	mov	r3, r9
 8003d00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003d04:	e6df      	b.n	8003ac6 <_printf_float+0x1de>
 8003d06:	f04f 0800 	mov.w	r8, #0
 8003d0a:	f104 0b1a 	add.w	fp, r4, #26
 8003d0e:	e7f4      	b.n	8003cfa <_printf_float+0x412>
 8003d10:	2301      	movs	r3, #1
 8003d12:	4642      	mov	r2, r8
 8003d14:	e7e1      	b.n	8003cda <_printf_float+0x3f2>
 8003d16:	2301      	movs	r3, #1
 8003d18:	464a      	mov	r2, r9
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	47b8      	blx	r7
 8003d20:	3001      	adds	r0, #1
 8003d22:	f43f ae3c 	beq.w	800399e <_printf_float+0xb6>
 8003d26:	f108 0801 	add.w	r8, r8, #1
 8003d2a:	68e3      	ldr	r3, [r4, #12]
 8003d2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003d2e:	1a5b      	subs	r3, r3, r1
 8003d30:	4543      	cmp	r3, r8
 8003d32:	dcf0      	bgt.n	8003d16 <_printf_float+0x42e>
 8003d34:	e6fc      	b.n	8003b30 <_printf_float+0x248>
 8003d36:	f04f 0800 	mov.w	r8, #0
 8003d3a:	f104 0919 	add.w	r9, r4, #25
 8003d3e:	e7f4      	b.n	8003d2a <_printf_float+0x442>

08003d40 <_printf_common>:
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	4616      	mov	r6, r2
 8003d46:	4698      	mov	r8, r3
 8003d48:	688a      	ldr	r2, [r1, #8]
 8003d4a:	690b      	ldr	r3, [r1, #16]
 8003d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d50:	4293      	cmp	r3, r2
 8003d52:	bfb8      	it	lt
 8003d54:	4613      	movlt	r3, r2
 8003d56:	6033      	str	r3, [r6, #0]
 8003d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d5c:	4607      	mov	r7, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	b10a      	cbz	r2, 8003d66 <_printf_common+0x26>
 8003d62:	3301      	adds	r3, #1
 8003d64:	6033      	str	r3, [r6, #0]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	0699      	lsls	r1, r3, #26
 8003d6a:	bf42      	ittt	mi
 8003d6c:	6833      	ldrmi	r3, [r6, #0]
 8003d6e:	3302      	addmi	r3, #2
 8003d70:	6033      	strmi	r3, [r6, #0]
 8003d72:	6825      	ldr	r5, [r4, #0]
 8003d74:	f015 0506 	ands.w	r5, r5, #6
 8003d78:	d106      	bne.n	8003d88 <_printf_common+0x48>
 8003d7a:	f104 0a19 	add.w	sl, r4, #25
 8003d7e:	68e3      	ldr	r3, [r4, #12]
 8003d80:	6832      	ldr	r2, [r6, #0]
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	42ab      	cmp	r3, r5
 8003d86:	dc26      	bgt.n	8003dd6 <_printf_common+0x96>
 8003d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	3b00      	subs	r3, #0
 8003d90:	bf18      	it	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	0692      	lsls	r2, r2, #26
 8003d96:	d42b      	bmi.n	8003df0 <_printf_common+0xb0>
 8003d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c8      	blx	r9
 8003da2:	3001      	adds	r0, #1
 8003da4:	d01e      	beq.n	8003de4 <_printf_common+0xa4>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	6922      	ldr	r2, [r4, #16]
 8003daa:	f003 0306 	and.w	r3, r3, #6
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	bf02      	ittt	eq
 8003db2:	68e5      	ldreq	r5, [r4, #12]
 8003db4:	6833      	ldreq	r3, [r6, #0]
 8003db6:	1aed      	subeq	r5, r5, r3
 8003db8:	68a3      	ldr	r3, [r4, #8]
 8003dba:	bf0c      	ite	eq
 8003dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dc0:	2500      	movne	r5, #0
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	bfc4      	itt	gt
 8003dc6:	1a9b      	subgt	r3, r3, r2
 8003dc8:	18ed      	addgt	r5, r5, r3
 8003dca:	2600      	movs	r6, #0
 8003dcc:	341a      	adds	r4, #26
 8003dce:	42b5      	cmp	r5, r6
 8003dd0:	d11a      	bne.n	8003e08 <_printf_common+0xc8>
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e008      	b.n	8003de8 <_printf_common+0xa8>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	4652      	mov	r2, sl
 8003dda:	4641      	mov	r1, r8
 8003ddc:	4638      	mov	r0, r7
 8003dde:	47c8      	blx	r9
 8003de0:	3001      	adds	r0, #1
 8003de2:	d103      	bne.n	8003dec <_printf_common+0xac>
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dec:	3501      	adds	r5, #1
 8003dee:	e7c6      	b.n	8003d7e <_printf_common+0x3e>
 8003df0:	18e1      	adds	r1, r4, r3
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	2030      	movs	r0, #48	@ 0x30
 8003df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dfa:	4422      	add	r2, r4
 8003dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e04:	3302      	adds	r3, #2
 8003e06:	e7c7      	b.n	8003d98 <_printf_common+0x58>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	4638      	mov	r0, r7
 8003e10:	47c8      	blx	r9
 8003e12:	3001      	adds	r0, #1
 8003e14:	d0e6      	beq.n	8003de4 <_printf_common+0xa4>
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7d9      	b.n	8003dce <_printf_common+0x8e>
	...

08003e1c <_printf_i>:
 8003e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e20:	7e0f      	ldrb	r7, [r1, #24]
 8003e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e24:	2f78      	cmp	r7, #120	@ 0x78
 8003e26:	4691      	mov	r9, r2
 8003e28:	4680      	mov	r8, r0
 8003e2a:	460c      	mov	r4, r1
 8003e2c:	469a      	mov	sl, r3
 8003e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e32:	d807      	bhi.n	8003e44 <_printf_i+0x28>
 8003e34:	2f62      	cmp	r7, #98	@ 0x62
 8003e36:	d80a      	bhi.n	8003e4e <_printf_i+0x32>
 8003e38:	2f00      	cmp	r7, #0
 8003e3a:	f000 80d2 	beq.w	8003fe2 <_printf_i+0x1c6>
 8003e3e:	2f58      	cmp	r7, #88	@ 0x58
 8003e40:	f000 80b9 	beq.w	8003fb6 <_printf_i+0x19a>
 8003e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e4c:	e03a      	b.n	8003ec4 <_printf_i+0xa8>
 8003e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e52:	2b15      	cmp	r3, #21
 8003e54:	d8f6      	bhi.n	8003e44 <_printf_i+0x28>
 8003e56:	a101      	add	r1, pc, #4	@ (adr r1, 8003e5c <_printf_i+0x40>)
 8003e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e5c:	08003eb5 	.word	0x08003eb5
 8003e60:	08003ec9 	.word	0x08003ec9
 8003e64:	08003e45 	.word	0x08003e45
 8003e68:	08003e45 	.word	0x08003e45
 8003e6c:	08003e45 	.word	0x08003e45
 8003e70:	08003e45 	.word	0x08003e45
 8003e74:	08003ec9 	.word	0x08003ec9
 8003e78:	08003e45 	.word	0x08003e45
 8003e7c:	08003e45 	.word	0x08003e45
 8003e80:	08003e45 	.word	0x08003e45
 8003e84:	08003e45 	.word	0x08003e45
 8003e88:	08003fc9 	.word	0x08003fc9
 8003e8c:	08003ef3 	.word	0x08003ef3
 8003e90:	08003f83 	.word	0x08003f83
 8003e94:	08003e45 	.word	0x08003e45
 8003e98:	08003e45 	.word	0x08003e45
 8003e9c:	08003feb 	.word	0x08003feb
 8003ea0:	08003e45 	.word	0x08003e45
 8003ea4:	08003ef3 	.word	0x08003ef3
 8003ea8:	08003e45 	.word	0x08003e45
 8003eac:	08003e45 	.word	0x08003e45
 8003eb0:	08003f8b 	.word	0x08003f8b
 8003eb4:	6833      	ldr	r3, [r6, #0]
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6032      	str	r2, [r6, #0]
 8003ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e09d      	b.n	8004004 <_printf_i+0x1e8>
 8003ec8:	6833      	ldr	r3, [r6, #0]
 8003eca:	6820      	ldr	r0, [r4, #0]
 8003ecc:	1d19      	adds	r1, r3, #4
 8003ece:	6031      	str	r1, [r6, #0]
 8003ed0:	0606      	lsls	r6, r0, #24
 8003ed2:	d501      	bpl.n	8003ed8 <_printf_i+0xbc>
 8003ed4:	681d      	ldr	r5, [r3, #0]
 8003ed6:	e003      	b.n	8003ee0 <_printf_i+0xc4>
 8003ed8:	0645      	lsls	r5, r0, #25
 8003eda:	d5fb      	bpl.n	8003ed4 <_printf_i+0xb8>
 8003edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	da03      	bge.n	8003eec <_printf_i+0xd0>
 8003ee4:	232d      	movs	r3, #45	@ 0x2d
 8003ee6:	426d      	negs	r5, r5
 8003ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eec:	4859      	ldr	r0, [pc, #356]	@ (8004054 <_printf_i+0x238>)
 8003eee:	230a      	movs	r3, #10
 8003ef0:	e011      	b.n	8003f16 <_printf_i+0xfa>
 8003ef2:	6821      	ldr	r1, [r4, #0]
 8003ef4:	6833      	ldr	r3, [r6, #0]
 8003ef6:	0608      	lsls	r0, r1, #24
 8003ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003efc:	d402      	bmi.n	8003f04 <_printf_i+0xe8>
 8003efe:	0649      	lsls	r1, r1, #25
 8003f00:	bf48      	it	mi
 8003f02:	b2ad      	uxthmi	r5, r5
 8003f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f06:	4853      	ldr	r0, [pc, #332]	@ (8004054 <_printf_i+0x238>)
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	bf14      	ite	ne
 8003f0c:	230a      	movne	r3, #10
 8003f0e:	2308      	moveq	r3, #8
 8003f10:	2100      	movs	r1, #0
 8003f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f16:	6866      	ldr	r6, [r4, #4]
 8003f18:	60a6      	str	r6, [r4, #8]
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	bfa2      	ittt	ge
 8003f1e:	6821      	ldrge	r1, [r4, #0]
 8003f20:	f021 0104 	bicge.w	r1, r1, #4
 8003f24:	6021      	strge	r1, [r4, #0]
 8003f26:	b90d      	cbnz	r5, 8003f2c <_printf_i+0x110>
 8003f28:	2e00      	cmp	r6, #0
 8003f2a:	d04b      	beq.n	8003fc4 <_printf_i+0x1a8>
 8003f2c:	4616      	mov	r6, r2
 8003f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f32:	fb03 5711 	mls	r7, r3, r1, r5
 8003f36:	5dc7      	ldrb	r7, [r0, r7]
 8003f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f3c:	462f      	mov	r7, r5
 8003f3e:	42bb      	cmp	r3, r7
 8003f40:	460d      	mov	r5, r1
 8003f42:	d9f4      	bls.n	8003f2e <_printf_i+0x112>
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d10b      	bne.n	8003f60 <_printf_i+0x144>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	07df      	lsls	r7, r3, #31
 8003f4c:	d508      	bpl.n	8003f60 <_printf_i+0x144>
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	6861      	ldr	r1, [r4, #4]
 8003f52:	4299      	cmp	r1, r3
 8003f54:	bfde      	ittt	le
 8003f56:	2330      	movle	r3, #48	@ 0x30
 8003f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f5c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f60:	1b92      	subs	r2, r2, r6
 8003f62:	6122      	str	r2, [r4, #16]
 8003f64:	f8cd a000 	str.w	sl, [sp]
 8003f68:	464b      	mov	r3, r9
 8003f6a:	aa03      	add	r2, sp, #12
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f7ff fee6 	bl	8003d40 <_printf_common>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d14a      	bne.n	800400e <_printf_i+0x1f2>
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f7c:	b004      	add	sp, #16
 8003f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	f043 0320 	orr.w	r3, r3, #32
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	4833      	ldr	r0, [pc, #204]	@ (8004058 <_printf_i+0x23c>)
 8003f8c:	2778      	movs	r7, #120	@ 0x78
 8003f8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	6831      	ldr	r1, [r6, #0]
 8003f96:	061f      	lsls	r7, r3, #24
 8003f98:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f9c:	d402      	bmi.n	8003fa4 <_printf_i+0x188>
 8003f9e:	065f      	lsls	r7, r3, #25
 8003fa0:	bf48      	it	mi
 8003fa2:	b2ad      	uxthmi	r5, r5
 8003fa4:	6031      	str	r1, [r6, #0]
 8003fa6:	07d9      	lsls	r1, r3, #31
 8003fa8:	bf44      	itt	mi
 8003faa:	f043 0320 	orrmi.w	r3, r3, #32
 8003fae:	6023      	strmi	r3, [r4, #0]
 8003fb0:	b11d      	cbz	r5, 8003fba <_printf_i+0x19e>
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	e7ac      	b.n	8003f10 <_printf_i+0xf4>
 8003fb6:	4827      	ldr	r0, [pc, #156]	@ (8004054 <_printf_i+0x238>)
 8003fb8:	e7e9      	b.n	8003f8e <_printf_i+0x172>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	f023 0320 	bic.w	r3, r3, #32
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	e7f6      	b.n	8003fb2 <_printf_i+0x196>
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	e7bd      	b.n	8003f44 <_printf_i+0x128>
 8003fc8:	6833      	ldr	r3, [r6, #0]
 8003fca:	6825      	ldr	r5, [r4, #0]
 8003fcc:	6961      	ldr	r1, [r4, #20]
 8003fce:	1d18      	adds	r0, r3, #4
 8003fd0:	6030      	str	r0, [r6, #0]
 8003fd2:	062e      	lsls	r6, r5, #24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	d501      	bpl.n	8003fdc <_printf_i+0x1c0>
 8003fd8:	6019      	str	r1, [r3, #0]
 8003fda:	e002      	b.n	8003fe2 <_printf_i+0x1c6>
 8003fdc:	0668      	lsls	r0, r5, #25
 8003fde:	d5fb      	bpl.n	8003fd8 <_printf_i+0x1bc>
 8003fe0:	8019      	strh	r1, [r3, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	6123      	str	r3, [r4, #16]
 8003fe6:	4616      	mov	r6, r2
 8003fe8:	e7bc      	b.n	8003f64 <_printf_i+0x148>
 8003fea:	6833      	ldr	r3, [r6, #0]
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	6032      	str	r2, [r6, #0]
 8003ff0:	681e      	ldr	r6, [r3, #0]
 8003ff2:	6862      	ldr	r2, [r4, #4]
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f7fc f8ea 	bl	80001d0 <memchr>
 8003ffc:	b108      	cbz	r0, 8004002 <_printf_i+0x1e6>
 8003ffe:	1b80      	subs	r0, r0, r6
 8004000:	6060      	str	r0, [r4, #4]
 8004002:	6863      	ldr	r3, [r4, #4]
 8004004:	6123      	str	r3, [r4, #16]
 8004006:	2300      	movs	r3, #0
 8004008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800400c:	e7aa      	b.n	8003f64 <_printf_i+0x148>
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	4632      	mov	r2, r6
 8004012:	4649      	mov	r1, r9
 8004014:	4640      	mov	r0, r8
 8004016:	47d0      	blx	sl
 8004018:	3001      	adds	r0, #1
 800401a:	d0ad      	beq.n	8003f78 <_printf_i+0x15c>
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	079b      	lsls	r3, r3, #30
 8004020:	d413      	bmi.n	800404a <_printf_i+0x22e>
 8004022:	68e0      	ldr	r0, [r4, #12]
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	4298      	cmp	r0, r3
 8004028:	bfb8      	it	lt
 800402a:	4618      	movlt	r0, r3
 800402c:	e7a6      	b.n	8003f7c <_printf_i+0x160>
 800402e:	2301      	movs	r3, #1
 8004030:	4632      	mov	r2, r6
 8004032:	4649      	mov	r1, r9
 8004034:	4640      	mov	r0, r8
 8004036:	47d0      	blx	sl
 8004038:	3001      	adds	r0, #1
 800403a:	d09d      	beq.n	8003f78 <_printf_i+0x15c>
 800403c:	3501      	adds	r5, #1
 800403e:	68e3      	ldr	r3, [r4, #12]
 8004040:	9903      	ldr	r1, [sp, #12]
 8004042:	1a5b      	subs	r3, r3, r1
 8004044:	42ab      	cmp	r3, r5
 8004046:	dcf2      	bgt.n	800402e <_printf_i+0x212>
 8004048:	e7eb      	b.n	8004022 <_printf_i+0x206>
 800404a:	2500      	movs	r5, #0
 800404c:	f104 0619 	add.w	r6, r4, #25
 8004050:	e7f5      	b.n	800403e <_printf_i+0x222>
 8004052:	bf00      	nop
 8004054:	080064ae 	.word	0x080064ae
 8004058:	080064bf 	.word	0x080064bf

0800405c <std>:
 800405c:	2300      	movs	r3, #0
 800405e:	b510      	push	{r4, lr}
 8004060:	4604      	mov	r4, r0
 8004062:	e9c0 3300 	strd	r3, r3, [r0]
 8004066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800406a:	6083      	str	r3, [r0, #8]
 800406c:	8181      	strh	r1, [r0, #12]
 800406e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004070:	81c2      	strh	r2, [r0, #14]
 8004072:	6183      	str	r3, [r0, #24]
 8004074:	4619      	mov	r1, r3
 8004076:	2208      	movs	r2, #8
 8004078:	305c      	adds	r0, #92	@ 0x5c
 800407a:	f000 f914 	bl	80042a6 <memset>
 800407e:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <std+0x58>)
 8004080:	6263      	str	r3, [r4, #36]	@ 0x24
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <std+0x5c>)
 8004084:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004086:	4b0d      	ldr	r3, [pc, #52]	@ (80040bc <std+0x60>)
 8004088:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800408a:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <std+0x64>)
 800408c:	6323      	str	r3, [r4, #48]	@ 0x30
 800408e:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <std+0x68>)
 8004090:	6224      	str	r4, [r4, #32]
 8004092:	429c      	cmp	r4, r3
 8004094:	d006      	beq.n	80040a4 <std+0x48>
 8004096:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800409a:	4294      	cmp	r4, r2
 800409c:	d002      	beq.n	80040a4 <std+0x48>
 800409e:	33d0      	adds	r3, #208	@ 0xd0
 80040a0:	429c      	cmp	r4, r3
 80040a2:	d105      	bne.n	80040b0 <std+0x54>
 80040a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040ac:	f000 b978 	b.w	80043a0 <__retarget_lock_init_recursive>
 80040b0:	bd10      	pop	{r4, pc}
 80040b2:	bf00      	nop
 80040b4:	08004221 	.word	0x08004221
 80040b8:	08004243 	.word	0x08004243
 80040bc:	0800427b 	.word	0x0800427b
 80040c0:	0800429f 	.word	0x0800429f
 80040c4:	200002c0 	.word	0x200002c0

080040c8 <stdio_exit_handler>:
 80040c8:	4a02      	ldr	r2, [pc, #8]	@ (80040d4 <stdio_exit_handler+0xc>)
 80040ca:	4903      	ldr	r1, [pc, #12]	@ (80040d8 <stdio_exit_handler+0x10>)
 80040cc:	4803      	ldr	r0, [pc, #12]	@ (80040dc <stdio_exit_handler+0x14>)
 80040ce:	f000 b869 	b.w	80041a4 <_fwalk_sglue>
 80040d2:	bf00      	nop
 80040d4:	2000000c 	.word	0x2000000c
 80040d8:	08005cf9 	.word	0x08005cf9
 80040dc:	2000001c 	.word	0x2000001c

080040e0 <cleanup_stdio>:
 80040e0:	6841      	ldr	r1, [r0, #4]
 80040e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <cleanup_stdio+0x34>)
 80040e4:	4299      	cmp	r1, r3
 80040e6:	b510      	push	{r4, lr}
 80040e8:	4604      	mov	r4, r0
 80040ea:	d001      	beq.n	80040f0 <cleanup_stdio+0x10>
 80040ec:	f001 fe04 	bl	8005cf8 <_fflush_r>
 80040f0:	68a1      	ldr	r1, [r4, #8]
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <cleanup_stdio+0x38>)
 80040f4:	4299      	cmp	r1, r3
 80040f6:	d002      	beq.n	80040fe <cleanup_stdio+0x1e>
 80040f8:	4620      	mov	r0, r4
 80040fa:	f001 fdfd 	bl	8005cf8 <_fflush_r>
 80040fe:	68e1      	ldr	r1, [r4, #12]
 8004100:	4b06      	ldr	r3, [pc, #24]	@ (800411c <cleanup_stdio+0x3c>)
 8004102:	4299      	cmp	r1, r3
 8004104:	d004      	beq.n	8004110 <cleanup_stdio+0x30>
 8004106:	4620      	mov	r0, r4
 8004108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800410c:	f001 bdf4 	b.w	8005cf8 <_fflush_r>
 8004110:	bd10      	pop	{r4, pc}
 8004112:	bf00      	nop
 8004114:	200002c0 	.word	0x200002c0
 8004118:	20000328 	.word	0x20000328
 800411c:	20000390 	.word	0x20000390

08004120 <global_stdio_init.part.0>:
 8004120:	b510      	push	{r4, lr}
 8004122:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <global_stdio_init.part.0+0x30>)
 8004124:	4c0b      	ldr	r4, [pc, #44]	@ (8004154 <global_stdio_init.part.0+0x34>)
 8004126:	4a0c      	ldr	r2, [pc, #48]	@ (8004158 <global_stdio_init.part.0+0x38>)
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	4620      	mov	r0, r4
 800412c:	2200      	movs	r2, #0
 800412e:	2104      	movs	r1, #4
 8004130:	f7ff ff94 	bl	800405c <std>
 8004134:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004138:	2201      	movs	r2, #1
 800413a:	2109      	movs	r1, #9
 800413c:	f7ff ff8e 	bl	800405c <std>
 8004140:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004144:	2202      	movs	r2, #2
 8004146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800414a:	2112      	movs	r1, #18
 800414c:	f7ff bf86 	b.w	800405c <std>
 8004150:	200003f8 	.word	0x200003f8
 8004154:	200002c0 	.word	0x200002c0
 8004158:	080040c9 	.word	0x080040c9

0800415c <__sfp_lock_acquire>:
 800415c:	4801      	ldr	r0, [pc, #4]	@ (8004164 <__sfp_lock_acquire+0x8>)
 800415e:	f000 b920 	b.w	80043a2 <__retarget_lock_acquire_recursive>
 8004162:	bf00      	nop
 8004164:	20000401 	.word	0x20000401

08004168 <__sfp_lock_release>:
 8004168:	4801      	ldr	r0, [pc, #4]	@ (8004170 <__sfp_lock_release+0x8>)
 800416a:	f000 b91b 	b.w	80043a4 <__retarget_lock_release_recursive>
 800416e:	bf00      	nop
 8004170:	20000401 	.word	0x20000401

08004174 <__sinit>:
 8004174:	b510      	push	{r4, lr}
 8004176:	4604      	mov	r4, r0
 8004178:	f7ff fff0 	bl	800415c <__sfp_lock_acquire>
 800417c:	6a23      	ldr	r3, [r4, #32]
 800417e:	b11b      	cbz	r3, 8004188 <__sinit+0x14>
 8004180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004184:	f7ff bff0 	b.w	8004168 <__sfp_lock_release>
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <__sinit+0x28>)
 800418a:	6223      	str	r3, [r4, #32]
 800418c:	4b04      	ldr	r3, [pc, #16]	@ (80041a0 <__sinit+0x2c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f5      	bne.n	8004180 <__sinit+0xc>
 8004194:	f7ff ffc4 	bl	8004120 <global_stdio_init.part.0>
 8004198:	e7f2      	b.n	8004180 <__sinit+0xc>
 800419a:	bf00      	nop
 800419c:	080040e1 	.word	0x080040e1
 80041a0:	200003f8 	.word	0x200003f8

080041a4 <_fwalk_sglue>:
 80041a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a8:	4607      	mov	r7, r0
 80041aa:	4688      	mov	r8, r1
 80041ac:	4614      	mov	r4, r2
 80041ae:	2600      	movs	r6, #0
 80041b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041b4:	f1b9 0901 	subs.w	r9, r9, #1
 80041b8:	d505      	bpl.n	80041c6 <_fwalk_sglue+0x22>
 80041ba:	6824      	ldr	r4, [r4, #0]
 80041bc:	2c00      	cmp	r4, #0
 80041be:	d1f7      	bne.n	80041b0 <_fwalk_sglue+0xc>
 80041c0:	4630      	mov	r0, r6
 80041c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041c6:	89ab      	ldrh	r3, [r5, #12]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d907      	bls.n	80041dc <_fwalk_sglue+0x38>
 80041cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041d0:	3301      	adds	r3, #1
 80041d2:	d003      	beq.n	80041dc <_fwalk_sglue+0x38>
 80041d4:	4629      	mov	r1, r5
 80041d6:	4638      	mov	r0, r7
 80041d8:	47c0      	blx	r8
 80041da:	4306      	orrs	r6, r0
 80041dc:	3568      	adds	r5, #104	@ 0x68
 80041de:	e7e9      	b.n	80041b4 <_fwalk_sglue+0x10>

080041e0 <siprintf>:
 80041e0:	b40e      	push	{r1, r2, r3}
 80041e2:	b500      	push	{lr}
 80041e4:	b09c      	sub	sp, #112	@ 0x70
 80041e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80041e8:	9002      	str	r0, [sp, #8]
 80041ea:	9006      	str	r0, [sp, #24]
 80041ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041f0:	4809      	ldr	r0, [pc, #36]	@ (8004218 <siprintf+0x38>)
 80041f2:	9107      	str	r1, [sp, #28]
 80041f4:	9104      	str	r1, [sp, #16]
 80041f6:	4909      	ldr	r1, [pc, #36]	@ (800421c <siprintf+0x3c>)
 80041f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041fc:	9105      	str	r1, [sp, #20]
 80041fe:	6800      	ldr	r0, [r0, #0]
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	a902      	add	r1, sp, #8
 8004204:	f001 fbfc 	bl	8005a00 <_svfiprintf_r>
 8004208:	9b02      	ldr	r3, [sp, #8]
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	b01c      	add	sp, #112	@ 0x70
 8004210:	f85d eb04 	ldr.w	lr, [sp], #4
 8004214:	b003      	add	sp, #12
 8004216:	4770      	bx	lr
 8004218:	20000018 	.word	0x20000018
 800421c:	ffff0208 	.word	0xffff0208

08004220 <__sread>:
 8004220:	b510      	push	{r4, lr}
 8004222:	460c      	mov	r4, r1
 8004224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004228:	f000 f86c 	bl	8004304 <_read_r>
 800422c:	2800      	cmp	r0, #0
 800422e:	bfab      	itete	ge
 8004230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004232:	89a3      	ldrhlt	r3, [r4, #12]
 8004234:	181b      	addge	r3, r3, r0
 8004236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800423a:	bfac      	ite	ge
 800423c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800423e:	81a3      	strhlt	r3, [r4, #12]
 8004240:	bd10      	pop	{r4, pc}

08004242 <__swrite>:
 8004242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004246:	461f      	mov	r7, r3
 8004248:	898b      	ldrh	r3, [r1, #12]
 800424a:	05db      	lsls	r3, r3, #23
 800424c:	4605      	mov	r5, r0
 800424e:	460c      	mov	r4, r1
 8004250:	4616      	mov	r6, r2
 8004252:	d505      	bpl.n	8004260 <__swrite+0x1e>
 8004254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004258:	2302      	movs	r3, #2
 800425a:	2200      	movs	r2, #0
 800425c:	f000 f840 	bl	80042e0 <_lseek_r>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800426a:	81a3      	strh	r3, [r4, #12]
 800426c:	4632      	mov	r2, r6
 800426e:	463b      	mov	r3, r7
 8004270:	4628      	mov	r0, r5
 8004272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004276:	f000 b857 	b.w	8004328 <_write_r>

0800427a <__sseek>:
 800427a:	b510      	push	{r4, lr}
 800427c:	460c      	mov	r4, r1
 800427e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004282:	f000 f82d 	bl	80042e0 <_lseek_r>
 8004286:	1c43      	adds	r3, r0, #1
 8004288:	89a3      	ldrh	r3, [r4, #12]
 800428a:	bf15      	itete	ne
 800428c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800428e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004296:	81a3      	strheq	r3, [r4, #12]
 8004298:	bf18      	it	ne
 800429a:	81a3      	strhne	r3, [r4, #12]
 800429c:	bd10      	pop	{r4, pc}

0800429e <__sclose>:
 800429e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042a2:	f000 b80d 	b.w	80042c0 <_close_r>

080042a6 <memset>:
 80042a6:	4402      	add	r2, r0
 80042a8:	4603      	mov	r3, r0
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d100      	bne.n	80042b0 <memset+0xa>
 80042ae:	4770      	bx	lr
 80042b0:	f803 1b01 	strb.w	r1, [r3], #1
 80042b4:	e7f9      	b.n	80042aa <memset+0x4>
	...

080042b8 <_localeconv_r>:
 80042b8:	4800      	ldr	r0, [pc, #0]	@ (80042bc <_localeconv_r+0x4>)
 80042ba:	4770      	bx	lr
 80042bc:	20000158 	.word	0x20000158

080042c0 <_close_r>:
 80042c0:	b538      	push	{r3, r4, r5, lr}
 80042c2:	4d06      	ldr	r5, [pc, #24]	@ (80042dc <_close_r+0x1c>)
 80042c4:	2300      	movs	r3, #0
 80042c6:	4604      	mov	r4, r0
 80042c8:	4608      	mov	r0, r1
 80042ca:	602b      	str	r3, [r5, #0]
 80042cc:	f7fd fa03 	bl	80016d6 <_close>
 80042d0:	1c43      	adds	r3, r0, #1
 80042d2:	d102      	bne.n	80042da <_close_r+0x1a>
 80042d4:	682b      	ldr	r3, [r5, #0]
 80042d6:	b103      	cbz	r3, 80042da <_close_r+0x1a>
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	bd38      	pop	{r3, r4, r5, pc}
 80042dc:	200003fc 	.word	0x200003fc

080042e0 <_lseek_r>:
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	4d07      	ldr	r5, [pc, #28]	@ (8004300 <_lseek_r+0x20>)
 80042e4:	4604      	mov	r4, r0
 80042e6:	4608      	mov	r0, r1
 80042e8:	4611      	mov	r1, r2
 80042ea:	2200      	movs	r2, #0
 80042ec:	602a      	str	r2, [r5, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	f7fd fa15 	bl	800171e <_lseek>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d102      	bne.n	80042fe <_lseek_r+0x1e>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	b103      	cbz	r3, 80042fe <_lseek_r+0x1e>
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	bd38      	pop	{r3, r4, r5, pc}
 8004300:	200003fc 	.word	0x200003fc

08004304 <_read_r>:
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4d07      	ldr	r5, [pc, #28]	@ (8004324 <_read_r+0x20>)
 8004308:	4604      	mov	r4, r0
 800430a:	4608      	mov	r0, r1
 800430c:	4611      	mov	r1, r2
 800430e:	2200      	movs	r2, #0
 8004310:	602a      	str	r2, [r5, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	f7fd f9a6 	bl	8001664 <_read>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d102      	bne.n	8004322 <_read_r+0x1e>
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	b103      	cbz	r3, 8004322 <_read_r+0x1e>
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	bd38      	pop	{r3, r4, r5, pc}
 8004324:	200003fc 	.word	0x200003fc

08004328 <_write_r>:
 8004328:	b538      	push	{r3, r4, r5, lr}
 800432a:	4d07      	ldr	r5, [pc, #28]	@ (8004348 <_write_r+0x20>)
 800432c:	4604      	mov	r4, r0
 800432e:	4608      	mov	r0, r1
 8004330:	4611      	mov	r1, r2
 8004332:	2200      	movs	r2, #0
 8004334:	602a      	str	r2, [r5, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	f7fd f9b1 	bl	800169e <_write>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d102      	bne.n	8004346 <_write_r+0x1e>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b103      	cbz	r3, 8004346 <_write_r+0x1e>
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	200003fc 	.word	0x200003fc

0800434c <__errno>:
 800434c:	4b01      	ldr	r3, [pc, #4]	@ (8004354 <__errno+0x8>)
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20000018 	.word	0x20000018

08004358 <__libc_init_array>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4d0d      	ldr	r5, [pc, #52]	@ (8004390 <__libc_init_array+0x38>)
 800435c:	4c0d      	ldr	r4, [pc, #52]	@ (8004394 <__libc_init_array+0x3c>)
 800435e:	1b64      	subs	r4, r4, r5
 8004360:	10a4      	asrs	r4, r4, #2
 8004362:	2600      	movs	r6, #0
 8004364:	42a6      	cmp	r6, r4
 8004366:	d109      	bne.n	800437c <__libc_init_array+0x24>
 8004368:	4d0b      	ldr	r5, [pc, #44]	@ (8004398 <__libc_init_array+0x40>)
 800436a:	4c0c      	ldr	r4, [pc, #48]	@ (800439c <__libc_init_array+0x44>)
 800436c:	f002 f860 	bl	8006430 <_init>
 8004370:	1b64      	subs	r4, r4, r5
 8004372:	10a4      	asrs	r4, r4, #2
 8004374:	2600      	movs	r6, #0
 8004376:	42a6      	cmp	r6, r4
 8004378:	d105      	bne.n	8004386 <__libc_init_array+0x2e>
 800437a:	bd70      	pop	{r4, r5, r6, pc}
 800437c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004380:	4798      	blx	r3
 8004382:	3601      	adds	r6, #1
 8004384:	e7ee      	b.n	8004364 <__libc_init_array+0xc>
 8004386:	f855 3b04 	ldr.w	r3, [r5], #4
 800438a:	4798      	blx	r3
 800438c:	3601      	adds	r6, #1
 800438e:	e7f2      	b.n	8004376 <__libc_init_array+0x1e>
 8004390:	08006818 	.word	0x08006818
 8004394:	08006818 	.word	0x08006818
 8004398:	08006818 	.word	0x08006818
 800439c:	0800681c 	.word	0x0800681c

080043a0 <__retarget_lock_init_recursive>:
 80043a0:	4770      	bx	lr

080043a2 <__retarget_lock_acquire_recursive>:
 80043a2:	4770      	bx	lr

080043a4 <__retarget_lock_release_recursive>:
 80043a4:	4770      	bx	lr

080043a6 <quorem>:
 80043a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	6903      	ldr	r3, [r0, #16]
 80043ac:	690c      	ldr	r4, [r1, #16]
 80043ae:	42a3      	cmp	r3, r4
 80043b0:	4607      	mov	r7, r0
 80043b2:	db7e      	blt.n	80044b2 <quorem+0x10c>
 80043b4:	3c01      	subs	r4, #1
 80043b6:	f101 0814 	add.w	r8, r1, #20
 80043ba:	00a3      	lsls	r3, r4, #2
 80043bc:	f100 0514 	add.w	r5, r0, #20
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043d0:	3301      	adds	r3, #1
 80043d2:	429a      	cmp	r2, r3
 80043d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80043dc:	d32e      	bcc.n	800443c <quorem+0x96>
 80043de:	f04f 0a00 	mov.w	sl, #0
 80043e2:	46c4      	mov	ip, r8
 80043e4:	46ae      	mov	lr, r5
 80043e6:	46d3      	mov	fp, sl
 80043e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80043ec:	b298      	uxth	r0, r3
 80043ee:	fb06 a000 	mla	r0, r6, r0, sl
 80043f2:	0c02      	lsrs	r2, r0, #16
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	fb06 2303 	mla	r3, r6, r3, r2
 80043fa:	f8de 2000 	ldr.w	r2, [lr]
 80043fe:	b280      	uxth	r0, r0
 8004400:	b292      	uxth	r2, r2
 8004402:	1a12      	subs	r2, r2, r0
 8004404:	445a      	add	r2, fp
 8004406:	f8de 0000 	ldr.w	r0, [lr]
 800440a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800440e:	b29b      	uxth	r3, r3
 8004410:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004414:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004418:	b292      	uxth	r2, r2
 800441a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800441e:	45e1      	cmp	r9, ip
 8004420:	f84e 2b04 	str.w	r2, [lr], #4
 8004424:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004428:	d2de      	bcs.n	80043e8 <quorem+0x42>
 800442a:	9b00      	ldr	r3, [sp, #0]
 800442c:	58eb      	ldr	r3, [r5, r3]
 800442e:	b92b      	cbnz	r3, 800443c <quorem+0x96>
 8004430:	9b01      	ldr	r3, [sp, #4]
 8004432:	3b04      	subs	r3, #4
 8004434:	429d      	cmp	r5, r3
 8004436:	461a      	mov	r2, r3
 8004438:	d32f      	bcc.n	800449a <quorem+0xf4>
 800443a:	613c      	str	r4, [r7, #16]
 800443c:	4638      	mov	r0, r7
 800443e:	f001 f97d 	bl	800573c <__mcmp>
 8004442:	2800      	cmp	r0, #0
 8004444:	db25      	blt.n	8004492 <quorem+0xec>
 8004446:	4629      	mov	r1, r5
 8004448:	2000      	movs	r0, #0
 800444a:	f858 2b04 	ldr.w	r2, [r8], #4
 800444e:	f8d1 c000 	ldr.w	ip, [r1]
 8004452:	fa1f fe82 	uxth.w	lr, r2
 8004456:	fa1f f38c 	uxth.w	r3, ip
 800445a:	eba3 030e 	sub.w	r3, r3, lr
 800445e:	4403      	add	r3, r0
 8004460:	0c12      	lsrs	r2, r2, #16
 8004462:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004466:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800446a:	b29b      	uxth	r3, r3
 800446c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004470:	45c1      	cmp	r9, r8
 8004472:	f841 3b04 	str.w	r3, [r1], #4
 8004476:	ea4f 4022 	mov.w	r0, r2, asr #16
 800447a:	d2e6      	bcs.n	800444a <quorem+0xa4>
 800447c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004484:	b922      	cbnz	r2, 8004490 <quorem+0xea>
 8004486:	3b04      	subs	r3, #4
 8004488:	429d      	cmp	r5, r3
 800448a:	461a      	mov	r2, r3
 800448c:	d30b      	bcc.n	80044a6 <quorem+0x100>
 800448e:	613c      	str	r4, [r7, #16]
 8004490:	3601      	adds	r6, #1
 8004492:	4630      	mov	r0, r6
 8004494:	b003      	add	sp, #12
 8004496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	3b04      	subs	r3, #4
 800449e:	2a00      	cmp	r2, #0
 80044a0:	d1cb      	bne.n	800443a <quorem+0x94>
 80044a2:	3c01      	subs	r4, #1
 80044a4:	e7c6      	b.n	8004434 <quorem+0x8e>
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	3b04      	subs	r3, #4
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	d1ef      	bne.n	800448e <quorem+0xe8>
 80044ae:	3c01      	subs	r4, #1
 80044b0:	e7ea      	b.n	8004488 <quorem+0xe2>
 80044b2:	2000      	movs	r0, #0
 80044b4:	e7ee      	b.n	8004494 <quorem+0xee>
	...

080044b8 <_dtoa_r>:
 80044b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044bc:	69c7      	ldr	r7, [r0, #28]
 80044be:	b097      	sub	sp, #92	@ 0x5c
 80044c0:	4614      	mov	r4, r2
 80044c2:	461d      	mov	r5, r3
 80044c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044c8:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80044ca:	4683      	mov	fp, r0
 80044cc:	b97f      	cbnz	r7, 80044ee <_dtoa_r+0x36>
 80044ce:	2010      	movs	r0, #16
 80044d0:	f000 fe04 	bl	80050dc <malloc>
 80044d4:	4602      	mov	r2, r0
 80044d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80044da:	b920      	cbnz	r0, 80044e6 <_dtoa_r+0x2e>
 80044dc:	4ba8      	ldr	r3, [pc, #672]	@ (8004780 <_dtoa_r+0x2c8>)
 80044de:	21ef      	movs	r1, #239	@ 0xef
 80044e0:	48a8      	ldr	r0, [pc, #672]	@ (8004784 <_dtoa_r+0x2cc>)
 80044e2:	f001 fc69 	bl	8005db8 <__assert_func>
 80044e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80044ea:	6007      	str	r7, [r0, #0]
 80044ec:	60c7      	str	r7, [r0, #12]
 80044ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	b159      	cbz	r1, 800450e <_dtoa_r+0x56>
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	604a      	str	r2, [r1, #4]
 80044fa:	2301      	movs	r3, #1
 80044fc:	4093      	lsls	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]
 8004500:	4658      	mov	r0, fp
 8004502:	f000 fee1 	bl	80052c8 <_Bfree>
 8004506:	f8db 301c 	ldr.w	r3, [fp, #28]
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	1e2b      	subs	r3, r5, #0
 8004510:	bfb9      	ittee	lt
 8004512:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004516:	9303      	strlt	r3, [sp, #12]
 8004518:	2300      	movge	r3, #0
 800451a:	6033      	strge	r3, [r6, #0]
 800451c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004520:	4b99      	ldr	r3, [pc, #612]	@ (8004788 <_dtoa_r+0x2d0>)
 8004522:	bfbc      	itt	lt
 8004524:	2201      	movlt	r2, #1
 8004526:	6032      	strlt	r2, [r6, #0]
 8004528:	ea33 0308 	bics.w	r3, r3, r8
 800452c:	d112      	bne.n	8004554 <_dtoa_r+0x9c>
 800452e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004530:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800453a:	4323      	orrs	r3, r4
 800453c:	f000 8551 	beq.w	8004fe2 <_dtoa_r+0xb2a>
 8004540:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004542:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800478c <_dtoa_r+0x2d4>
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 8553 	beq.w	8004ff2 <_dtoa_r+0xb3a>
 800454c:	f10a 0303 	add.w	r3, sl, #3
 8004550:	f000 bd4d 	b.w	8004fee <_dtoa_r+0xb36>
 8004554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004558:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800455c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004560:	2200      	movs	r2, #0
 8004562:	2300      	movs	r3, #0
 8004564:	f7fc fb64 	bl	8000c30 <__aeabi_dcmpeq>
 8004568:	4607      	mov	r7, r0
 800456a:	b158      	cbz	r0, 8004584 <_dtoa_r+0xcc>
 800456c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800456e:	2301      	movs	r3, #1
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004574:	b113      	cbz	r3, 800457c <_dtoa_r+0xc4>
 8004576:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004578:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <_dtoa_r+0x2d8>)
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004794 <_dtoa_r+0x2dc>
 8004580:	f000 bd37 	b.w	8004ff2 <_dtoa_r+0xb3a>
 8004584:	ab14      	add	r3, sp, #80	@ 0x50
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	ab15      	add	r3, sp, #84	@ 0x54
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	4658      	mov	r0, fp
 800458e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004592:	f001 f981 	bl	8005898 <__d2b>
 8004596:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800459a:	4681      	mov	r9, r0
 800459c:	2e00      	cmp	r6, #0
 800459e:	d076      	beq.n	800468e <_dtoa_r+0x1d6>
 80045a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045a2:	9712      	str	r7, [sp, #72]	@ 0x48
 80045a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80045ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80045b8:	4619      	mov	r1, r3
 80045ba:	2200      	movs	r2, #0
 80045bc:	4b76      	ldr	r3, [pc, #472]	@ (8004798 <_dtoa_r+0x2e0>)
 80045be:	f7fb ff17 	bl	80003f0 <__aeabi_dsub>
 80045c2:	a369      	add	r3, pc, #420	@ (adr r3, 8004768 <_dtoa_r+0x2b0>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f7fc f8ca 	bl	8000760 <__aeabi_dmul>
 80045cc:	a368      	add	r3, pc, #416	@ (adr r3, 8004770 <_dtoa_r+0x2b8>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f7fb ff0f 	bl	80003f4 <__adddf3>
 80045d6:	4604      	mov	r4, r0
 80045d8:	4630      	mov	r0, r6
 80045da:	460d      	mov	r5, r1
 80045dc:	f7fc f856 	bl	800068c <__aeabi_i2d>
 80045e0:	a365      	add	r3, pc, #404	@ (adr r3, 8004778 <_dtoa_r+0x2c0>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fc f8bb 	bl	8000760 <__aeabi_dmul>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4620      	mov	r0, r4
 80045f0:	4629      	mov	r1, r5
 80045f2:	f7fb feff 	bl	80003f4 <__adddf3>
 80045f6:	4604      	mov	r4, r0
 80045f8:	460d      	mov	r5, r1
 80045fa:	f7fc fb61 	bl	8000cc0 <__aeabi_d2iz>
 80045fe:	2200      	movs	r2, #0
 8004600:	4607      	mov	r7, r0
 8004602:	2300      	movs	r3, #0
 8004604:	4620      	mov	r0, r4
 8004606:	4629      	mov	r1, r5
 8004608:	f7fc fb1c 	bl	8000c44 <__aeabi_dcmplt>
 800460c:	b140      	cbz	r0, 8004620 <_dtoa_r+0x168>
 800460e:	4638      	mov	r0, r7
 8004610:	f7fc f83c 	bl	800068c <__aeabi_i2d>
 8004614:	4622      	mov	r2, r4
 8004616:	462b      	mov	r3, r5
 8004618:	f7fc fb0a 	bl	8000c30 <__aeabi_dcmpeq>
 800461c:	b900      	cbnz	r0, 8004620 <_dtoa_r+0x168>
 800461e:	3f01      	subs	r7, #1
 8004620:	2f16      	cmp	r7, #22
 8004622:	d852      	bhi.n	80046ca <_dtoa_r+0x212>
 8004624:	4b5d      	ldr	r3, [pc, #372]	@ (800479c <_dtoa_r+0x2e4>)
 8004626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004632:	f7fc fb07 	bl	8000c44 <__aeabi_dcmplt>
 8004636:	2800      	cmp	r0, #0
 8004638:	d049      	beq.n	80046ce <_dtoa_r+0x216>
 800463a:	3f01      	subs	r7, #1
 800463c:	2300      	movs	r3, #0
 800463e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004640:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004642:	1b9b      	subs	r3, r3, r6
 8004644:	1e5a      	subs	r2, r3, #1
 8004646:	bf44      	itt	mi
 8004648:	f1c3 0801 	rsbmi	r8, r3, #1
 800464c:	2300      	movmi	r3, #0
 800464e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004650:	bf54      	ite	pl
 8004652:	f04f 0800 	movpl.w	r8, #0
 8004656:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004658:	2f00      	cmp	r7, #0
 800465a:	db3a      	blt.n	80046d2 <_dtoa_r+0x21a>
 800465c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800465e:	970e      	str	r7, [sp, #56]	@ 0x38
 8004660:	443b      	add	r3, r7
 8004662:	9309      	str	r3, [sp, #36]	@ 0x24
 8004664:	2300      	movs	r3, #0
 8004666:	930a      	str	r3, [sp, #40]	@ 0x28
 8004668:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800466a:	2b09      	cmp	r3, #9
 800466c:	d865      	bhi.n	800473a <_dtoa_r+0x282>
 800466e:	2b05      	cmp	r3, #5
 8004670:	bfc4      	itt	gt
 8004672:	3b04      	subgt	r3, #4
 8004674:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004676:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004678:	f1a3 0302 	sub.w	r3, r3, #2
 800467c:	bfcc      	ite	gt
 800467e:	2400      	movgt	r4, #0
 8004680:	2401      	movle	r4, #1
 8004682:	2b03      	cmp	r3, #3
 8004684:	d864      	bhi.n	8004750 <_dtoa_r+0x298>
 8004686:	e8df f003 	tbb	[pc, r3]
 800468a:	382b      	.short	0x382b
 800468c:	5636      	.short	0x5636
 800468e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004692:	441e      	add	r6, r3
 8004694:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004698:	2b20      	cmp	r3, #32
 800469a:	bfc1      	itttt	gt
 800469c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80046a0:	fa08 f803 	lslgt.w	r8, r8, r3
 80046a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80046a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046ac:	bfd6      	itet	le
 80046ae:	f1c3 0320 	rsble	r3, r3, #32
 80046b2:	ea48 0003 	orrgt.w	r0, r8, r3
 80046b6:	fa04 f003 	lslle.w	r0, r4, r3
 80046ba:	f7fb ffd7 	bl	800066c <__aeabi_ui2d>
 80046be:	2201      	movs	r2, #1
 80046c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80046c4:	3e01      	subs	r6, #1
 80046c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80046c8:	e776      	b.n	80045b8 <_dtoa_r+0x100>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e7b7      	b.n	800463e <_dtoa_r+0x186>
 80046ce:	900f      	str	r0, [sp, #60]	@ 0x3c
 80046d0:	e7b6      	b.n	8004640 <_dtoa_r+0x188>
 80046d2:	427b      	negs	r3, r7
 80046d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80046d6:	2300      	movs	r3, #0
 80046d8:	eba8 0807 	sub.w	r8, r8, r7
 80046dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80046de:	e7c3      	b.n	8004668 <_dtoa_r+0x1b0>
 80046e0:	2300      	movs	r3, #0
 80046e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	dc35      	bgt.n	8004756 <_dtoa_r+0x29e>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80046f0:	461a      	mov	r2, r3
 80046f2:	9221      	str	r2, [sp, #132]	@ 0x84
 80046f4:	e00b      	b.n	800470e <_dtoa_r+0x256>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e7f3      	b.n	80046e2 <_dtoa_r+0x22a>
 80046fa:	2300      	movs	r3, #0
 80046fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	9308      	str	r3, [sp, #32]
 8004704:	3301      	adds	r3, #1
 8004706:	2b01      	cmp	r3, #1
 8004708:	9307      	str	r3, [sp, #28]
 800470a:	bfb8      	it	lt
 800470c:	2301      	movlt	r3, #1
 800470e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004712:	2100      	movs	r1, #0
 8004714:	2204      	movs	r2, #4
 8004716:	f102 0514 	add.w	r5, r2, #20
 800471a:	429d      	cmp	r5, r3
 800471c:	d91f      	bls.n	800475e <_dtoa_r+0x2a6>
 800471e:	6041      	str	r1, [r0, #4]
 8004720:	4658      	mov	r0, fp
 8004722:	f000 fd91 	bl	8005248 <_Balloc>
 8004726:	4682      	mov	sl, r0
 8004728:	2800      	cmp	r0, #0
 800472a:	d13b      	bne.n	80047a4 <_dtoa_r+0x2ec>
 800472c:	4b1c      	ldr	r3, [pc, #112]	@ (80047a0 <_dtoa_r+0x2e8>)
 800472e:	4602      	mov	r2, r0
 8004730:	f240 11af 	movw	r1, #431	@ 0x1af
 8004734:	e6d4      	b.n	80044e0 <_dtoa_r+0x28>
 8004736:	2301      	movs	r3, #1
 8004738:	e7e0      	b.n	80046fc <_dtoa_r+0x244>
 800473a:	2401      	movs	r4, #1
 800473c:	2300      	movs	r3, #0
 800473e:	9320      	str	r3, [sp, #128]	@ 0x80
 8004740:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004746:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800474a:	2200      	movs	r2, #0
 800474c:	2312      	movs	r3, #18
 800474e:	e7d0      	b.n	80046f2 <_dtoa_r+0x23a>
 8004750:	2301      	movs	r3, #1
 8004752:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004754:	e7f5      	b.n	8004742 <_dtoa_r+0x28a>
 8004756:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004758:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800475c:	e7d7      	b.n	800470e <_dtoa_r+0x256>
 800475e:	3101      	adds	r1, #1
 8004760:	0052      	lsls	r2, r2, #1
 8004762:	e7d8      	b.n	8004716 <_dtoa_r+0x25e>
 8004764:	f3af 8000 	nop.w
 8004768:	636f4361 	.word	0x636f4361
 800476c:	3fd287a7 	.word	0x3fd287a7
 8004770:	8b60c8b3 	.word	0x8b60c8b3
 8004774:	3fc68a28 	.word	0x3fc68a28
 8004778:	509f79fb 	.word	0x509f79fb
 800477c:	3fd34413 	.word	0x3fd34413
 8004780:	080064dd 	.word	0x080064dd
 8004784:	080064f4 	.word	0x080064f4
 8004788:	7ff00000 	.word	0x7ff00000
 800478c:	080064d9 	.word	0x080064d9
 8004790:	080064ad 	.word	0x080064ad
 8004794:	080064ac 	.word	0x080064ac
 8004798:	3ff80000 	.word	0x3ff80000
 800479c:	080065f0 	.word	0x080065f0
 80047a0:	0800654c 	.word	0x0800654c
 80047a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80047a8:	6018      	str	r0, [r3, #0]
 80047aa:	9b07      	ldr	r3, [sp, #28]
 80047ac:	2b0e      	cmp	r3, #14
 80047ae:	f200 80a4 	bhi.w	80048fa <_dtoa_r+0x442>
 80047b2:	2c00      	cmp	r4, #0
 80047b4:	f000 80a1 	beq.w	80048fa <_dtoa_r+0x442>
 80047b8:	2f00      	cmp	r7, #0
 80047ba:	dd33      	ble.n	8004824 <_dtoa_r+0x36c>
 80047bc:	4b86      	ldr	r3, [pc, #536]	@ (80049d8 <_dtoa_r+0x520>)
 80047be:	f007 020f 	and.w	r2, r7, #15
 80047c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ca:	05f8      	lsls	r0, r7, #23
 80047cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80047d4:	d516      	bpl.n	8004804 <_dtoa_r+0x34c>
 80047d6:	4b81      	ldr	r3, [pc, #516]	@ (80049dc <_dtoa_r+0x524>)
 80047d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047e0:	f7fc f8e8 	bl	80009b4 <__aeabi_ddiv>
 80047e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047e8:	f004 040f 	and.w	r4, r4, #15
 80047ec:	2603      	movs	r6, #3
 80047ee:	4d7b      	ldr	r5, [pc, #492]	@ (80049dc <_dtoa_r+0x524>)
 80047f0:	b954      	cbnz	r4, 8004808 <_dtoa_r+0x350>
 80047f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047fa:	f7fc f8db 	bl	80009b4 <__aeabi_ddiv>
 80047fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004802:	e028      	b.n	8004856 <_dtoa_r+0x39e>
 8004804:	2602      	movs	r6, #2
 8004806:	e7f2      	b.n	80047ee <_dtoa_r+0x336>
 8004808:	07e1      	lsls	r1, r4, #31
 800480a:	d508      	bpl.n	800481e <_dtoa_r+0x366>
 800480c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004814:	f7fb ffa4 	bl	8000760 <__aeabi_dmul>
 8004818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800481c:	3601      	adds	r6, #1
 800481e:	1064      	asrs	r4, r4, #1
 8004820:	3508      	adds	r5, #8
 8004822:	e7e5      	b.n	80047f0 <_dtoa_r+0x338>
 8004824:	f000 80d2 	beq.w	80049cc <_dtoa_r+0x514>
 8004828:	427c      	negs	r4, r7
 800482a:	4b6b      	ldr	r3, [pc, #428]	@ (80049d8 <_dtoa_r+0x520>)
 800482c:	4d6b      	ldr	r5, [pc, #428]	@ (80049dc <_dtoa_r+0x524>)
 800482e:	f004 020f 	and.w	r2, r4, #15
 8004832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800483e:	f7fb ff8f 	bl	8000760 <__aeabi_dmul>
 8004842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004846:	1124      	asrs	r4, r4, #4
 8004848:	2300      	movs	r3, #0
 800484a:	2602      	movs	r6, #2
 800484c:	2c00      	cmp	r4, #0
 800484e:	f040 80b2 	bne.w	80049b6 <_dtoa_r+0x4fe>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1d3      	bne.n	80047fe <_dtoa_r+0x346>
 8004856:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004858:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80b7 	beq.w	80049d0 <_dtoa_r+0x518>
 8004862:	4b5f      	ldr	r3, [pc, #380]	@ (80049e0 <_dtoa_r+0x528>)
 8004864:	2200      	movs	r2, #0
 8004866:	4620      	mov	r0, r4
 8004868:	4629      	mov	r1, r5
 800486a:	f7fc f9eb 	bl	8000c44 <__aeabi_dcmplt>
 800486e:	2800      	cmp	r0, #0
 8004870:	f000 80ae 	beq.w	80049d0 <_dtoa_r+0x518>
 8004874:	9b07      	ldr	r3, [sp, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 80aa 	beq.w	80049d0 <_dtoa_r+0x518>
 800487c:	9b08      	ldr	r3, [sp, #32]
 800487e:	2b00      	cmp	r3, #0
 8004880:	dd37      	ble.n	80048f2 <_dtoa_r+0x43a>
 8004882:	1e7b      	subs	r3, r7, #1
 8004884:	9304      	str	r3, [sp, #16]
 8004886:	4620      	mov	r0, r4
 8004888:	4b56      	ldr	r3, [pc, #344]	@ (80049e4 <_dtoa_r+0x52c>)
 800488a:	2200      	movs	r2, #0
 800488c:	4629      	mov	r1, r5
 800488e:	f7fb ff67 	bl	8000760 <__aeabi_dmul>
 8004892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004896:	9c08      	ldr	r4, [sp, #32]
 8004898:	3601      	adds	r6, #1
 800489a:	4630      	mov	r0, r6
 800489c:	f7fb fef6 	bl	800068c <__aeabi_i2d>
 80048a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048a4:	f7fb ff5c 	bl	8000760 <__aeabi_dmul>
 80048a8:	4b4f      	ldr	r3, [pc, #316]	@ (80049e8 <_dtoa_r+0x530>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	f7fb fda2 	bl	80003f4 <__adddf3>
 80048b0:	4605      	mov	r5, r0
 80048b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048b6:	2c00      	cmp	r4, #0
 80048b8:	f040 809a 	bne.w	80049f0 <_dtoa_r+0x538>
 80048bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048c0:	4b4a      	ldr	r3, [pc, #296]	@ (80049ec <_dtoa_r+0x534>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	f7fb fd94 	bl	80003f0 <__aeabi_dsub>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048d0:	462a      	mov	r2, r5
 80048d2:	4633      	mov	r3, r6
 80048d4:	f7fc f9d4 	bl	8000c80 <__aeabi_dcmpgt>
 80048d8:	2800      	cmp	r0, #0
 80048da:	f040 828e 	bne.w	8004dfa <_dtoa_r+0x942>
 80048de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e2:	462a      	mov	r2, r5
 80048e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80048e8:	f7fc f9ac 	bl	8000c44 <__aeabi_dcmplt>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	f040 8127 	bne.w	8004b40 <_dtoa_r+0x688>
 80048f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80048f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80048fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f2c0 8163 	blt.w	8004bc8 <_dtoa_r+0x710>
 8004902:	2f0e      	cmp	r7, #14
 8004904:	f300 8160 	bgt.w	8004bc8 <_dtoa_r+0x710>
 8004908:	4b33      	ldr	r3, [pc, #204]	@ (80049d8 <_dtoa_r+0x520>)
 800490a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800490e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004912:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004916:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004918:	2b00      	cmp	r3, #0
 800491a:	da03      	bge.n	8004924 <_dtoa_r+0x46c>
 800491c:	9b07      	ldr	r3, [sp, #28]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f340 8100 	ble.w	8004b24 <_dtoa_r+0x66c>
 8004924:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004928:	4656      	mov	r6, sl
 800492a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fc f83f 	bl	80009b4 <__aeabi_ddiv>
 8004936:	f7fc f9c3 	bl	8000cc0 <__aeabi_d2iz>
 800493a:	4680      	mov	r8, r0
 800493c:	f7fb fea6 	bl	800068c <__aeabi_i2d>
 8004940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004944:	f7fb ff0c 	bl	8000760 <__aeabi_dmul>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4620      	mov	r0, r4
 800494e:	4629      	mov	r1, r5
 8004950:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004954:	f7fb fd4c 	bl	80003f0 <__aeabi_dsub>
 8004958:	f806 4b01 	strb.w	r4, [r6], #1
 800495c:	9d07      	ldr	r5, [sp, #28]
 800495e:	eba6 040a 	sub.w	r4, r6, sl
 8004962:	42a5      	cmp	r5, r4
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	f040 8116 	bne.w	8004b98 <_dtoa_r+0x6e0>
 800496c:	f7fb fd42 	bl	80003f4 <__adddf3>
 8004970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004974:	4604      	mov	r4, r0
 8004976:	460d      	mov	r5, r1
 8004978:	f7fc f982 	bl	8000c80 <__aeabi_dcmpgt>
 800497c:	2800      	cmp	r0, #0
 800497e:	f040 80f8 	bne.w	8004b72 <_dtoa_r+0x6ba>
 8004982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004986:	4620      	mov	r0, r4
 8004988:	4629      	mov	r1, r5
 800498a:	f7fc f951 	bl	8000c30 <__aeabi_dcmpeq>
 800498e:	b118      	cbz	r0, 8004998 <_dtoa_r+0x4e0>
 8004990:	f018 0f01 	tst.w	r8, #1
 8004994:	f040 80ed 	bne.w	8004b72 <_dtoa_r+0x6ba>
 8004998:	4649      	mov	r1, r9
 800499a:	4658      	mov	r0, fp
 800499c:	f000 fc94 	bl	80052c8 <_Bfree>
 80049a0:	2300      	movs	r3, #0
 80049a2:	7033      	strb	r3, [r6, #0]
 80049a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80049a6:	3701      	adds	r7, #1
 80049a8:	601f      	str	r7, [r3, #0]
 80049aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8320 	beq.w	8004ff2 <_dtoa_r+0xb3a>
 80049b2:	601e      	str	r6, [r3, #0]
 80049b4:	e31d      	b.n	8004ff2 <_dtoa_r+0xb3a>
 80049b6:	07e2      	lsls	r2, r4, #31
 80049b8:	d505      	bpl.n	80049c6 <_dtoa_r+0x50e>
 80049ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049be:	f7fb fecf 	bl	8000760 <__aeabi_dmul>
 80049c2:	3601      	adds	r6, #1
 80049c4:	2301      	movs	r3, #1
 80049c6:	1064      	asrs	r4, r4, #1
 80049c8:	3508      	adds	r5, #8
 80049ca:	e73f      	b.n	800484c <_dtoa_r+0x394>
 80049cc:	2602      	movs	r6, #2
 80049ce:	e742      	b.n	8004856 <_dtoa_r+0x39e>
 80049d0:	9c07      	ldr	r4, [sp, #28]
 80049d2:	9704      	str	r7, [sp, #16]
 80049d4:	e761      	b.n	800489a <_dtoa_r+0x3e2>
 80049d6:	bf00      	nop
 80049d8:	080065f0 	.word	0x080065f0
 80049dc:	080065c8 	.word	0x080065c8
 80049e0:	3ff00000 	.word	0x3ff00000
 80049e4:	40240000 	.word	0x40240000
 80049e8:	401c0000 	.word	0x401c0000
 80049ec:	40140000 	.word	0x40140000
 80049f0:	4b70      	ldr	r3, [pc, #448]	@ (8004bb4 <_dtoa_r+0x6fc>)
 80049f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80049f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049fc:	4454      	add	r4, sl
 80049fe:	2900      	cmp	r1, #0
 8004a00:	d045      	beq.n	8004a8e <_dtoa_r+0x5d6>
 8004a02:	496d      	ldr	r1, [pc, #436]	@ (8004bb8 <_dtoa_r+0x700>)
 8004a04:	2000      	movs	r0, #0
 8004a06:	f7fb ffd5 	bl	80009b4 <__aeabi_ddiv>
 8004a0a:	4633      	mov	r3, r6
 8004a0c:	462a      	mov	r2, r5
 8004a0e:	f7fb fcef 	bl	80003f0 <__aeabi_dsub>
 8004a12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a16:	4656      	mov	r6, sl
 8004a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a1c:	f7fc f950 	bl	8000cc0 <__aeabi_d2iz>
 8004a20:	4605      	mov	r5, r0
 8004a22:	f7fb fe33 	bl	800068c <__aeabi_i2d>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2e:	f7fb fcdf 	bl	80003f0 <__aeabi_dsub>
 8004a32:	3530      	adds	r5, #48	@ 0x30
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a3c:	f806 5b01 	strb.w	r5, [r6], #1
 8004a40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a44:	f7fc f8fe 	bl	8000c44 <__aeabi_dcmplt>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d163      	bne.n	8004b14 <_dtoa_r+0x65c>
 8004a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a50:	495a      	ldr	r1, [pc, #360]	@ (8004bbc <_dtoa_r+0x704>)
 8004a52:	2000      	movs	r0, #0
 8004a54:	f7fb fccc 	bl	80003f0 <__aeabi_dsub>
 8004a58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a5c:	f7fc f8f2 	bl	8000c44 <__aeabi_dcmplt>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	f040 8087 	bne.w	8004b74 <_dtoa_r+0x6bc>
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	f43f af43 	beq.w	80048f2 <_dtoa_r+0x43a>
 8004a6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a70:	4b53      	ldr	r3, [pc, #332]	@ (8004bc0 <_dtoa_r+0x708>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	f7fb fe74 	bl	8000760 <__aeabi_dmul>
 8004a78:	4b51      	ldr	r3, [pc, #324]	@ (8004bc0 <_dtoa_r+0x708>)
 8004a7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a7e:	2200      	movs	r2, #0
 8004a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a84:	f7fb fe6c 	bl	8000760 <__aeabi_dmul>
 8004a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a8c:	e7c4      	b.n	8004a18 <_dtoa_r+0x560>
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4628      	mov	r0, r5
 8004a92:	f7fb fe65 	bl	8000760 <__aeabi_dmul>
 8004a96:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a9a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004a9c:	4656      	mov	r6, sl
 8004a9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa2:	f7fc f90d 	bl	8000cc0 <__aeabi_d2iz>
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	f7fb fdf0 	bl	800068c <__aeabi_i2d>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ab4:	f7fb fc9c 	bl	80003f0 <__aeabi_dsub>
 8004ab8:	3530      	adds	r5, #48	@ 0x30
 8004aba:	f806 5b01 	strb.w	r5, [r6], #1
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	42a6      	cmp	r6, r4
 8004ac4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	d124      	bne.n	8004b18 <_dtoa_r+0x660>
 8004ace:	4b3a      	ldr	r3, [pc, #232]	@ (8004bb8 <_dtoa_r+0x700>)
 8004ad0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ad4:	f7fb fc8e 	bl	80003f4 <__adddf3>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae0:	f7fc f8ce 	bl	8000c80 <__aeabi_dcmpgt>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d145      	bne.n	8004b74 <_dtoa_r+0x6bc>
 8004ae8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004aec:	4932      	ldr	r1, [pc, #200]	@ (8004bb8 <_dtoa_r+0x700>)
 8004aee:	2000      	movs	r0, #0
 8004af0:	f7fb fc7e 	bl	80003f0 <__aeabi_dsub>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004afc:	f7fc f8a2 	bl	8000c44 <__aeabi_dcmplt>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f43f aef6 	beq.w	80048f2 <_dtoa_r+0x43a>
 8004b06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004b08:	1e73      	subs	r3, r6, #1
 8004b0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004b0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b10:	2b30      	cmp	r3, #48	@ 0x30
 8004b12:	d0f8      	beq.n	8004b06 <_dtoa_r+0x64e>
 8004b14:	9f04      	ldr	r7, [sp, #16]
 8004b16:	e73f      	b.n	8004998 <_dtoa_r+0x4e0>
 8004b18:	4b29      	ldr	r3, [pc, #164]	@ (8004bc0 <_dtoa_r+0x708>)
 8004b1a:	f7fb fe21 	bl	8000760 <__aeabi_dmul>
 8004b1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b22:	e7bc      	b.n	8004a9e <_dtoa_r+0x5e6>
 8004b24:	d10c      	bne.n	8004b40 <_dtoa_r+0x688>
 8004b26:	4b27      	ldr	r3, [pc, #156]	@ (8004bc4 <_dtoa_r+0x70c>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b2e:	f7fb fe17 	bl	8000760 <__aeabi_dmul>
 8004b32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b36:	f7fc f899 	bl	8000c6c <__aeabi_dcmpge>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	f000 815b 	beq.w	8004df6 <_dtoa_r+0x93e>
 8004b40:	2400      	movs	r4, #0
 8004b42:	4625      	mov	r5, r4
 8004b44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b46:	43db      	mvns	r3, r3
 8004b48:	9304      	str	r3, [sp, #16]
 8004b4a:	4656      	mov	r6, sl
 8004b4c:	2700      	movs	r7, #0
 8004b4e:	4621      	mov	r1, r4
 8004b50:	4658      	mov	r0, fp
 8004b52:	f000 fbb9 	bl	80052c8 <_Bfree>
 8004b56:	2d00      	cmp	r5, #0
 8004b58:	d0dc      	beq.n	8004b14 <_dtoa_r+0x65c>
 8004b5a:	b12f      	cbz	r7, 8004b68 <_dtoa_r+0x6b0>
 8004b5c:	42af      	cmp	r7, r5
 8004b5e:	d003      	beq.n	8004b68 <_dtoa_r+0x6b0>
 8004b60:	4639      	mov	r1, r7
 8004b62:	4658      	mov	r0, fp
 8004b64:	f000 fbb0 	bl	80052c8 <_Bfree>
 8004b68:	4629      	mov	r1, r5
 8004b6a:	4658      	mov	r0, fp
 8004b6c:	f000 fbac 	bl	80052c8 <_Bfree>
 8004b70:	e7d0      	b.n	8004b14 <_dtoa_r+0x65c>
 8004b72:	9704      	str	r7, [sp, #16]
 8004b74:	4633      	mov	r3, r6
 8004b76:	461e      	mov	r6, r3
 8004b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b7c:	2a39      	cmp	r2, #57	@ 0x39
 8004b7e:	d107      	bne.n	8004b90 <_dtoa_r+0x6d8>
 8004b80:	459a      	cmp	sl, r3
 8004b82:	d1f8      	bne.n	8004b76 <_dtoa_r+0x6be>
 8004b84:	9a04      	ldr	r2, [sp, #16]
 8004b86:	3201      	adds	r2, #1
 8004b88:	9204      	str	r2, [sp, #16]
 8004b8a:	2230      	movs	r2, #48	@ 0x30
 8004b8c:	f88a 2000 	strb.w	r2, [sl]
 8004b90:	781a      	ldrb	r2, [r3, #0]
 8004b92:	3201      	adds	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e7bd      	b.n	8004b14 <_dtoa_r+0x65c>
 8004b98:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <_dtoa_r+0x708>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f7fb fde0 	bl	8000760 <__aeabi_dmul>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	460d      	mov	r5, r1
 8004ba8:	f7fc f842 	bl	8000c30 <__aeabi_dcmpeq>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	f43f aebc 	beq.w	800492a <_dtoa_r+0x472>
 8004bb2:	e6f1      	b.n	8004998 <_dtoa_r+0x4e0>
 8004bb4:	080065f0 	.word	0x080065f0
 8004bb8:	3fe00000 	.word	0x3fe00000
 8004bbc:	3ff00000 	.word	0x3ff00000
 8004bc0:	40240000 	.word	0x40240000
 8004bc4:	40140000 	.word	0x40140000
 8004bc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	f000 80db 	beq.w	8004d86 <_dtoa_r+0x8ce>
 8004bd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004bd2:	2a01      	cmp	r2, #1
 8004bd4:	f300 80bf 	bgt.w	8004d56 <_dtoa_r+0x89e>
 8004bd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	f000 80b7 	beq.w	8004d4e <_dtoa_r+0x896>
 8004be0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004be4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004be6:	4646      	mov	r6, r8
 8004be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bea:	2101      	movs	r1, #1
 8004bec:	441a      	add	r2, r3
 8004bee:	4658      	mov	r0, fp
 8004bf0:	4498      	add	r8, r3
 8004bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bf4:	f000 fc1c 	bl	8005430 <__i2b>
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	b15e      	cbz	r6, 8004c14 <_dtoa_r+0x75c>
 8004bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd08      	ble.n	8004c14 <_dtoa_r+0x75c>
 8004c02:	42b3      	cmp	r3, r6
 8004c04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c06:	bfa8      	it	ge
 8004c08:	4633      	movge	r3, r6
 8004c0a:	eba8 0803 	sub.w	r8, r8, r3
 8004c0e:	1af6      	subs	r6, r6, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c16:	b1f3      	cbz	r3, 8004c56 <_dtoa_r+0x79e>
 8004c18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 80b7 	beq.w	8004d8e <_dtoa_r+0x8d6>
 8004c20:	b18c      	cbz	r4, 8004c46 <_dtoa_r+0x78e>
 8004c22:	4629      	mov	r1, r5
 8004c24:	4622      	mov	r2, r4
 8004c26:	4658      	mov	r0, fp
 8004c28:	f000 fcc2 	bl	80055b0 <__pow5mult>
 8004c2c:	464a      	mov	r2, r9
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4605      	mov	r5, r0
 8004c32:	4658      	mov	r0, fp
 8004c34:	f000 fc12 	bl	800545c <__multiply>
 8004c38:	4649      	mov	r1, r9
 8004c3a:	9004      	str	r0, [sp, #16]
 8004c3c:	4658      	mov	r0, fp
 8004c3e:	f000 fb43 	bl	80052c8 <_Bfree>
 8004c42:	9b04      	ldr	r3, [sp, #16]
 8004c44:	4699      	mov	r9, r3
 8004c46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c48:	1b1a      	subs	r2, r3, r4
 8004c4a:	d004      	beq.n	8004c56 <_dtoa_r+0x79e>
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	4658      	mov	r0, fp
 8004c50:	f000 fcae 	bl	80055b0 <__pow5mult>
 8004c54:	4681      	mov	r9, r0
 8004c56:	2101      	movs	r1, #1
 8004c58:	4658      	mov	r0, fp
 8004c5a:	f000 fbe9 	bl	8005430 <__i2b>
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c60:	4604      	mov	r4, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 81c9 	beq.w	8004ffa <_dtoa_r+0xb42>
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	4658      	mov	r0, fp
 8004c6e:	f000 fc9f 	bl	80055b0 <__pow5mult>
 8004c72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	4604      	mov	r4, r0
 8004c78:	f300 808f 	bgt.w	8004d9a <_dtoa_r+0x8e2>
 8004c7c:	9b02      	ldr	r3, [sp, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 8087 	bne.w	8004d92 <_dtoa_r+0x8da>
 8004c84:	9b03      	ldr	r3, [sp, #12]
 8004c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 8083 	bne.w	8004d96 <_dtoa_r+0x8de>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c96:	0d1b      	lsrs	r3, r3, #20
 8004c98:	051b      	lsls	r3, r3, #20
 8004c9a:	b12b      	cbz	r3, 8004ca8 <_dtoa_r+0x7f0>
 8004c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ca2:	f108 0801 	add.w	r8, r8, #1
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 81aa 	beq.w	8005006 <_dtoa_r+0xb4e>
 8004cb2:	6923      	ldr	r3, [r4, #16]
 8004cb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004cb8:	6918      	ldr	r0, [r3, #16]
 8004cba:	f000 fb6d 	bl	8005398 <__hi0bits>
 8004cbe:	f1c0 0020 	rsb	r0, r0, #32
 8004cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc4:	4418      	add	r0, r3
 8004cc6:	f010 001f 	ands.w	r0, r0, #31
 8004cca:	d071      	beq.n	8004db0 <_dtoa_r+0x8f8>
 8004ccc:	f1c0 0320 	rsb	r3, r0, #32
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	dd65      	ble.n	8004da0 <_dtoa_r+0x8e8>
 8004cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cd6:	f1c0 001c 	rsb	r0, r0, #28
 8004cda:	4403      	add	r3, r0
 8004cdc:	4480      	add	r8, r0
 8004cde:	4406      	add	r6, r0
 8004ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ce2:	f1b8 0f00 	cmp.w	r8, #0
 8004ce6:	dd05      	ble.n	8004cf4 <_dtoa_r+0x83c>
 8004ce8:	4649      	mov	r1, r9
 8004cea:	4642      	mov	r2, r8
 8004cec:	4658      	mov	r0, fp
 8004cee:	f000 fcb9 	bl	8005664 <__lshift>
 8004cf2:	4681      	mov	r9, r0
 8004cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dd05      	ble.n	8004d06 <_dtoa_r+0x84e>
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4658      	mov	r0, fp
 8004d00:	f000 fcb0 	bl	8005664 <__lshift>
 8004d04:	4604      	mov	r4, r0
 8004d06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d053      	beq.n	8004db4 <_dtoa_r+0x8fc>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4648      	mov	r0, r9
 8004d10:	f000 fd14 	bl	800573c <__mcmp>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	da4d      	bge.n	8004db4 <_dtoa_r+0x8fc>
 8004d18:	1e7b      	subs	r3, r7, #1
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	2300      	movs	r3, #0
 8004d20:	220a      	movs	r2, #10
 8004d22:	4658      	mov	r0, fp
 8004d24:	f000 faf2 	bl	800530c <__multadd>
 8004d28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d2a:	4681      	mov	r9, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 816c 	beq.w	800500a <_dtoa_r+0xb52>
 8004d32:	2300      	movs	r3, #0
 8004d34:	4629      	mov	r1, r5
 8004d36:	220a      	movs	r2, #10
 8004d38:	4658      	mov	r0, fp
 8004d3a:	f000 fae7 	bl	800530c <__multadd>
 8004d3e:	9b08      	ldr	r3, [sp, #32]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	4605      	mov	r5, r0
 8004d44:	dc61      	bgt.n	8004e0a <_dtoa_r+0x952>
 8004d46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	dc3b      	bgt.n	8004dc4 <_dtoa_r+0x90c>
 8004d4c:	e05d      	b.n	8004e0a <_dtoa_r+0x952>
 8004d4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d50:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d54:	e746      	b.n	8004be4 <_dtoa_r+0x72c>
 8004d56:	9b07      	ldr	r3, [sp, #28]
 8004d58:	1e5c      	subs	r4, r3, #1
 8004d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	bfbf      	itttt	lt
 8004d60:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d62:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004d64:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d66:	1ae3      	sublt	r3, r4, r3
 8004d68:	bfb4      	ite	lt
 8004d6a:	18d2      	addlt	r2, r2, r3
 8004d6c:	1b1c      	subge	r4, r3, r4
 8004d6e:	9b07      	ldr	r3, [sp, #28]
 8004d70:	bfbc      	itt	lt
 8004d72:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004d74:	2400      	movlt	r4, #0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bfb5      	itete	lt
 8004d7a:	eba8 0603 	sublt.w	r6, r8, r3
 8004d7e:	9b07      	ldrge	r3, [sp, #28]
 8004d80:	2300      	movlt	r3, #0
 8004d82:	4646      	movge	r6, r8
 8004d84:	e730      	b.n	8004be8 <_dtoa_r+0x730>
 8004d86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d88:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004d8a:	4646      	mov	r6, r8
 8004d8c:	e735      	b.n	8004bfa <_dtoa_r+0x742>
 8004d8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d90:	e75c      	b.n	8004c4c <_dtoa_r+0x794>
 8004d92:	2300      	movs	r3, #0
 8004d94:	e788      	b.n	8004ca8 <_dtoa_r+0x7f0>
 8004d96:	9b02      	ldr	r3, [sp, #8]
 8004d98:	e786      	b.n	8004ca8 <_dtoa_r+0x7f0>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d9e:	e788      	b.n	8004cb2 <_dtoa_r+0x7fa>
 8004da0:	d09f      	beq.n	8004ce2 <_dtoa_r+0x82a>
 8004da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004da4:	331c      	adds	r3, #28
 8004da6:	441a      	add	r2, r3
 8004da8:	4498      	add	r8, r3
 8004daa:	441e      	add	r6, r3
 8004dac:	9209      	str	r2, [sp, #36]	@ 0x24
 8004dae:	e798      	b.n	8004ce2 <_dtoa_r+0x82a>
 8004db0:	4603      	mov	r3, r0
 8004db2:	e7f6      	b.n	8004da2 <_dtoa_r+0x8ea>
 8004db4:	9b07      	ldr	r3, [sp, #28]
 8004db6:	9704      	str	r7, [sp, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	dc20      	bgt.n	8004dfe <_dtoa_r+0x946>
 8004dbc:	9308      	str	r3, [sp, #32]
 8004dbe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	dd1e      	ble.n	8004e02 <_dtoa_r+0x94a>
 8004dc4:	9b08      	ldr	r3, [sp, #32]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f47f aebc 	bne.w	8004b44 <_dtoa_r+0x68c>
 8004dcc:	4621      	mov	r1, r4
 8004dce:	2205      	movs	r2, #5
 8004dd0:	4658      	mov	r0, fp
 8004dd2:	f000 fa9b 	bl	800530c <__multadd>
 8004dd6:	4601      	mov	r1, r0
 8004dd8:	4604      	mov	r4, r0
 8004dda:	4648      	mov	r0, r9
 8004ddc:	f000 fcae 	bl	800573c <__mcmp>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f77f aeaf 	ble.w	8004b44 <_dtoa_r+0x68c>
 8004de6:	4656      	mov	r6, sl
 8004de8:	2331      	movs	r3, #49	@ 0x31
 8004dea:	f806 3b01 	strb.w	r3, [r6], #1
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	3301      	adds	r3, #1
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	e6aa      	b.n	8004b4c <_dtoa_r+0x694>
 8004df6:	9c07      	ldr	r4, [sp, #28]
 8004df8:	9704      	str	r7, [sp, #16]
 8004dfa:	4625      	mov	r5, r4
 8004dfc:	e7f3      	b.n	8004de6 <_dtoa_r+0x92e>
 8004dfe:	9b07      	ldr	r3, [sp, #28]
 8004e00:	9308      	str	r3, [sp, #32]
 8004e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8104 	beq.w	8005012 <_dtoa_r+0xb5a>
 8004e0a:	2e00      	cmp	r6, #0
 8004e0c:	dd05      	ble.n	8004e1a <_dtoa_r+0x962>
 8004e0e:	4629      	mov	r1, r5
 8004e10:	4632      	mov	r2, r6
 8004e12:	4658      	mov	r0, fp
 8004e14:	f000 fc26 	bl	8005664 <__lshift>
 8004e18:	4605      	mov	r5, r0
 8004e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05a      	beq.n	8004ed6 <_dtoa_r+0xa1e>
 8004e20:	6869      	ldr	r1, [r5, #4]
 8004e22:	4658      	mov	r0, fp
 8004e24:	f000 fa10 	bl	8005248 <_Balloc>
 8004e28:	4606      	mov	r6, r0
 8004e2a:	b928      	cbnz	r0, 8004e38 <_dtoa_r+0x980>
 8004e2c:	4b84      	ldr	r3, [pc, #528]	@ (8005040 <_dtoa_r+0xb88>)
 8004e2e:	4602      	mov	r2, r0
 8004e30:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e34:	f7ff bb54 	b.w	80044e0 <_dtoa_r+0x28>
 8004e38:	692a      	ldr	r2, [r5, #16]
 8004e3a:	3202      	adds	r2, #2
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	f105 010c 	add.w	r1, r5, #12
 8004e42:	300c      	adds	r0, #12
 8004e44:	f000 ffaa 	bl	8005d9c <memcpy>
 8004e48:	2201      	movs	r2, #1
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4658      	mov	r0, fp
 8004e4e:	f000 fc09 	bl	8005664 <__lshift>
 8004e52:	f10a 0301 	add.w	r3, sl, #1
 8004e56:	9307      	str	r3, [sp, #28]
 8004e58:	9b08      	ldr	r3, [sp, #32]
 8004e5a:	4453      	add	r3, sl
 8004e5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e5e:	9b02      	ldr	r3, [sp, #8]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	462f      	mov	r7, r5
 8004e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e68:	4605      	mov	r5, r0
 8004e6a:	9b07      	ldr	r3, [sp, #28]
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	4648      	mov	r0, r9
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	f7ff fa97 	bl	80043a6 <quorem>
 8004e78:	4639      	mov	r1, r7
 8004e7a:	9008      	str	r0, [sp, #32]
 8004e7c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e80:	4648      	mov	r0, r9
 8004e82:	f000 fc5b 	bl	800573c <__mcmp>
 8004e86:	462a      	mov	r2, r5
 8004e88:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4658      	mov	r0, fp
 8004e8e:	f000 fc71 	bl	8005774 <__mdiff>
 8004e92:	68c2      	ldr	r2, [r0, #12]
 8004e94:	4606      	mov	r6, r0
 8004e96:	bb02      	cbnz	r2, 8004eda <_dtoa_r+0xa22>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	4648      	mov	r0, r9
 8004e9c:	f000 fc4e 	bl	800573c <__mcmp>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ea8:	f000 fa0e 	bl	80052c8 <_Bfree>
 8004eac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004eae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004eb0:	9e07      	ldr	r6, [sp, #28]
 8004eb2:	ea43 0102 	orr.w	r1, r3, r2
 8004eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eb8:	4319      	orrs	r1, r3
 8004eba:	d110      	bne.n	8004ede <_dtoa_r+0xa26>
 8004ebc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004ec0:	d029      	beq.n	8004f16 <_dtoa_r+0xa5e>
 8004ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dd02      	ble.n	8004ece <_dtoa_r+0xa16>
 8004ec8:	9b08      	ldr	r3, [sp, #32]
 8004eca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004ece:	9b02      	ldr	r3, [sp, #8]
 8004ed0:	f883 8000 	strb.w	r8, [r3]
 8004ed4:	e63b      	b.n	8004b4e <_dtoa_r+0x696>
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	e7bb      	b.n	8004e52 <_dtoa_r+0x99a>
 8004eda:	2201      	movs	r2, #1
 8004edc:	e7e1      	b.n	8004ea2 <_dtoa_r+0x9ea>
 8004ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	db04      	blt.n	8004eee <_dtoa_r+0xa36>
 8004ee4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004eea:	430b      	orrs	r3, r1
 8004eec:	d120      	bne.n	8004f30 <_dtoa_r+0xa78>
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	dded      	ble.n	8004ece <_dtoa_r+0xa16>
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	4658      	mov	r0, fp
 8004ef8:	f000 fbb4 	bl	8005664 <__lshift>
 8004efc:	4621      	mov	r1, r4
 8004efe:	4681      	mov	r9, r0
 8004f00:	f000 fc1c 	bl	800573c <__mcmp>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	dc03      	bgt.n	8004f10 <_dtoa_r+0xa58>
 8004f08:	d1e1      	bne.n	8004ece <_dtoa_r+0xa16>
 8004f0a:	f018 0f01 	tst.w	r8, #1
 8004f0e:	d0de      	beq.n	8004ece <_dtoa_r+0xa16>
 8004f10:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f14:	d1d8      	bne.n	8004ec8 <_dtoa_r+0xa10>
 8004f16:	9a02      	ldr	r2, [sp, #8]
 8004f18:	2339      	movs	r3, #57	@ 0x39
 8004f1a:	7013      	strb	r3, [r2, #0]
 8004f1c:	4633      	mov	r3, r6
 8004f1e:	461e      	mov	r6, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f26:	2a39      	cmp	r2, #57	@ 0x39
 8004f28:	d052      	beq.n	8004fd0 <_dtoa_r+0xb18>
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e60e      	b.n	8004b4e <_dtoa_r+0x696>
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	dd07      	ble.n	8004f44 <_dtoa_r+0xa8c>
 8004f34:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f38:	d0ed      	beq.n	8004f16 <_dtoa_r+0xa5e>
 8004f3a:	9a02      	ldr	r2, [sp, #8]
 8004f3c:	f108 0301 	add.w	r3, r8, #1
 8004f40:	7013      	strb	r3, [r2, #0]
 8004f42:	e604      	b.n	8004b4e <_dtoa_r+0x696>
 8004f44:	9b07      	ldr	r3, [sp, #28]
 8004f46:	9a07      	ldr	r2, [sp, #28]
 8004f48:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d028      	beq.n	8004fa4 <_dtoa_r+0xaec>
 8004f52:	4649      	mov	r1, r9
 8004f54:	2300      	movs	r3, #0
 8004f56:	220a      	movs	r2, #10
 8004f58:	4658      	mov	r0, fp
 8004f5a:	f000 f9d7 	bl	800530c <__multadd>
 8004f5e:	42af      	cmp	r7, r5
 8004f60:	4681      	mov	r9, r0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	f04f 020a 	mov.w	r2, #10
 8004f6a:	4639      	mov	r1, r7
 8004f6c:	4658      	mov	r0, fp
 8004f6e:	d107      	bne.n	8004f80 <_dtoa_r+0xac8>
 8004f70:	f000 f9cc 	bl	800530c <__multadd>
 8004f74:	4607      	mov	r7, r0
 8004f76:	4605      	mov	r5, r0
 8004f78:	9b07      	ldr	r3, [sp, #28]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	9307      	str	r3, [sp, #28]
 8004f7e:	e774      	b.n	8004e6a <_dtoa_r+0x9b2>
 8004f80:	f000 f9c4 	bl	800530c <__multadd>
 8004f84:	4629      	mov	r1, r5
 8004f86:	4607      	mov	r7, r0
 8004f88:	2300      	movs	r3, #0
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	f000 f9bd 	bl	800530c <__multadd>
 8004f92:	4605      	mov	r5, r0
 8004f94:	e7f0      	b.n	8004f78 <_dtoa_r+0xac0>
 8004f96:	9b08      	ldr	r3, [sp, #32]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bfcc      	ite	gt
 8004f9c:	461e      	movgt	r6, r3
 8004f9e:	2601      	movle	r6, #1
 8004fa0:	4456      	add	r6, sl
 8004fa2:	2700      	movs	r7, #0
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	4658      	mov	r0, fp
 8004faa:	f000 fb5b 	bl	8005664 <__lshift>
 8004fae:	4621      	mov	r1, r4
 8004fb0:	4681      	mov	r9, r0
 8004fb2:	f000 fbc3 	bl	800573c <__mcmp>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	dcb0      	bgt.n	8004f1c <_dtoa_r+0xa64>
 8004fba:	d102      	bne.n	8004fc2 <_dtoa_r+0xb0a>
 8004fbc:	f018 0f01 	tst.w	r8, #1
 8004fc0:	d1ac      	bne.n	8004f1c <_dtoa_r+0xa64>
 8004fc2:	4633      	mov	r3, r6
 8004fc4:	461e      	mov	r6, r3
 8004fc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fca:	2a30      	cmp	r2, #48	@ 0x30
 8004fcc:	d0fa      	beq.n	8004fc4 <_dtoa_r+0xb0c>
 8004fce:	e5be      	b.n	8004b4e <_dtoa_r+0x696>
 8004fd0:	459a      	cmp	sl, r3
 8004fd2:	d1a4      	bne.n	8004f1e <_dtoa_r+0xa66>
 8004fd4:	9b04      	ldr	r3, [sp, #16]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	2331      	movs	r3, #49	@ 0x31
 8004fdc:	f88a 3000 	strb.w	r3, [sl]
 8004fe0:	e5b5      	b.n	8004b4e <_dtoa_r+0x696>
 8004fe2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fe4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005044 <_dtoa_r+0xb8c>
 8004fe8:	b11b      	cbz	r3, 8004ff2 <_dtoa_r+0xb3a>
 8004fea:	f10a 0308 	add.w	r3, sl, #8
 8004fee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4650      	mov	r0, sl
 8004ff4:	b017      	add	sp, #92	@ 0x5c
 8004ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f77f ae3d 	ble.w	8004c7c <_dtoa_r+0x7c4>
 8005002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005004:	930a      	str	r3, [sp, #40]	@ 0x28
 8005006:	2001      	movs	r0, #1
 8005008:	e65b      	b.n	8004cc2 <_dtoa_r+0x80a>
 800500a:	9b08      	ldr	r3, [sp, #32]
 800500c:	2b00      	cmp	r3, #0
 800500e:	f77f aed6 	ble.w	8004dbe <_dtoa_r+0x906>
 8005012:	4656      	mov	r6, sl
 8005014:	4621      	mov	r1, r4
 8005016:	4648      	mov	r0, r9
 8005018:	f7ff f9c5 	bl	80043a6 <quorem>
 800501c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005020:	f806 8b01 	strb.w	r8, [r6], #1
 8005024:	9b08      	ldr	r3, [sp, #32]
 8005026:	eba6 020a 	sub.w	r2, r6, sl
 800502a:	4293      	cmp	r3, r2
 800502c:	ddb3      	ble.n	8004f96 <_dtoa_r+0xade>
 800502e:	4649      	mov	r1, r9
 8005030:	2300      	movs	r3, #0
 8005032:	220a      	movs	r2, #10
 8005034:	4658      	mov	r0, fp
 8005036:	f000 f969 	bl	800530c <__multadd>
 800503a:	4681      	mov	r9, r0
 800503c:	e7ea      	b.n	8005014 <_dtoa_r+0xb5c>
 800503e:	bf00      	nop
 8005040:	0800654c 	.word	0x0800654c
 8005044:	080064d0 	.word	0x080064d0

08005048 <_free_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4605      	mov	r5, r0
 800504c:	2900      	cmp	r1, #0
 800504e:	d041      	beq.n	80050d4 <_free_r+0x8c>
 8005050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005054:	1f0c      	subs	r4, r1, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	bfb8      	it	lt
 800505a:	18e4      	addlt	r4, r4, r3
 800505c:	f000 f8e8 	bl	8005230 <__malloc_lock>
 8005060:	4a1d      	ldr	r2, [pc, #116]	@ (80050d8 <_free_r+0x90>)
 8005062:	6813      	ldr	r3, [r2, #0]
 8005064:	b933      	cbnz	r3, 8005074 <_free_r+0x2c>
 8005066:	6063      	str	r3, [r4, #4]
 8005068:	6014      	str	r4, [r2, #0]
 800506a:	4628      	mov	r0, r5
 800506c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005070:	f000 b8e4 	b.w	800523c <__malloc_unlock>
 8005074:	42a3      	cmp	r3, r4
 8005076:	d908      	bls.n	800508a <_free_r+0x42>
 8005078:	6820      	ldr	r0, [r4, #0]
 800507a:	1821      	adds	r1, r4, r0
 800507c:	428b      	cmp	r3, r1
 800507e:	bf01      	itttt	eq
 8005080:	6819      	ldreq	r1, [r3, #0]
 8005082:	685b      	ldreq	r3, [r3, #4]
 8005084:	1809      	addeq	r1, r1, r0
 8005086:	6021      	streq	r1, [r4, #0]
 8005088:	e7ed      	b.n	8005066 <_free_r+0x1e>
 800508a:	461a      	mov	r2, r3
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	b10b      	cbz	r3, 8005094 <_free_r+0x4c>
 8005090:	42a3      	cmp	r3, r4
 8005092:	d9fa      	bls.n	800508a <_free_r+0x42>
 8005094:	6811      	ldr	r1, [r2, #0]
 8005096:	1850      	adds	r0, r2, r1
 8005098:	42a0      	cmp	r0, r4
 800509a:	d10b      	bne.n	80050b4 <_free_r+0x6c>
 800509c:	6820      	ldr	r0, [r4, #0]
 800509e:	4401      	add	r1, r0
 80050a0:	1850      	adds	r0, r2, r1
 80050a2:	4283      	cmp	r3, r0
 80050a4:	6011      	str	r1, [r2, #0]
 80050a6:	d1e0      	bne.n	800506a <_free_r+0x22>
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6053      	str	r3, [r2, #4]
 80050ae:	4408      	add	r0, r1
 80050b0:	6010      	str	r0, [r2, #0]
 80050b2:	e7da      	b.n	800506a <_free_r+0x22>
 80050b4:	d902      	bls.n	80050bc <_free_r+0x74>
 80050b6:	230c      	movs	r3, #12
 80050b8:	602b      	str	r3, [r5, #0]
 80050ba:	e7d6      	b.n	800506a <_free_r+0x22>
 80050bc:	6820      	ldr	r0, [r4, #0]
 80050be:	1821      	adds	r1, r4, r0
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf04      	itt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	6063      	str	r3, [r4, #4]
 80050ca:	bf04      	itt	eq
 80050cc:	1809      	addeq	r1, r1, r0
 80050ce:	6021      	streq	r1, [r4, #0]
 80050d0:	6054      	str	r4, [r2, #4]
 80050d2:	e7ca      	b.n	800506a <_free_r+0x22>
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	20000408 	.word	0x20000408

080050dc <malloc>:
 80050dc:	4b02      	ldr	r3, [pc, #8]	@ (80050e8 <malloc+0xc>)
 80050de:	4601      	mov	r1, r0
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	f000 b825 	b.w	8005130 <_malloc_r>
 80050e6:	bf00      	nop
 80050e8:	20000018 	.word	0x20000018

080050ec <sbrk_aligned>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	4e0f      	ldr	r6, [pc, #60]	@ (800512c <sbrk_aligned+0x40>)
 80050f0:	460c      	mov	r4, r1
 80050f2:	6831      	ldr	r1, [r6, #0]
 80050f4:	4605      	mov	r5, r0
 80050f6:	b911      	cbnz	r1, 80050fe <sbrk_aligned+0x12>
 80050f8:	f000 fe40 	bl	8005d7c <_sbrk_r>
 80050fc:	6030      	str	r0, [r6, #0]
 80050fe:	4621      	mov	r1, r4
 8005100:	4628      	mov	r0, r5
 8005102:	f000 fe3b 	bl	8005d7c <_sbrk_r>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d103      	bne.n	8005112 <sbrk_aligned+0x26>
 800510a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800510e:	4620      	mov	r0, r4
 8005110:	bd70      	pop	{r4, r5, r6, pc}
 8005112:	1cc4      	adds	r4, r0, #3
 8005114:	f024 0403 	bic.w	r4, r4, #3
 8005118:	42a0      	cmp	r0, r4
 800511a:	d0f8      	beq.n	800510e <sbrk_aligned+0x22>
 800511c:	1a21      	subs	r1, r4, r0
 800511e:	4628      	mov	r0, r5
 8005120:	f000 fe2c 	bl	8005d7c <_sbrk_r>
 8005124:	3001      	adds	r0, #1
 8005126:	d1f2      	bne.n	800510e <sbrk_aligned+0x22>
 8005128:	e7ef      	b.n	800510a <sbrk_aligned+0x1e>
 800512a:	bf00      	nop
 800512c:	20000404 	.word	0x20000404

08005130 <_malloc_r>:
 8005130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005134:	1ccd      	adds	r5, r1, #3
 8005136:	f025 0503 	bic.w	r5, r5, #3
 800513a:	3508      	adds	r5, #8
 800513c:	2d0c      	cmp	r5, #12
 800513e:	bf38      	it	cc
 8005140:	250c      	movcc	r5, #12
 8005142:	2d00      	cmp	r5, #0
 8005144:	4606      	mov	r6, r0
 8005146:	db01      	blt.n	800514c <_malloc_r+0x1c>
 8005148:	42a9      	cmp	r1, r5
 800514a:	d904      	bls.n	8005156 <_malloc_r+0x26>
 800514c:	230c      	movs	r3, #12
 800514e:	6033      	str	r3, [r6, #0]
 8005150:	2000      	movs	r0, #0
 8005152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800522c <_malloc_r+0xfc>
 800515a:	f000 f869 	bl	8005230 <__malloc_lock>
 800515e:	f8d8 3000 	ldr.w	r3, [r8]
 8005162:	461c      	mov	r4, r3
 8005164:	bb44      	cbnz	r4, 80051b8 <_malloc_r+0x88>
 8005166:	4629      	mov	r1, r5
 8005168:	4630      	mov	r0, r6
 800516a:	f7ff ffbf 	bl	80050ec <sbrk_aligned>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	4604      	mov	r4, r0
 8005172:	d158      	bne.n	8005226 <_malloc_r+0xf6>
 8005174:	f8d8 4000 	ldr.w	r4, [r8]
 8005178:	4627      	mov	r7, r4
 800517a:	2f00      	cmp	r7, #0
 800517c:	d143      	bne.n	8005206 <_malloc_r+0xd6>
 800517e:	2c00      	cmp	r4, #0
 8005180:	d04b      	beq.n	800521a <_malloc_r+0xea>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	4639      	mov	r1, r7
 8005186:	4630      	mov	r0, r6
 8005188:	eb04 0903 	add.w	r9, r4, r3
 800518c:	f000 fdf6 	bl	8005d7c <_sbrk_r>
 8005190:	4581      	cmp	r9, r0
 8005192:	d142      	bne.n	800521a <_malloc_r+0xea>
 8005194:	6821      	ldr	r1, [r4, #0]
 8005196:	1a6d      	subs	r5, r5, r1
 8005198:	4629      	mov	r1, r5
 800519a:	4630      	mov	r0, r6
 800519c:	f7ff ffa6 	bl	80050ec <sbrk_aligned>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d03a      	beq.n	800521a <_malloc_r+0xea>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	442b      	add	r3, r5
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	f8d8 3000 	ldr.w	r3, [r8]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	bb62      	cbnz	r2, 800520c <_malloc_r+0xdc>
 80051b2:	f8c8 7000 	str.w	r7, [r8]
 80051b6:	e00f      	b.n	80051d8 <_malloc_r+0xa8>
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	1b52      	subs	r2, r2, r5
 80051bc:	d420      	bmi.n	8005200 <_malloc_r+0xd0>
 80051be:	2a0b      	cmp	r2, #11
 80051c0:	d917      	bls.n	80051f2 <_malloc_r+0xc2>
 80051c2:	1961      	adds	r1, r4, r5
 80051c4:	42a3      	cmp	r3, r4
 80051c6:	6025      	str	r5, [r4, #0]
 80051c8:	bf18      	it	ne
 80051ca:	6059      	strne	r1, [r3, #4]
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	bf08      	it	eq
 80051d0:	f8c8 1000 	streq.w	r1, [r8]
 80051d4:	5162      	str	r2, [r4, r5]
 80051d6:	604b      	str	r3, [r1, #4]
 80051d8:	4630      	mov	r0, r6
 80051da:	f000 f82f 	bl	800523c <__malloc_unlock>
 80051de:	f104 000b 	add.w	r0, r4, #11
 80051e2:	1d23      	adds	r3, r4, #4
 80051e4:	f020 0007 	bic.w	r0, r0, #7
 80051e8:	1ac2      	subs	r2, r0, r3
 80051ea:	bf1c      	itt	ne
 80051ec:	1a1b      	subne	r3, r3, r0
 80051ee:	50a3      	strne	r3, [r4, r2]
 80051f0:	e7af      	b.n	8005152 <_malloc_r+0x22>
 80051f2:	6862      	ldr	r2, [r4, #4]
 80051f4:	42a3      	cmp	r3, r4
 80051f6:	bf0c      	ite	eq
 80051f8:	f8c8 2000 	streq.w	r2, [r8]
 80051fc:	605a      	strne	r2, [r3, #4]
 80051fe:	e7eb      	b.n	80051d8 <_malloc_r+0xa8>
 8005200:	4623      	mov	r3, r4
 8005202:	6864      	ldr	r4, [r4, #4]
 8005204:	e7ae      	b.n	8005164 <_malloc_r+0x34>
 8005206:	463c      	mov	r4, r7
 8005208:	687f      	ldr	r7, [r7, #4]
 800520a:	e7b6      	b.n	800517a <_malloc_r+0x4a>
 800520c:	461a      	mov	r2, r3
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	42a3      	cmp	r3, r4
 8005212:	d1fb      	bne.n	800520c <_malloc_r+0xdc>
 8005214:	2300      	movs	r3, #0
 8005216:	6053      	str	r3, [r2, #4]
 8005218:	e7de      	b.n	80051d8 <_malloc_r+0xa8>
 800521a:	230c      	movs	r3, #12
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	4630      	mov	r0, r6
 8005220:	f000 f80c 	bl	800523c <__malloc_unlock>
 8005224:	e794      	b.n	8005150 <_malloc_r+0x20>
 8005226:	6005      	str	r5, [r0, #0]
 8005228:	e7d6      	b.n	80051d8 <_malloc_r+0xa8>
 800522a:	bf00      	nop
 800522c:	20000408 	.word	0x20000408

08005230 <__malloc_lock>:
 8005230:	4801      	ldr	r0, [pc, #4]	@ (8005238 <__malloc_lock+0x8>)
 8005232:	f7ff b8b6 	b.w	80043a2 <__retarget_lock_acquire_recursive>
 8005236:	bf00      	nop
 8005238:	20000400 	.word	0x20000400

0800523c <__malloc_unlock>:
 800523c:	4801      	ldr	r0, [pc, #4]	@ (8005244 <__malloc_unlock+0x8>)
 800523e:	f7ff b8b1 	b.w	80043a4 <__retarget_lock_release_recursive>
 8005242:	bf00      	nop
 8005244:	20000400 	.word	0x20000400

08005248 <_Balloc>:
 8005248:	b570      	push	{r4, r5, r6, lr}
 800524a:	69c6      	ldr	r6, [r0, #28]
 800524c:	4604      	mov	r4, r0
 800524e:	460d      	mov	r5, r1
 8005250:	b976      	cbnz	r6, 8005270 <_Balloc+0x28>
 8005252:	2010      	movs	r0, #16
 8005254:	f7ff ff42 	bl	80050dc <malloc>
 8005258:	4602      	mov	r2, r0
 800525a:	61e0      	str	r0, [r4, #28]
 800525c:	b920      	cbnz	r0, 8005268 <_Balloc+0x20>
 800525e:	4b18      	ldr	r3, [pc, #96]	@ (80052c0 <_Balloc+0x78>)
 8005260:	4818      	ldr	r0, [pc, #96]	@ (80052c4 <_Balloc+0x7c>)
 8005262:	216b      	movs	r1, #107	@ 0x6b
 8005264:	f000 fda8 	bl	8005db8 <__assert_func>
 8005268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800526c:	6006      	str	r6, [r0, #0]
 800526e:	60c6      	str	r6, [r0, #12]
 8005270:	69e6      	ldr	r6, [r4, #28]
 8005272:	68f3      	ldr	r3, [r6, #12]
 8005274:	b183      	cbz	r3, 8005298 <_Balloc+0x50>
 8005276:	69e3      	ldr	r3, [r4, #28]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800527e:	b9b8      	cbnz	r0, 80052b0 <_Balloc+0x68>
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f605 	lsl.w	r6, r1, r5
 8005286:	1d72      	adds	r2, r6, #5
 8005288:	0092      	lsls	r2, r2, #2
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fdb2 	bl	8005df4 <_calloc_r>
 8005290:	b160      	cbz	r0, 80052ac <_Balloc+0x64>
 8005292:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005296:	e00e      	b.n	80052b6 <_Balloc+0x6e>
 8005298:	2221      	movs	r2, #33	@ 0x21
 800529a:	2104      	movs	r1, #4
 800529c:	4620      	mov	r0, r4
 800529e:	f000 fda9 	bl	8005df4 <_calloc_r>
 80052a2:	69e3      	ldr	r3, [r4, #28]
 80052a4:	60f0      	str	r0, [r6, #12]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e4      	bne.n	8005276 <_Balloc+0x2e>
 80052ac:	2000      	movs	r0, #0
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	6802      	ldr	r2, [r0, #0]
 80052b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052b6:	2300      	movs	r3, #0
 80052b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052bc:	e7f7      	b.n	80052ae <_Balloc+0x66>
 80052be:	bf00      	nop
 80052c0:	080064dd 	.word	0x080064dd
 80052c4:	0800655d 	.word	0x0800655d

080052c8 <_Bfree>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	69c6      	ldr	r6, [r0, #28]
 80052cc:	4605      	mov	r5, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	b976      	cbnz	r6, 80052f0 <_Bfree+0x28>
 80052d2:	2010      	movs	r0, #16
 80052d4:	f7ff ff02 	bl	80050dc <malloc>
 80052d8:	4602      	mov	r2, r0
 80052da:	61e8      	str	r0, [r5, #28]
 80052dc:	b920      	cbnz	r0, 80052e8 <_Bfree+0x20>
 80052de:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <_Bfree+0x3c>)
 80052e0:	4809      	ldr	r0, [pc, #36]	@ (8005308 <_Bfree+0x40>)
 80052e2:	218f      	movs	r1, #143	@ 0x8f
 80052e4:	f000 fd68 	bl	8005db8 <__assert_func>
 80052e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052ec:	6006      	str	r6, [r0, #0]
 80052ee:	60c6      	str	r6, [r0, #12]
 80052f0:	b13c      	cbz	r4, 8005302 <_Bfree+0x3a>
 80052f2:	69eb      	ldr	r3, [r5, #28]
 80052f4:	6862      	ldr	r2, [r4, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052fc:	6021      	str	r1, [r4, #0]
 80052fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005302:	bd70      	pop	{r4, r5, r6, pc}
 8005304:	080064dd 	.word	0x080064dd
 8005308:	0800655d 	.word	0x0800655d

0800530c <__multadd>:
 800530c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005310:	690d      	ldr	r5, [r1, #16]
 8005312:	4607      	mov	r7, r0
 8005314:	460c      	mov	r4, r1
 8005316:	461e      	mov	r6, r3
 8005318:	f101 0c14 	add.w	ip, r1, #20
 800531c:	2000      	movs	r0, #0
 800531e:	f8dc 3000 	ldr.w	r3, [ip]
 8005322:	b299      	uxth	r1, r3
 8005324:	fb02 6101 	mla	r1, r2, r1, r6
 8005328:	0c1e      	lsrs	r6, r3, #16
 800532a:	0c0b      	lsrs	r3, r1, #16
 800532c:	fb02 3306 	mla	r3, r2, r6, r3
 8005330:	b289      	uxth	r1, r1
 8005332:	3001      	adds	r0, #1
 8005334:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005338:	4285      	cmp	r5, r0
 800533a:	f84c 1b04 	str.w	r1, [ip], #4
 800533e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005342:	dcec      	bgt.n	800531e <__multadd+0x12>
 8005344:	b30e      	cbz	r6, 800538a <__multadd+0x7e>
 8005346:	68a3      	ldr	r3, [r4, #8]
 8005348:	42ab      	cmp	r3, r5
 800534a:	dc19      	bgt.n	8005380 <__multadd+0x74>
 800534c:	6861      	ldr	r1, [r4, #4]
 800534e:	4638      	mov	r0, r7
 8005350:	3101      	adds	r1, #1
 8005352:	f7ff ff79 	bl	8005248 <_Balloc>
 8005356:	4680      	mov	r8, r0
 8005358:	b928      	cbnz	r0, 8005366 <__multadd+0x5a>
 800535a:	4602      	mov	r2, r0
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <__multadd+0x84>)
 800535e:	480d      	ldr	r0, [pc, #52]	@ (8005394 <__multadd+0x88>)
 8005360:	21ba      	movs	r1, #186	@ 0xba
 8005362:	f000 fd29 	bl	8005db8 <__assert_func>
 8005366:	6922      	ldr	r2, [r4, #16]
 8005368:	3202      	adds	r2, #2
 800536a:	f104 010c 	add.w	r1, r4, #12
 800536e:	0092      	lsls	r2, r2, #2
 8005370:	300c      	adds	r0, #12
 8005372:	f000 fd13 	bl	8005d9c <memcpy>
 8005376:	4621      	mov	r1, r4
 8005378:	4638      	mov	r0, r7
 800537a:	f7ff ffa5 	bl	80052c8 <_Bfree>
 800537e:	4644      	mov	r4, r8
 8005380:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005384:	3501      	adds	r5, #1
 8005386:	615e      	str	r6, [r3, #20]
 8005388:	6125      	str	r5, [r4, #16]
 800538a:	4620      	mov	r0, r4
 800538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005390:	0800654c 	.word	0x0800654c
 8005394:	0800655d 	.word	0x0800655d

08005398 <__hi0bits>:
 8005398:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800539c:	4603      	mov	r3, r0
 800539e:	bf36      	itet	cc
 80053a0:	0403      	lslcc	r3, r0, #16
 80053a2:	2000      	movcs	r0, #0
 80053a4:	2010      	movcc	r0, #16
 80053a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053aa:	bf3c      	itt	cc
 80053ac:	021b      	lslcc	r3, r3, #8
 80053ae:	3008      	addcc	r0, #8
 80053b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053b4:	bf3c      	itt	cc
 80053b6:	011b      	lslcc	r3, r3, #4
 80053b8:	3004      	addcc	r0, #4
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053be:	bf3c      	itt	cc
 80053c0:	009b      	lslcc	r3, r3, #2
 80053c2:	3002      	addcc	r0, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	db05      	blt.n	80053d4 <__hi0bits+0x3c>
 80053c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80053cc:	f100 0001 	add.w	r0, r0, #1
 80053d0:	bf08      	it	eq
 80053d2:	2020      	moveq	r0, #32
 80053d4:	4770      	bx	lr

080053d6 <__lo0bits>:
 80053d6:	6803      	ldr	r3, [r0, #0]
 80053d8:	4602      	mov	r2, r0
 80053da:	f013 0007 	ands.w	r0, r3, #7
 80053de:	d00b      	beq.n	80053f8 <__lo0bits+0x22>
 80053e0:	07d9      	lsls	r1, r3, #31
 80053e2:	d421      	bmi.n	8005428 <__lo0bits+0x52>
 80053e4:	0798      	lsls	r0, r3, #30
 80053e6:	bf49      	itett	mi
 80053e8:	085b      	lsrmi	r3, r3, #1
 80053ea:	089b      	lsrpl	r3, r3, #2
 80053ec:	2001      	movmi	r0, #1
 80053ee:	6013      	strmi	r3, [r2, #0]
 80053f0:	bf5c      	itt	pl
 80053f2:	6013      	strpl	r3, [r2, #0]
 80053f4:	2002      	movpl	r0, #2
 80053f6:	4770      	bx	lr
 80053f8:	b299      	uxth	r1, r3
 80053fa:	b909      	cbnz	r1, 8005400 <__lo0bits+0x2a>
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	2010      	movs	r0, #16
 8005400:	b2d9      	uxtb	r1, r3
 8005402:	b909      	cbnz	r1, 8005408 <__lo0bits+0x32>
 8005404:	3008      	adds	r0, #8
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	0719      	lsls	r1, r3, #28
 800540a:	bf04      	itt	eq
 800540c:	091b      	lsreq	r3, r3, #4
 800540e:	3004      	addeq	r0, #4
 8005410:	0799      	lsls	r1, r3, #30
 8005412:	bf04      	itt	eq
 8005414:	089b      	lsreq	r3, r3, #2
 8005416:	3002      	addeq	r0, #2
 8005418:	07d9      	lsls	r1, r3, #31
 800541a:	d403      	bmi.n	8005424 <__lo0bits+0x4e>
 800541c:	085b      	lsrs	r3, r3, #1
 800541e:	f100 0001 	add.w	r0, r0, #1
 8005422:	d003      	beq.n	800542c <__lo0bits+0x56>
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4770      	bx	lr
 8005428:	2000      	movs	r0, #0
 800542a:	4770      	bx	lr
 800542c:	2020      	movs	r0, #32
 800542e:	4770      	bx	lr

08005430 <__i2b>:
 8005430:	b510      	push	{r4, lr}
 8005432:	460c      	mov	r4, r1
 8005434:	2101      	movs	r1, #1
 8005436:	f7ff ff07 	bl	8005248 <_Balloc>
 800543a:	4602      	mov	r2, r0
 800543c:	b928      	cbnz	r0, 800544a <__i2b+0x1a>
 800543e:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <__i2b+0x24>)
 8005440:	4805      	ldr	r0, [pc, #20]	@ (8005458 <__i2b+0x28>)
 8005442:	f240 1145 	movw	r1, #325	@ 0x145
 8005446:	f000 fcb7 	bl	8005db8 <__assert_func>
 800544a:	2301      	movs	r3, #1
 800544c:	6144      	str	r4, [r0, #20]
 800544e:	6103      	str	r3, [r0, #16]
 8005450:	bd10      	pop	{r4, pc}
 8005452:	bf00      	nop
 8005454:	0800654c 	.word	0x0800654c
 8005458:	0800655d 	.word	0x0800655d

0800545c <__multiply>:
 800545c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005460:	4614      	mov	r4, r2
 8005462:	690a      	ldr	r2, [r1, #16]
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	429a      	cmp	r2, r3
 8005468:	bfa8      	it	ge
 800546a:	4623      	movge	r3, r4
 800546c:	460f      	mov	r7, r1
 800546e:	bfa4      	itt	ge
 8005470:	460c      	movge	r4, r1
 8005472:	461f      	movge	r7, r3
 8005474:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005478:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800547c:	68a3      	ldr	r3, [r4, #8]
 800547e:	6861      	ldr	r1, [r4, #4]
 8005480:	eb0a 0609 	add.w	r6, sl, r9
 8005484:	42b3      	cmp	r3, r6
 8005486:	b085      	sub	sp, #20
 8005488:	bfb8      	it	lt
 800548a:	3101      	addlt	r1, #1
 800548c:	f7ff fedc 	bl	8005248 <_Balloc>
 8005490:	b930      	cbnz	r0, 80054a0 <__multiply+0x44>
 8005492:	4602      	mov	r2, r0
 8005494:	4b44      	ldr	r3, [pc, #272]	@ (80055a8 <__multiply+0x14c>)
 8005496:	4845      	ldr	r0, [pc, #276]	@ (80055ac <__multiply+0x150>)
 8005498:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800549c:	f000 fc8c 	bl	8005db8 <__assert_func>
 80054a0:	f100 0514 	add.w	r5, r0, #20
 80054a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80054a8:	462b      	mov	r3, r5
 80054aa:	2200      	movs	r2, #0
 80054ac:	4543      	cmp	r3, r8
 80054ae:	d321      	bcc.n	80054f4 <__multiply+0x98>
 80054b0:	f107 0114 	add.w	r1, r7, #20
 80054b4:	f104 0214 	add.w	r2, r4, #20
 80054b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80054bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	1b13      	subs	r3, r2, r4
 80054c4:	3b15      	subs	r3, #21
 80054c6:	f023 0303 	bic.w	r3, r3, #3
 80054ca:	3304      	adds	r3, #4
 80054cc:	f104 0715 	add.w	r7, r4, #21
 80054d0:	42ba      	cmp	r2, r7
 80054d2:	bf38      	it	cc
 80054d4:	2304      	movcc	r3, #4
 80054d6:	9301      	str	r3, [sp, #4]
 80054d8:	9b02      	ldr	r3, [sp, #8]
 80054da:	9103      	str	r1, [sp, #12]
 80054dc:	428b      	cmp	r3, r1
 80054de:	d80c      	bhi.n	80054fa <__multiply+0x9e>
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	dd03      	ble.n	80054ec <__multiply+0x90>
 80054e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d05a      	beq.n	80055a2 <__multiply+0x146>
 80054ec:	6106      	str	r6, [r0, #16]
 80054ee:	b005      	add	sp, #20
 80054f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f4:	f843 2b04 	str.w	r2, [r3], #4
 80054f8:	e7d8      	b.n	80054ac <__multiply+0x50>
 80054fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80054fe:	f1ba 0f00 	cmp.w	sl, #0
 8005502:	d023      	beq.n	800554c <__multiply+0xf0>
 8005504:	f104 0e14 	add.w	lr, r4, #20
 8005508:	46a9      	mov	r9, r5
 800550a:	f04f 0c00 	mov.w	ip, #0
 800550e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005512:	f8d9 3000 	ldr.w	r3, [r9]
 8005516:	fa1f fb87 	uxth.w	fp, r7
 800551a:	b29b      	uxth	r3, r3
 800551c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005520:	4463      	add	r3, ip
 8005522:	f8d9 c000 	ldr.w	ip, [r9]
 8005526:	0c3f      	lsrs	r7, r7, #16
 8005528:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800552c:	fb0a c707 	mla	r7, sl, r7, ip
 8005530:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005534:	b29b      	uxth	r3, r3
 8005536:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800553a:	4572      	cmp	r2, lr
 800553c:	f849 3b04 	str.w	r3, [r9], #4
 8005540:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005544:	d8e3      	bhi.n	800550e <__multiply+0xb2>
 8005546:	9b01      	ldr	r3, [sp, #4]
 8005548:	f845 c003 	str.w	ip, [r5, r3]
 800554c:	9b03      	ldr	r3, [sp, #12]
 800554e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005552:	3104      	adds	r1, #4
 8005554:	f1b9 0f00 	cmp.w	r9, #0
 8005558:	d021      	beq.n	800559e <__multiply+0x142>
 800555a:	682b      	ldr	r3, [r5, #0]
 800555c:	f104 0c14 	add.w	ip, r4, #20
 8005560:	46ae      	mov	lr, r5
 8005562:	f04f 0a00 	mov.w	sl, #0
 8005566:	f8bc b000 	ldrh.w	fp, [ip]
 800556a:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800556e:	fb09 770b 	mla	r7, r9, fp, r7
 8005572:	4457      	add	r7, sl
 8005574:	b29b      	uxth	r3, r3
 8005576:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800557a:	f84e 3b04 	str.w	r3, [lr], #4
 800557e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005582:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005586:	f8be 3000 	ldrh.w	r3, [lr]
 800558a:	fb09 330a 	mla	r3, r9, sl, r3
 800558e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005592:	4562      	cmp	r2, ip
 8005594:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005598:	d8e5      	bhi.n	8005566 <__multiply+0x10a>
 800559a:	9f01      	ldr	r7, [sp, #4]
 800559c:	51eb      	str	r3, [r5, r7]
 800559e:	3504      	adds	r5, #4
 80055a0:	e79a      	b.n	80054d8 <__multiply+0x7c>
 80055a2:	3e01      	subs	r6, #1
 80055a4:	e79c      	b.n	80054e0 <__multiply+0x84>
 80055a6:	bf00      	nop
 80055a8:	0800654c 	.word	0x0800654c
 80055ac:	0800655d 	.word	0x0800655d

080055b0 <__pow5mult>:
 80055b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b4:	4615      	mov	r5, r2
 80055b6:	f012 0203 	ands.w	r2, r2, #3
 80055ba:	4607      	mov	r7, r0
 80055bc:	460e      	mov	r6, r1
 80055be:	d007      	beq.n	80055d0 <__pow5mult+0x20>
 80055c0:	4c25      	ldr	r4, [pc, #148]	@ (8005658 <__pow5mult+0xa8>)
 80055c2:	3a01      	subs	r2, #1
 80055c4:	2300      	movs	r3, #0
 80055c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055ca:	f7ff fe9f 	bl	800530c <__multadd>
 80055ce:	4606      	mov	r6, r0
 80055d0:	10ad      	asrs	r5, r5, #2
 80055d2:	d03d      	beq.n	8005650 <__pow5mult+0xa0>
 80055d4:	69fc      	ldr	r4, [r7, #28]
 80055d6:	b97c      	cbnz	r4, 80055f8 <__pow5mult+0x48>
 80055d8:	2010      	movs	r0, #16
 80055da:	f7ff fd7f 	bl	80050dc <malloc>
 80055de:	4602      	mov	r2, r0
 80055e0:	61f8      	str	r0, [r7, #28]
 80055e2:	b928      	cbnz	r0, 80055f0 <__pow5mult+0x40>
 80055e4:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <__pow5mult+0xac>)
 80055e6:	481e      	ldr	r0, [pc, #120]	@ (8005660 <__pow5mult+0xb0>)
 80055e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80055ec:	f000 fbe4 	bl	8005db8 <__assert_func>
 80055f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055f4:	6004      	str	r4, [r0, #0]
 80055f6:	60c4      	str	r4, [r0, #12]
 80055f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80055fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005600:	b94c      	cbnz	r4, 8005616 <__pow5mult+0x66>
 8005602:	f240 2171 	movw	r1, #625	@ 0x271
 8005606:	4638      	mov	r0, r7
 8005608:	f7ff ff12 	bl	8005430 <__i2b>
 800560c:	2300      	movs	r3, #0
 800560e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005612:	4604      	mov	r4, r0
 8005614:	6003      	str	r3, [r0, #0]
 8005616:	f04f 0900 	mov.w	r9, #0
 800561a:	07eb      	lsls	r3, r5, #31
 800561c:	d50a      	bpl.n	8005634 <__pow5mult+0x84>
 800561e:	4631      	mov	r1, r6
 8005620:	4622      	mov	r2, r4
 8005622:	4638      	mov	r0, r7
 8005624:	f7ff ff1a 	bl	800545c <__multiply>
 8005628:	4631      	mov	r1, r6
 800562a:	4680      	mov	r8, r0
 800562c:	4638      	mov	r0, r7
 800562e:	f7ff fe4b 	bl	80052c8 <_Bfree>
 8005632:	4646      	mov	r6, r8
 8005634:	106d      	asrs	r5, r5, #1
 8005636:	d00b      	beq.n	8005650 <__pow5mult+0xa0>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	b938      	cbnz	r0, 800564c <__pow5mult+0x9c>
 800563c:	4622      	mov	r2, r4
 800563e:	4621      	mov	r1, r4
 8005640:	4638      	mov	r0, r7
 8005642:	f7ff ff0b 	bl	800545c <__multiply>
 8005646:	6020      	str	r0, [r4, #0]
 8005648:	f8c0 9000 	str.w	r9, [r0]
 800564c:	4604      	mov	r4, r0
 800564e:	e7e4      	b.n	800561a <__pow5mult+0x6a>
 8005650:	4630      	mov	r0, r6
 8005652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005656:	bf00      	nop
 8005658:	080065b8 	.word	0x080065b8
 800565c:	080064dd 	.word	0x080064dd
 8005660:	0800655d 	.word	0x0800655d

08005664 <__lshift>:
 8005664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005668:	460c      	mov	r4, r1
 800566a:	6849      	ldr	r1, [r1, #4]
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005672:	68a3      	ldr	r3, [r4, #8]
 8005674:	4607      	mov	r7, r0
 8005676:	4691      	mov	r9, r2
 8005678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800567c:	f108 0601 	add.w	r6, r8, #1
 8005680:	42b3      	cmp	r3, r6
 8005682:	db0b      	blt.n	800569c <__lshift+0x38>
 8005684:	4638      	mov	r0, r7
 8005686:	f7ff fddf 	bl	8005248 <_Balloc>
 800568a:	4605      	mov	r5, r0
 800568c:	b948      	cbnz	r0, 80056a2 <__lshift+0x3e>
 800568e:	4602      	mov	r2, r0
 8005690:	4b28      	ldr	r3, [pc, #160]	@ (8005734 <__lshift+0xd0>)
 8005692:	4829      	ldr	r0, [pc, #164]	@ (8005738 <__lshift+0xd4>)
 8005694:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005698:	f000 fb8e 	bl	8005db8 <__assert_func>
 800569c:	3101      	adds	r1, #1
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	e7ee      	b.n	8005680 <__lshift+0x1c>
 80056a2:	2300      	movs	r3, #0
 80056a4:	f100 0114 	add.w	r1, r0, #20
 80056a8:	f100 0210 	add.w	r2, r0, #16
 80056ac:	4618      	mov	r0, r3
 80056ae:	4553      	cmp	r3, sl
 80056b0:	db33      	blt.n	800571a <__lshift+0xb6>
 80056b2:	6920      	ldr	r0, [r4, #16]
 80056b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056b8:	f104 0314 	add.w	r3, r4, #20
 80056bc:	f019 091f 	ands.w	r9, r9, #31
 80056c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056c8:	d02b      	beq.n	8005722 <__lshift+0xbe>
 80056ca:	f1c9 0e20 	rsb	lr, r9, #32
 80056ce:	468a      	mov	sl, r1
 80056d0:	2200      	movs	r2, #0
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	fa00 f009 	lsl.w	r0, r0, r9
 80056d8:	4310      	orrs	r0, r2
 80056da:	f84a 0b04 	str.w	r0, [sl], #4
 80056de:	f853 2b04 	ldr.w	r2, [r3], #4
 80056e2:	459c      	cmp	ip, r3
 80056e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80056e8:	d8f3      	bhi.n	80056d2 <__lshift+0x6e>
 80056ea:	ebac 0304 	sub.w	r3, ip, r4
 80056ee:	3b15      	subs	r3, #21
 80056f0:	f023 0303 	bic.w	r3, r3, #3
 80056f4:	3304      	adds	r3, #4
 80056f6:	f104 0015 	add.w	r0, r4, #21
 80056fa:	4584      	cmp	ip, r0
 80056fc:	bf38      	it	cc
 80056fe:	2304      	movcc	r3, #4
 8005700:	50ca      	str	r2, [r1, r3]
 8005702:	b10a      	cbz	r2, 8005708 <__lshift+0xa4>
 8005704:	f108 0602 	add.w	r6, r8, #2
 8005708:	3e01      	subs	r6, #1
 800570a:	4638      	mov	r0, r7
 800570c:	612e      	str	r6, [r5, #16]
 800570e:	4621      	mov	r1, r4
 8005710:	f7ff fdda 	bl	80052c8 <_Bfree>
 8005714:	4628      	mov	r0, r5
 8005716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571a:	f842 0f04 	str.w	r0, [r2, #4]!
 800571e:	3301      	adds	r3, #1
 8005720:	e7c5      	b.n	80056ae <__lshift+0x4a>
 8005722:	3904      	subs	r1, #4
 8005724:	f853 2b04 	ldr.w	r2, [r3], #4
 8005728:	f841 2f04 	str.w	r2, [r1, #4]!
 800572c:	459c      	cmp	ip, r3
 800572e:	d8f9      	bhi.n	8005724 <__lshift+0xc0>
 8005730:	e7ea      	b.n	8005708 <__lshift+0xa4>
 8005732:	bf00      	nop
 8005734:	0800654c 	.word	0x0800654c
 8005738:	0800655d 	.word	0x0800655d

0800573c <__mcmp>:
 800573c:	690a      	ldr	r2, [r1, #16]
 800573e:	4603      	mov	r3, r0
 8005740:	6900      	ldr	r0, [r0, #16]
 8005742:	1a80      	subs	r0, r0, r2
 8005744:	b530      	push	{r4, r5, lr}
 8005746:	d10e      	bne.n	8005766 <__mcmp+0x2a>
 8005748:	3314      	adds	r3, #20
 800574a:	3114      	adds	r1, #20
 800574c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005750:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005754:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005758:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800575c:	4295      	cmp	r5, r2
 800575e:	d003      	beq.n	8005768 <__mcmp+0x2c>
 8005760:	d205      	bcs.n	800576e <__mcmp+0x32>
 8005762:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005766:	bd30      	pop	{r4, r5, pc}
 8005768:	42a3      	cmp	r3, r4
 800576a:	d3f3      	bcc.n	8005754 <__mcmp+0x18>
 800576c:	e7fb      	b.n	8005766 <__mcmp+0x2a>
 800576e:	2001      	movs	r0, #1
 8005770:	e7f9      	b.n	8005766 <__mcmp+0x2a>
	...

08005774 <__mdiff>:
 8005774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005778:	4689      	mov	r9, r1
 800577a:	4606      	mov	r6, r0
 800577c:	4611      	mov	r1, r2
 800577e:	4648      	mov	r0, r9
 8005780:	4614      	mov	r4, r2
 8005782:	f7ff ffdb 	bl	800573c <__mcmp>
 8005786:	1e05      	subs	r5, r0, #0
 8005788:	d112      	bne.n	80057b0 <__mdiff+0x3c>
 800578a:	4629      	mov	r1, r5
 800578c:	4630      	mov	r0, r6
 800578e:	f7ff fd5b 	bl	8005248 <_Balloc>
 8005792:	4602      	mov	r2, r0
 8005794:	b928      	cbnz	r0, 80057a2 <__mdiff+0x2e>
 8005796:	4b3e      	ldr	r3, [pc, #248]	@ (8005890 <__mdiff+0x11c>)
 8005798:	f240 2137 	movw	r1, #567	@ 0x237
 800579c:	483d      	ldr	r0, [pc, #244]	@ (8005894 <__mdiff+0x120>)
 800579e:	f000 fb0b 	bl	8005db8 <__assert_func>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80057a8:	4610      	mov	r0, r2
 80057aa:	b003      	add	sp, #12
 80057ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057b0:	bfbc      	itt	lt
 80057b2:	464b      	movlt	r3, r9
 80057b4:	46a1      	movlt	r9, r4
 80057b6:	4630      	mov	r0, r6
 80057b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057bc:	bfba      	itte	lt
 80057be:	461c      	movlt	r4, r3
 80057c0:	2501      	movlt	r5, #1
 80057c2:	2500      	movge	r5, #0
 80057c4:	f7ff fd40 	bl	8005248 <_Balloc>
 80057c8:	4602      	mov	r2, r0
 80057ca:	b918      	cbnz	r0, 80057d4 <__mdiff+0x60>
 80057cc:	4b30      	ldr	r3, [pc, #192]	@ (8005890 <__mdiff+0x11c>)
 80057ce:	f240 2145 	movw	r1, #581	@ 0x245
 80057d2:	e7e3      	b.n	800579c <__mdiff+0x28>
 80057d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80057d8:	6926      	ldr	r6, [r4, #16]
 80057da:	60c5      	str	r5, [r0, #12]
 80057dc:	f109 0310 	add.w	r3, r9, #16
 80057e0:	f109 0514 	add.w	r5, r9, #20
 80057e4:	f104 0e14 	add.w	lr, r4, #20
 80057e8:	f100 0b14 	add.w	fp, r0, #20
 80057ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80057f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	46d9      	mov	r9, fp
 80057f8:	f04f 0c00 	mov.w	ip, #0
 80057fc:	9b01      	ldr	r3, [sp, #4]
 80057fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005802:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	b281      	uxth	r1, r0
 800580a:	fa1f f38a 	uxth.w	r3, sl
 800580e:	1a5b      	subs	r3, r3, r1
 8005810:	0c00      	lsrs	r0, r0, #16
 8005812:	4463      	add	r3, ip
 8005814:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005818:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005822:	4576      	cmp	r6, lr
 8005824:	f849 3b04 	str.w	r3, [r9], #4
 8005828:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800582c:	d8e6      	bhi.n	80057fc <__mdiff+0x88>
 800582e:	1b33      	subs	r3, r6, r4
 8005830:	3b15      	subs	r3, #21
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	3415      	adds	r4, #21
 8005838:	3304      	adds	r3, #4
 800583a:	42a6      	cmp	r6, r4
 800583c:	bf38      	it	cc
 800583e:	2304      	movcc	r3, #4
 8005840:	441d      	add	r5, r3
 8005842:	445b      	add	r3, fp
 8005844:	461e      	mov	r6, r3
 8005846:	462c      	mov	r4, r5
 8005848:	4544      	cmp	r4, r8
 800584a:	d30e      	bcc.n	800586a <__mdiff+0xf6>
 800584c:	f108 0103 	add.w	r1, r8, #3
 8005850:	1b49      	subs	r1, r1, r5
 8005852:	f021 0103 	bic.w	r1, r1, #3
 8005856:	3d03      	subs	r5, #3
 8005858:	45a8      	cmp	r8, r5
 800585a:	bf38      	it	cc
 800585c:	2100      	movcc	r1, #0
 800585e:	440b      	add	r3, r1
 8005860:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005864:	b191      	cbz	r1, 800588c <__mdiff+0x118>
 8005866:	6117      	str	r7, [r2, #16]
 8005868:	e79e      	b.n	80057a8 <__mdiff+0x34>
 800586a:	f854 1b04 	ldr.w	r1, [r4], #4
 800586e:	46e6      	mov	lr, ip
 8005870:	0c08      	lsrs	r0, r1, #16
 8005872:	fa1c fc81 	uxtah	ip, ip, r1
 8005876:	4471      	add	r1, lr
 8005878:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800587c:	b289      	uxth	r1, r1
 800587e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005882:	f846 1b04 	str.w	r1, [r6], #4
 8005886:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800588a:	e7dd      	b.n	8005848 <__mdiff+0xd4>
 800588c:	3f01      	subs	r7, #1
 800588e:	e7e7      	b.n	8005860 <__mdiff+0xec>
 8005890:	0800654c 	.word	0x0800654c
 8005894:	0800655d 	.word	0x0800655d

08005898 <__d2b>:
 8005898:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800589c:	2101      	movs	r1, #1
 800589e:	9e08      	ldr	r6, [sp, #32]
 80058a0:	4690      	mov	r8, r2
 80058a2:	4699      	mov	r9, r3
 80058a4:	f7ff fcd0 	bl	8005248 <_Balloc>
 80058a8:	4604      	mov	r4, r0
 80058aa:	b930      	cbnz	r0, 80058ba <__d2b+0x22>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b24      	ldr	r3, [pc, #144]	@ (8005940 <__d2b+0xa8>)
 80058b0:	4824      	ldr	r0, [pc, #144]	@ (8005944 <__d2b+0xac>)
 80058b2:	f240 310f 	movw	r1, #783	@ 0x30f
 80058b6:	f000 fa7f 	bl	8005db8 <__assert_func>
 80058ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058c2:	b10d      	cbz	r5, 80058c8 <__d2b+0x30>
 80058c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	f1b8 0300 	subs.w	r3, r8, #0
 80058ce:	d024      	beq.n	800591a <__d2b+0x82>
 80058d0:	4668      	mov	r0, sp
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	f7ff fd7f 	bl	80053d6 <__lo0bits>
 80058d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058dc:	b1d8      	cbz	r0, 8005916 <__d2b+0x7e>
 80058de:	f1c0 0320 	rsb	r3, r0, #32
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	430b      	orrs	r3, r1
 80058e8:	40c2      	lsrs	r2, r0
 80058ea:	6163      	str	r3, [r4, #20]
 80058ec:	9201      	str	r2, [sp, #4]
 80058ee:	9b01      	ldr	r3, [sp, #4]
 80058f0:	61a3      	str	r3, [r4, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bf0c      	ite	eq
 80058f6:	2201      	moveq	r2, #1
 80058f8:	2202      	movne	r2, #2
 80058fa:	6122      	str	r2, [r4, #16]
 80058fc:	b1ad      	cbz	r5, 800592a <__d2b+0x92>
 80058fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005902:	4405      	add	r5, r0
 8005904:	6035      	str	r5, [r6, #0]
 8005906:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800590a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800590c:	6018      	str	r0, [r3, #0]
 800590e:	4620      	mov	r0, r4
 8005910:	b002      	add	sp, #8
 8005912:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005916:	6161      	str	r1, [r4, #20]
 8005918:	e7e9      	b.n	80058ee <__d2b+0x56>
 800591a:	a801      	add	r0, sp, #4
 800591c:	f7ff fd5b 	bl	80053d6 <__lo0bits>
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	6163      	str	r3, [r4, #20]
 8005924:	3020      	adds	r0, #32
 8005926:	2201      	movs	r2, #1
 8005928:	e7e7      	b.n	80058fa <__d2b+0x62>
 800592a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800592e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005932:	6030      	str	r0, [r6, #0]
 8005934:	6918      	ldr	r0, [r3, #16]
 8005936:	f7ff fd2f 	bl	8005398 <__hi0bits>
 800593a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800593e:	e7e4      	b.n	800590a <__d2b+0x72>
 8005940:	0800654c 	.word	0x0800654c
 8005944:	0800655d 	.word	0x0800655d

08005948 <__ssputs_r>:
 8005948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	688e      	ldr	r6, [r1, #8]
 800594e:	461f      	mov	r7, r3
 8005950:	42be      	cmp	r6, r7
 8005952:	680b      	ldr	r3, [r1, #0]
 8005954:	4682      	mov	sl, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4690      	mov	r8, r2
 800595a:	d82d      	bhi.n	80059b8 <__ssputs_r+0x70>
 800595c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005960:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005964:	d026      	beq.n	80059b4 <__ssputs_r+0x6c>
 8005966:	6965      	ldr	r5, [r4, #20]
 8005968:	6909      	ldr	r1, [r1, #16]
 800596a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800596e:	eba3 0901 	sub.w	r9, r3, r1
 8005972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005976:	1c7b      	adds	r3, r7, #1
 8005978:	444b      	add	r3, r9
 800597a:	106d      	asrs	r5, r5, #1
 800597c:	429d      	cmp	r5, r3
 800597e:	bf38      	it	cc
 8005980:	461d      	movcc	r5, r3
 8005982:	0553      	lsls	r3, r2, #21
 8005984:	d527      	bpl.n	80059d6 <__ssputs_r+0x8e>
 8005986:	4629      	mov	r1, r5
 8005988:	f7ff fbd2 	bl	8005130 <_malloc_r>
 800598c:	4606      	mov	r6, r0
 800598e:	b360      	cbz	r0, 80059ea <__ssputs_r+0xa2>
 8005990:	6921      	ldr	r1, [r4, #16]
 8005992:	464a      	mov	r2, r9
 8005994:	f000 fa02 	bl	8005d9c <memcpy>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800599e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	6126      	str	r6, [r4, #16]
 80059a6:	6165      	str	r5, [r4, #20]
 80059a8:	444e      	add	r6, r9
 80059aa:	eba5 0509 	sub.w	r5, r5, r9
 80059ae:	6026      	str	r6, [r4, #0]
 80059b0:	60a5      	str	r5, [r4, #8]
 80059b2:	463e      	mov	r6, r7
 80059b4:	42be      	cmp	r6, r7
 80059b6:	d900      	bls.n	80059ba <__ssputs_r+0x72>
 80059b8:	463e      	mov	r6, r7
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	4632      	mov	r2, r6
 80059be:	4641      	mov	r1, r8
 80059c0:	f000 f9c2 	bl	8005d48 <memmove>
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	1b9b      	subs	r3, r3, r6
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	4433      	add	r3, r6
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	2000      	movs	r0, #0
 80059d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d6:	462a      	mov	r2, r5
 80059d8:	f000 fa32 	bl	8005e40 <_realloc_r>
 80059dc:	4606      	mov	r6, r0
 80059de:	2800      	cmp	r0, #0
 80059e0:	d1e0      	bne.n	80059a4 <__ssputs_r+0x5c>
 80059e2:	6921      	ldr	r1, [r4, #16]
 80059e4:	4650      	mov	r0, sl
 80059e6:	f7ff fb2f 	bl	8005048 <_free_r>
 80059ea:	230c      	movs	r3, #12
 80059ec:	f8ca 3000 	str.w	r3, [sl]
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059fc:	e7e9      	b.n	80059d2 <__ssputs_r+0x8a>
	...

08005a00 <_svfiprintf_r>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	4698      	mov	r8, r3
 8005a06:	898b      	ldrh	r3, [r1, #12]
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	b09d      	sub	sp, #116	@ 0x74
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	460d      	mov	r5, r1
 8005a10:	4614      	mov	r4, r2
 8005a12:	d510      	bpl.n	8005a36 <_svfiprintf_r+0x36>
 8005a14:	690b      	ldr	r3, [r1, #16]
 8005a16:	b973      	cbnz	r3, 8005a36 <_svfiprintf_r+0x36>
 8005a18:	2140      	movs	r1, #64	@ 0x40
 8005a1a:	f7ff fb89 	bl	8005130 <_malloc_r>
 8005a1e:	6028      	str	r0, [r5, #0]
 8005a20:	6128      	str	r0, [r5, #16]
 8005a22:	b930      	cbnz	r0, 8005a32 <_svfiprintf_r+0x32>
 8005a24:	230c      	movs	r3, #12
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a2c:	b01d      	add	sp, #116	@ 0x74
 8005a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a32:	2340      	movs	r3, #64	@ 0x40
 8005a34:	616b      	str	r3, [r5, #20]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a3a:	2320      	movs	r3, #32
 8005a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a44:	2330      	movs	r3, #48	@ 0x30
 8005a46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005be4 <_svfiprintf_r+0x1e4>
 8005a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a4e:	f04f 0901 	mov.w	r9, #1
 8005a52:	4623      	mov	r3, r4
 8005a54:	469a      	mov	sl, r3
 8005a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a5a:	b10a      	cbz	r2, 8005a60 <_svfiprintf_r+0x60>
 8005a5c:	2a25      	cmp	r2, #37	@ 0x25
 8005a5e:	d1f9      	bne.n	8005a54 <_svfiprintf_r+0x54>
 8005a60:	ebba 0b04 	subs.w	fp, sl, r4
 8005a64:	d00b      	beq.n	8005a7e <_svfiprintf_r+0x7e>
 8005a66:	465b      	mov	r3, fp
 8005a68:	4622      	mov	r2, r4
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff ff6b 	bl	8005948 <__ssputs_r>
 8005a72:	3001      	adds	r0, #1
 8005a74:	f000 80a7 	beq.w	8005bc6 <_svfiprintf_r+0x1c6>
 8005a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a7a:	445a      	add	r2, fp
 8005a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 809f 	beq.w	8005bc6 <_svfiprintf_r+0x1c6>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a92:	f10a 0a01 	add.w	sl, sl, #1
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	9307      	str	r3, [sp, #28]
 8005a9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005aa0:	4654      	mov	r4, sl
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa8:	484e      	ldr	r0, [pc, #312]	@ (8005be4 <_svfiprintf_r+0x1e4>)
 8005aaa:	f7fa fb91 	bl	80001d0 <memchr>
 8005aae:	9a04      	ldr	r2, [sp, #16]
 8005ab0:	b9d8      	cbnz	r0, 8005aea <_svfiprintf_r+0xea>
 8005ab2:	06d0      	lsls	r0, r2, #27
 8005ab4:	bf44      	itt	mi
 8005ab6:	2320      	movmi	r3, #32
 8005ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005abc:	0711      	lsls	r1, r2, #28
 8005abe:	bf44      	itt	mi
 8005ac0:	232b      	movmi	r3, #43	@ 0x2b
 8005ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8005acc:	d015      	beq.n	8005afa <_svfiprintf_r+0xfa>
 8005ace:	9a07      	ldr	r2, [sp, #28]
 8005ad0:	4654      	mov	r4, sl
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f04f 0c0a 	mov.w	ip, #10
 8005ad8:	4621      	mov	r1, r4
 8005ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ade:	3b30      	subs	r3, #48	@ 0x30
 8005ae0:	2b09      	cmp	r3, #9
 8005ae2:	d94b      	bls.n	8005b7c <_svfiprintf_r+0x17c>
 8005ae4:	b1b0      	cbz	r0, 8005b14 <_svfiprintf_r+0x114>
 8005ae6:	9207      	str	r2, [sp, #28]
 8005ae8:	e014      	b.n	8005b14 <_svfiprintf_r+0x114>
 8005aea:	eba0 0308 	sub.w	r3, r0, r8
 8005aee:	fa09 f303 	lsl.w	r3, r9, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	46a2      	mov	sl, r4
 8005af8:	e7d2      	b.n	8005aa0 <_svfiprintf_r+0xa0>
 8005afa:	9b03      	ldr	r3, [sp, #12]
 8005afc:	1d19      	adds	r1, r3, #4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	9103      	str	r1, [sp, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bfbb      	ittet	lt
 8005b06:	425b      	neglt	r3, r3
 8005b08:	f042 0202 	orrlt.w	r2, r2, #2
 8005b0c:	9307      	strge	r3, [sp, #28]
 8005b0e:	9307      	strlt	r3, [sp, #28]
 8005b10:	bfb8      	it	lt
 8005b12:	9204      	strlt	r2, [sp, #16]
 8005b14:	7823      	ldrb	r3, [r4, #0]
 8005b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b18:	d10a      	bne.n	8005b30 <_svfiprintf_r+0x130>
 8005b1a:	7863      	ldrb	r3, [r4, #1]
 8005b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1e:	d132      	bne.n	8005b86 <_svfiprintf_r+0x186>
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b2c:	3402      	adds	r4, #2
 8005b2e:	9305      	str	r3, [sp, #20]
 8005b30:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005be8 <_svfiprintf_r+0x1e8>
 8005b34:	7821      	ldrb	r1, [r4, #0]
 8005b36:	2203      	movs	r2, #3
 8005b38:	4650      	mov	r0, sl
 8005b3a:	f7fa fb49 	bl	80001d0 <memchr>
 8005b3e:	b138      	cbz	r0, 8005b50 <_svfiprintf_r+0x150>
 8005b40:	9b04      	ldr	r3, [sp, #16]
 8005b42:	eba0 000a 	sub.w	r0, r0, sl
 8005b46:	2240      	movs	r2, #64	@ 0x40
 8005b48:	4082      	lsls	r2, r0
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	3401      	adds	r4, #1
 8005b4e:	9304      	str	r3, [sp, #16]
 8005b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b54:	4825      	ldr	r0, [pc, #148]	@ (8005bec <_svfiprintf_r+0x1ec>)
 8005b56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b5a:	2206      	movs	r2, #6
 8005b5c:	f7fa fb38 	bl	80001d0 <memchr>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d036      	beq.n	8005bd2 <_svfiprintf_r+0x1d2>
 8005b64:	4b22      	ldr	r3, [pc, #136]	@ (8005bf0 <_svfiprintf_r+0x1f0>)
 8005b66:	bb1b      	cbnz	r3, 8005bb0 <_svfiprintf_r+0x1b0>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	3307      	adds	r3, #7
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	3308      	adds	r3, #8
 8005b72:	9303      	str	r3, [sp, #12]
 8005b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b76:	4433      	add	r3, r6
 8005b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7a:	e76a      	b.n	8005a52 <_svfiprintf_r+0x52>
 8005b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b80:	460c      	mov	r4, r1
 8005b82:	2001      	movs	r0, #1
 8005b84:	e7a8      	b.n	8005ad8 <_svfiprintf_r+0xd8>
 8005b86:	2300      	movs	r3, #0
 8005b88:	3401      	adds	r4, #1
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	f04f 0c0a 	mov.w	ip, #10
 8005b92:	4620      	mov	r0, r4
 8005b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b98:	3a30      	subs	r2, #48	@ 0x30
 8005b9a:	2a09      	cmp	r2, #9
 8005b9c:	d903      	bls.n	8005ba6 <_svfiprintf_r+0x1a6>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0c6      	beq.n	8005b30 <_svfiprintf_r+0x130>
 8005ba2:	9105      	str	r1, [sp, #20]
 8005ba4:	e7c4      	b.n	8005b30 <_svfiprintf_r+0x130>
 8005ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005baa:	4604      	mov	r4, r0
 8005bac:	2301      	movs	r3, #1
 8005bae:	e7f0      	b.n	8005b92 <_svfiprintf_r+0x192>
 8005bb0:	ab03      	add	r3, sp, #12
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf4 <_svfiprintf_r+0x1f4>)
 8005bb8:	a904      	add	r1, sp, #16
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f7fd fe94 	bl	80038e8 <_printf_float>
 8005bc0:	1c42      	adds	r2, r0, #1
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	d1d6      	bne.n	8005b74 <_svfiprintf_r+0x174>
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	065b      	lsls	r3, r3, #25
 8005bca:	f53f af2d 	bmi.w	8005a28 <_svfiprintf_r+0x28>
 8005bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bd0:	e72c      	b.n	8005a2c <_svfiprintf_r+0x2c>
 8005bd2:	ab03      	add	r3, sp, #12
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	462a      	mov	r2, r5
 8005bd8:	4b06      	ldr	r3, [pc, #24]	@ (8005bf4 <_svfiprintf_r+0x1f4>)
 8005bda:	a904      	add	r1, sp, #16
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f7fe f91d 	bl	8003e1c <_printf_i>
 8005be2:	e7ed      	b.n	8005bc0 <_svfiprintf_r+0x1c0>
 8005be4:	080066b8 	.word	0x080066b8
 8005be8:	080066be 	.word	0x080066be
 8005bec:	080066c2 	.word	0x080066c2
 8005bf0:	080038e9 	.word	0x080038e9
 8005bf4:	08005949 	.word	0x08005949

08005bf8 <__sflush_r>:
 8005bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	0716      	lsls	r6, r2, #28
 8005c00:	4605      	mov	r5, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	d454      	bmi.n	8005cb0 <__sflush_r+0xb8>
 8005c06:	684b      	ldr	r3, [r1, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	dc02      	bgt.n	8005c12 <__sflush_r+0x1a>
 8005c0c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	dd48      	ble.n	8005ca4 <__sflush_r+0xac>
 8005c12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c14:	2e00      	cmp	r6, #0
 8005c16:	d045      	beq.n	8005ca4 <__sflush_r+0xac>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c1e:	682f      	ldr	r7, [r5, #0]
 8005c20:	6a21      	ldr	r1, [r4, #32]
 8005c22:	602b      	str	r3, [r5, #0]
 8005c24:	d030      	beq.n	8005c88 <__sflush_r+0x90>
 8005c26:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	0759      	lsls	r1, r3, #29
 8005c2c:	d505      	bpl.n	8005c3a <__sflush_r+0x42>
 8005c2e:	6863      	ldr	r3, [r4, #4]
 8005c30:	1ad2      	subs	r2, r2, r3
 8005c32:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c34:	b10b      	cbz	r3, 8005c3a <__sflush_r+0x42>
 8005c36:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c38:	1ad2      	subs	r2, r2, r3
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c3e:	6a21      	ldr	r1, [r4, #32]
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b0      	blx	r6
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	d106      	bne.n	8005c58 <__sflush_r+0x60>
 8005c4a:	6829      	ldr	r1, [r5, #0]
 8005c4c:	291d      	cmp	r1, #29
 8005c4e:	d82b      	bhi.n	8005ca8 <__sflush_r+0xb0>
 8005c50:	4a28      	ldr	r2, [pc, #160]	@ (8005cf4 <__sflush_r+0xfc>)
 8005c52:	410a      	asrs	r2, r1
 8005c54:	07d6      	lsls	r6, r2, #31
 8005c56:	d427      	bmi.n	8005ca8 <__sflush_r+0xb0>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	6062      	str	r2, [r4, #4]
 8005c5c:	04d9      	lsls	r1, r3, #19
 8005c5e:	6922      	ldr	r2, [r4, #16]
 8005c60:	6022      	str	r2, [r4, #0]
 8005c62:	d504      	bpl.n	8005c6e <__sflush_r+0x76>
 8005c64:	1c42      	adds	r2, r0, #1
 8005c66:	d101      	bne.n	8005c6c <__sflush_r+0x74>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b903      	cbnz	r3, 8005c6e <__sflush_r+0x76>
 8005c6c:	6560      	str	r0, [r4, #84]	@ 0x54
 8005c6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c70:	602f      	str	r7, [r5, #0]
 8005c72:	b1b9      	cbz	r1, 8005ca4 <__sflush_r+0xac>
 8005c74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c78:	4299      	cmp	r1, r3
 8005c7a:	d002      	beq.n	8005c82 <__sflush_r+0x8a>
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7ff f9e3 	bl	8005048 <_free_r>
 8005c82:	2300      	movs	r3, #0
 8005c84:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c86:	e00d      	b.n	8005ca4 <__sflush_r+0xac>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	47b0      	blx	r6
 8005c8e:	4602      	mov	r2, r0
 8005c90:	1c50      	adds	r0, r2, #1
 8005c92:	d1c9      	bne.n	8005c28 <__sflush_r+0x30>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0c6      	beq.n	8005c28 <__sflush_r+0x30>
 8005c9a:	2b1d      	cmp	r3, #29
 8005c9c:	d001      	beq.n	8005ca2 <__sflush_r+0xaa>
 8005c9e:	2b16      	cmp	r3, #22
 8005ca0:	d11d      	bne.n	8005cde <__sflush_r+0xe6>
 8005ca2:	602f      	str	r7, [r5, #0]
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e021      	b.n	8005cec <__sflush_r+0xf4>
 8005ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cac:	b21b      	sxth	r3, r3
 8005cae:	e01a      	b.n	8005ce6 <__sflush_r+0xee>
 8005cb0:	690f      	ldr	r7, [r1, #16]
 8005cb2:	2f00      	cmp	r7, #0
 8005cb4:	d0f6      	beq.n	8005ca4 <__sflush_r+0xac>
 8005cb6:	0793      	lsls	r3, r2, #30
 8005cb8:	680e      	ldr	r6, [r1, #0]
 8005cba:	bf08      	it	eq
 8005cbc:	694b      	ldreq	r3, [r1, #20]
 8005cbe:	600f      	str	r7, [r1, #0]
 8005cc0:	bf18      	it	ne
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	1bf6      	subs	r6, r6, r7
 8005cc6:	608b      	str	r3, [r1, #8]
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	ddeb      	ble.n	8005ca4 <__sflush_r+0xac>
 8005ccc:	6a21      	ldr	r1, [r4, #32]
 8005cce:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005cd2:	4633      	mov	r3, r6
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	47e0      	blx	ip
 8005cda:	2800      	cmp	r0, #0
 8005cdc:	dc07      	bgt.n	8005cee <__sflush_r+0xf6>
 8005cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cee:	4407      	add	r7, r0
 8005cf0:	1a36      	subs	r6, r6, r0
 8005cf2:	e7e9      	b.n	8005cc8 <__sflush_r+0xd0>
 8005cf4:	dfbffffe 	.word	0xdfbffffe

08005cf8 <_fflush_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	690b      	ldr	r3, [r1, #16]
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	b913      	cbnz	r3, 8005d08 <_fflush_r+0x10>
 8005d02:	2500      	movs	r5, #0
 8005d04:	4628      	mov	r0, r5
 8005d06:	bd38      	pop	{r3, r4, r5, pc}
 8005d08:	b118      	cbz	r0, 8005d12 <_fflush_r+0x1a>
 8005d0a:	6a03      	ldr	r3, [r0, #32]
 8005d0c:	b90b      	cbnz	r3, 8005d12 <_fflush_r+0x1a>
 8005d0e:	f7fe fa31 	bl	8004174 <__sinit>
 8005d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0f3      	beq.n	8005d02 <_fflush_r+0xa>
 8005d1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d1c:	07d0      	lsls	r0, r2, #31
 8005d1e:	d404      	bmi.n	8005d2a <_fflush_r+0x32>
 8005d20:	0599      	lsls	r1, r3, #22
 8005d22:	d402      	bmi.n	8005d2a <_fflush_r+0x32>
 8005d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d26:	f7fe fb3c 	bl	80043a2 <__retarget_lock_acquire_recursive>
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	f7ff ff63 	bl	8005bf8 <__sflush_r>
 8005d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d34:	07da      	lsls	r2, r3, #31
 8005d36:	4605      	mov	r5, r0
 8005d38:	d4e4      	bmi.n	8005d04 <_fflush_r+0xc>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	059b      	lsls	r3, r3, #22
 8005d3e:	d4e1      	bmi.n	8005d04 <_fflush_r+0xc>
 8005d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d42:	f7fe fb2f 	bl	80043a4 <__retarget_lock_release_recursive>
 8005d46:	e7dd      	b.n	8005d04 <_fflush_r+0xc>

08005d48 <memmove>:
 8005d48:	4288      	cmp	r0, r1
 8005d4a:	b510      	push	{r4, lr}
 8005d4c:	eb01 0402 	add.w	r4, r1, r2
 8005d50:	d902      	bls.n	8005d58 <memmove+0x10>
 8005d52:	4284      	cmp	r4, r0
 8005d54:	4623      	mov	r3, r4
 8005d56:	d807      	bhi.n	8005d68 <memmove+0x20>
 8005d58:	1e43      	subs	r3, r0, #1
 8005d5a:	42a1      	cmp	r1, r4
 8005d5c:	d008      	beq.n	8005d70 <memmove+0x28>
 8005d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d66:	e7f8      	b.n	8005d5a <memmove+0x12>
 8005d68:	4402      	add	r2, r0
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	428a      	cmp	r2, r1
 8005d6e:	d100      	bne.n	8005d72 <memmove+0x2a>
 8005d70:	bd10      	pop	{r4, pc}
 8005d72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d7a:	e7f7      	b.n	8005d6c <memmove+0x24>

08005d7c <_sbrk_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4d06      	ldr	r5, [pc, #24]	@ (8005d98 <_sbrk_r+0x1c>)
 8005d80:	2300      	movs	r3, #0
 8005d82:	4604      	mov	r4, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	602b      	str	r3, [r5, #0]
 8005d88:	f7fb fcd6 	bl	8001738 <_sbrk>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <_sbrk_r+0x1a>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	b103      	cbz	r3, 8005d96 <_sbrk_r+0x1a>
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	200003fc 	.word	0x200003fc

08005d9c <memcpy>:
 8005d9c:	440a      	add	r2, r1
 8005d9e:	4291      	cmp	r1, r2
 8005da0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005da4:	d100      	bne.n	8005da8 <memcpy+0xc>
 8005da6:	4770      	bx	lr
 8005da8:	b510      	push	{r4, lr}
 8005daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db2:	4291      	cmp	r1, r2
 8005db4:	d1f9      	bne.n	8005daa <memcpy+0xe>
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <__assert_func>:
 8005db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dba:	4614      	mov	r4, r2
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <__assert_func+0x2c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	68d8      	ldr	r0, [r3, #12]
 8005dc6:	b954      	cbnz	r4, 8005dde <__assert_func+0x26>
 8005dc8:	4b07      	ldr	r3, [pc, #28]	@ (8005de8 <__assert_func+0x30>)
 8005dca:	461c      	mov	r4, r3
 8005dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dd0:	9100      	str	r1, [sp, #0]
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	4905      	ldr	r1, [pc, #20]	@ (8005dec <__assert_func+0x34>)
 8005dd6:	f000 f86f 	bl	8005eb8 <fiprintf>
 8005dda:	f000 f87f 	bl	8005edc <abort>
 8005dde:	4b04      	ldr	r3, [pc, #16]	@ (8005df0 <__assert_func+0x38>)
 8005de0:	e7f4      	b.n	8005dcc <__assert_func+0x14>
 8005de2:	bf00      	nop
 8005de4:	20000018 	.word	0x20000018
 8005de8:	0800670e 	.word	0x0800670e
 8005dec:	080066e0 	.word	0x080066e0
 8005df0:	080066d3 	.word	0x080066d3

08005df4 <_calloc_r>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	fba1 5402 	umull	r5, r4, r1, r2
 8005dfa:	b93c      	cbnz	r4, 8005e0c <_calloc_r+0x18>
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f7ff f997 	bl	8005130 <_malloc_r>
 8005e02:	4606      	mov	r6, r0
 8005e04:	b928      	cbnz	r0, 8005e12 <_calloc_r+0x1e>
 8005e06:	2600      	movs	r6, #0
 8005e08:	4630      	mov	r0, r6
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	220c      	movs	r2, #12
 8005e0e:	6002      	str	r2, [r0, #0]
 8005e10:	e7f9      	b.n	8005e06 <_calloc_r+0x12>
 8005e12:	462a      	mov	r2, r5
 8005e14:	4621      	mov	r1, r4
 8005e16:	f7fe fa46 	bl	80042a6 <memset>
 8005e1a:	e7f5      	b.n	8005e08 <_calloc_r+0x14>

08005e1c <__ascii_mbtowc>:
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	b901      	cbnz	r1, 8005e22 <__ascii_mbtowc+0x6>
 8005e20:	a901      	add	r1, sp, #4
 8005e22:	b142      	cbz	r2, 8005e36 <__ascii_mbtowc+0x1a>
 8005e24:	b14b      	cbz	r3, 8005e3a <__ascii_mbtowc+0x1e>
 8005e26:	7813      	ldrb	r3, [r2, #0]
 8005e28:	600b      	str	r3, [r1, #0]
 8005e2a:	7812      	ldrb	r2, [r2, #0]
 8005e2c:	1e10      	subs	r0, r2, #0
 8005e2e:	bf18      	it	ne
 8005e30:	2001      	movne	r0, #1
 8005e32:	b002      	add	sp, #8
 8005e34:	4770      	bx	lr
 8005e36:	4610      	mov	r0, r2
 8005e38:	e7fb      	b.n	8005e32 <__ascii_mbtowc+0x16>
 8005e3a:	f06f 0001 	mvn.w	r0, #1
 8005e3e:	e7f8      	b.n	8005e32 <__ascii_mbtowc+0x16>

08005e40 <_realloc_r>:
 8005e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	4680      	mov	r8, r0
 8005e46:	4615      	mov	r5, r2
 8005e48:	460c      	mov	r4, r1
 8005e4a:	b921      	cbnz	r1, 8005e56 <_realloc_r+0x16>
 8005e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	4611      	mov	r1, r2
 8005e52:	f7ff b96d 	b.w	8005130 <_malloc_r>
 8005e56:	b92a      	cbnz	r2, 8005e64 <_realloc_r+0x24>
 8005e58:	f7ff f8f6 	bl	8005048 <_free_r>
 8005e5c:	2400      	movs	r4, #0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e64:	f000 f841 	bl	8005eea <_malloc_usable_size_r>
 8005e68:	4285      	cmp	r5, r0
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	d802      	bhi.n	8005e74 <_realloc_r+0x34>
 8005e6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e72:	d8f4      	bhi.n	8005e5e <_realloc_r+0x1e>
 8005e74:	4629      	mov	r1, r5
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff f95a 	bl	8005130 <_malloc_r>
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d0ec      	beq.n	8005e5c <_realloc_r+0x1c>
 8005e82:	42b5      	cmp	r5, r6
 8005e84:	462a      	mov	r2, r5
 8005e86:	4621      	mov	r1, r4
 8005e88:	bf28      	it	cs
 8005e8a:	4632      	movcs	r2, r6
 8005e8c:	f7ff ff86 	bl	8005d9c <memcpy>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4640      	mov	r0, r8
 8005e94:	f7ff f8d8 	bl	8005048 <_free_r>
 8005e98:	463c      	mov	r4, r7
 8005e9a:	e7e0      	b.n	8005e5e <_realloc_r+0x1e>

08005e9c <__ascii_wctomb>:
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4608      	mov	r0, r1
 8005ea0:	b141      	cbz	r1, 8005eb4 <__ascii_wctomb+0x18>
 8005ea2:	2aff      	cmp	r2, #255	@ 0xff
 8005ea4:	d904      	bls.n	8005eb0 <__ascii_wctomb+0x14>
 8005ea6:	228a      	movs	r2, #138	@ 0x8a
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eae:	4770      	bx	lr
 8005eb0:	700a      	strb	r2, [r1, #0]
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	4770      	bx	lr
	...

08005eb8 <fiprintf>:
 8005eb8:	b40e      	push	{r1, r2, r3}
 8005eba:	b503      	push	{r0, r1, lr}
 8005ebc:	4601      	mov	r1, r0
 8005ebe:	ab03      	add	r3, sp, #12
 8005ec0:	4805      	ldr	r0, [pc, #20]	@ (8005ed8 <fiprintf+0x20>)
 8005ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec6:	6800      	ldr	r0, [r0, #0]
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	f000 f83d 	bl	8005f48 <_vfiprintf_r>
 8005ece:	b002      	add	sp, #8
 8005ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed4:	b003      	add	sp, #12
 8005ed6:	4770      	bx	lr
 8005ed8:	20000018 	.word	0x20000018

08005edc <abort>:
 8005edc:	b508      	push	{r3, lr}
 8005ede:	2006      	movs	r0, #6
 8005ee0:	f000 fa06 	bl	80062f0 <raise>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fb fbb2 	bl	800164e <_exit>

08005eea <_malloc_usable_size_r>:
 8005eea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eee:	1f18      	subs	r0, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bfbc      	itt	lt
 8005ef4:	580b      	ldrlt	r3, [r1, r0]
 8005ef6:	18c0      	addlt	r0, r0, r3
 8005ef8:	4770      	bx	lr

08005efa <__sfputc_r>:
 8005efa:	6893      	ldr	r3, [r2, #8]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	b410      	push	{r4}
 8005f02:	6093      	str	r3, [r2, #8]
 8005f04:	da07      	bge.n	8005f16 <__sfputc_r+0x1c>
 8005f06:	6994      	ldr	r4, [r2, #24]
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	db01      	blt.n	8005f10 <__sfputc_r+0x16>
 8005f0c:	290a      	cmp	r1, #10
 8005f0e:	d102      	bne.n	8005f16 <__sfputc_r+0x1c>
 8005f10:	bc10      	pop	{r4}
 8005f12:	f000 b931 	b.w	8006178 <__swbuf_r>
 8005f16:	6813      	ldr	r3, [r2, #0]
 8005f18:	1c58      	adds	r0, r3, #1
 8005f1a:	6010      	str	r0, [r2, #0]
 8005f1c:	7019      	strb	r1, [r3, #0]
 8005f1e:	4608      	mov	r0, r1
 8005f20:	bc10      	pop	{r4}
 8005f22:	4770      	bx	lr

08005f24 <__sfputs_r>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	4606      	mov	r6, r0
 8005f28:	460f      	mov	r7, r1
 8005f2a:	4614      	mov	r4, r2
 8005f2c:	18d5      	adds	r5, r2, r3
 8005f2e:	42ac      	cmp	r4, r5
 8005f30:	d101      	bne.n	8005f36 <__sfputs_r+0x12>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e007      	b.n	8005f46 <__sfputs_r+0x22>
 8005f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f3a:	463a      	mov	r2, r7
 8005f3c:	4630      	mov	r0, r6
 8005f3e:	f7ff ffdc 	bl	8005efa <__sfputc_r>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d1f3      	bne.n	8005f2e <__sfputs_r+0xa>
 8005f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f48 <_vfiprintf_r>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	b09d      	sub	sp, #116	@ 0x74
 8005f50:	4614      	mov	r4, r2
 8005f52:	4698      	mov	r8, r3
 8005f54:	4606      	mov	r6, r0
 8005f56:	b118      	cbz	r0, 8005f60 <_vfiprintf_r+0x18>
 8005f58:	6a03      	ldr	r3, [r0, #32]
 8005f5a:	b90b      	cbnz	r3, 8005f60 <_vfiprintf_r+0x18>
 8005f5c:	f7fe f90a 	bl	8004174 <__sinit>
 8005f60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f62:	07d9      	lsls	r1, r3, #31
 8005f64:	d405      	bmi.n	8005f72 <_vfiprintf_r+0x2a>
 8005f66:	89ab      	ldrh	r3, [r5, #12]
 8005f68:	059a      	lsls	r2, r3, #22
 8005f6a:	d402      	bmi.n	8005f72 <_vfiprintf_r+0x2a>
 8005f6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f6e:	f7fe fa18 	bl	80043a2 <__retarget_lock_acquire_recursive>
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	071b      	lsls	r3, r3, #28
 8005f76:	d501      	bpl.n	8005f7c <_vfiprintf_r+0x34>
 8005f78:	692b      	ldr	r3, [r5, #16]
 8005f7a:	b99b      	cbnz	r3, 8005fa4 <_vfiprintf_r+0x5c>
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f000 f938 	bl	80061f4 <__swsetup_r>
 8005f84:	b170      	cbz	r0, 8005fa4 <_vfiprintf_r+0x5c>
 8005f86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f88:	07dc      	lsls	r4, r3, #31
 8005f8a:	d504      	bpl.n	8005f96 <_vfiprintf_r+0x4e>
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f90:	b01d      	add	sp, #116	@ 0x74
 8005f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f96:	89ab      	ldrh	r3, [r5, #12]
 8005f98:	0598      	lsls	r0, r3, #22
 8005f9a:	d4f7      	bmi.n	8005f8c <_vfiprintf_r+0x44>
 8005f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f9e:	f7fe fa01 	bl	80043a4 <__retarget_lock_release_recursive>
 8005fa2:	e7f3      	b.n	8005f8c <_vfiprintf_r+0x44>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa8:	2320      	movs	r3, #32
 8005faa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fb2:	2330      	movs	r3, #48	@ 0x30
 8005fb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006164 <_vfiprintf_r+0x21c>
 8005fb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fbc:	f04f 0901 	mov.w	r9, #1
 8005fc0:	4623      	mov	r3, r4
 8005fc2:	469a      	mov	sl, r3
 8005fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fc8:	b10a      	cbz	r2, 8005fce <_vfiprintf_r+0x86>
 8005fca:	2a25      	cmp	r2, #37	@ 0x25
 8005fcc:	d1f9      	bne.n	8005fc2 <_vfiprintf_r+0x7a>
 8005fce:	ebba 0b04 	subs.w	fp, sl, r4
 8005fd2:	d00b      	beq.n	8005fec <_vfiprintf_r+0xa4>
 8005fd4:	465b      	mov	r3, fp
 8005fd6:	4622      	mov	r2, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff ffa2 	bl	8005f24 <__sfputs_r>
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f000 80a7 	beq.w	8006134 <_vfiprintf_r+0x1ec>
 8005fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fe8:	445a      	add	r2, fp
 8005fea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fec:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 809f 	beq.w	8006134 <_vfiprintf_r+0x1ec>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006000:	f10a 0a01 	add.w	sl, sl, #1
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	9307      	str	r3, [sp, #28]
 8006008:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800600c:	931a      	str	r3, [sp, #104]	@ 0x68
 800600e:	4654      	mov	r4, sl
 8006010:	2205      	movs	r2, #5
 8006012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006016:	4853      	ldr	r0, [pc, #332]	@ (8006164 <_vfiprintf_r+0x21c>)
 8006018:	f7fa f8da 	bl	80001d0 <memchr>
 800601c:	9a04      	ldr	r2, [sp, #16]
 800601e:	b9d8      	cbnz	r0, 8006058 <_vfiprintf_r+0x110>
 8006020:	06d1      	lsls	r1, r2, #27
 8006022:	bf44      	itt	mi
 8006024:	2320      	movmi	r3, #32
 8006026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800602a:	0713      	lsls	r3, r2, #28
 800602c:	bf44      	itt	mi
 800602e:	232b      	movmi	r3, #43	@ 0x2b
 8006030:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006034:	f89a 3000 	ldrb.w	r3, [sl]
 8006038:	2b2a      	cmp	r3, #42	@ 0x2a
 800603a:	d015      	beq.n	8006068 <_vfiprintf_r+0x120>
 800603c:	9a07      	ldr	r2, [sp, #28]
 800603e:	4654      	mov	r4, sl
 8006040:	2000      	movs	r0, #0
 8006042:	f04f 0c0a 	mov.w	ip, #10
 8006046:	4621      	mov	r1, r4
 8006048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800604c:	3b30      	subs	r3, #48	@ 0x30
 800604e:	2b09      	cmp	r3, #9
 8006050:	d94b      	bls.n	80060ea <_vfiprintf_r+0x1a2>
 8006052:	b1b0      	cbz	r0, 8006082 <_vfiprintf_r+0x13a>
 8006054:	9207      	str	r2, [sp, #28]
 8006056:	e014      	b.n	8006082 <_vfiprintf_r+0x13a>
 8006058:	eba0 0308 	sub.w	r3, r0, r8
 800605c:	fa09 f303 	lsl.w	r3, r9, r3
 8006060:	4313      	orrs	r3, r2
 8006062:	9304      	str	r3, [sp, #16]
 8006064:	46a2      	mov	sl, r4
 8006066:	e7d2      	b.n	800600e <_vfiprintf_r+0xc6>
 8006068:	9b03      	ldr	r3, [sp, #12]
 800606a:	1d19      	adds	r1, r3, #4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	9103      	str	r1, [sp, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	bfbb      	ittet	lt
 8006074:	425b      	neglt	r3, r3
 8006076:	f042 0202 	orrlt.w	r2, r2, #2
 800607a:	9307      	strge	r3, [sp, #28]
 800607c:	9307      	strlt	r3, [sp, #28]
 800607e:	bfb8      	it	lt
 8006080:	9204      	strlt	r2, [sp, #16]
 8006082:	7823      	ldrb	r3, [r4, #0]
 8006084:	2b2e      	cmp	r3, #46	@ 0x2e
 8006086:	d10a      	bne.n	800609e <_vfiprintf_r+0x156>
 8006088:	7863      	ldrb	r3, [r4, #1]
 800608a:	2b2a      	cmp	r3, #42	@ 0x2a
 800608c:	d132      	bne.n	80060f4 <_vfiprintf_r+0x1ac>
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	1d1a      	adds	r2, r3, #4
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	9203      	str	r2, [sp, #12]
 8006096:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800609a:	3402      	adds	r4, #2
 800609c:	9305      	str	r3, [sp, #20]
 800609e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006168 <_vfiprintf_r+0x220>
 80060a2:	7821      	ldrb	r1, [r4, #0]
 80060a4:	2203      	movs	r2, #3
 80060a6:	4650      	mov	r0, sl
 80060a8:	f7fa f892 	bl	80001d0 <memchr>
 80060ac:	b138      	cbz	r0, 80060be <_vfiprintf_r+0x176>
 80060ae:	9b04      	ldr	r3, [sp, #16]
 80060b0:	eba0 000a 	sub.w	r0, r0, sl
 80060b4:	2240      	movs	r2, #64	@ 0x40
 80060b6:	4082      	lsls	r2, r0
 80060b8:	4313      	orrs	r3, r2
 80060ba:	3401      	adds	r4, #1
 80060bc:	9304      	str	r3, [sp, #16]
 80060be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c2:	482a      	ldr	r0, [pc, #168]	@ (800616c <_vfiprintf_r+0x224>)
 80060c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060c8:	2206      	movs	r2, #6
 80060ca:	f7fa f881 	bl	80001d0 <memchr>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d03f      	beq.n	8006152 <_vfiprintf_r+0x20a>
 80060d2:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <_vfiprintf_r+0x228>)
 80060d4:	bb1b      	cbnz	r3, 800611e <_vfiprintf_r+0x1d6>
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	3307      	adds	r3, #7
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	3308      	adds	r3, #8
 80060e0:	9303      	str	r3, [sp, #12]
 80060e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e4:	443b      	add	r3, r7
 80060e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e8:	e76a      	b.n	8005fc0 <_vfiprintf_r+0x78>
 80060ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80060ee:	460c      	mov	r4, r1
 80060f0:	2001      	movs	r0, #1
 80060f2:	e7a8      	b.n	8006046 <_vfiprintf_r+0xfe>
 80060f4:	2300      	movs	r3, #0
 80060f6:	3401      	adds	r4, #1
 80060f8:	9305      	str	r3, [sp, #20]
 80060fa:	4619      	mov	r1, r3
 80060fc:	f04f 0c0a 	mov.w	ip, #10
 8006100:	4620      	mov	r0, r4
 8006102:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006106:	3a30      	subs	r2, #48	@ 0x30
 8006108:	2a09      	cmp	r2, #9
 800610a:	d903      	bls.n	8006114 <_vfiprintf_r+0x1cc>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0c6      	beq.n	800609e <_vfiprintf_r+0x156>
 8006110:	9105      	str	r1, [sp, #20]
 8006112:	e7c4      	b.n	800609e <_vfiprintf_r+0x156>
 8006114:	fb0c 2101 	mla	r1, ip, r1, r2
 8006118:	4604      	mov	r4, r0
 800611a:	2301      	movs	r3, #1
 800611c:	e7f0      	b.n	8006100 <_vfiprintf_r+0x1b8>
 800611e:	ab03      	add	r3, sp, #12
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	462a      	mov	r2, r5
 8006124:	4b13      	ldr	r3, [pc, #76]	@ (8006174 <_vfiprintf_r+0x22c>)
 8006126:	a904      	add	r1, sp, #16
 8006128:	4630      	mov	r0, r6
 800612a:	f7fd fbdd 	bl	80038e8 <_printf_float>
 800612e:	4607      	mov	r7, r0
 8006130:	1c78      	adds	r0, r7, #1
 8006132:	d1d6      	bne.n	80060e2 <_vfiprintf_r+0x19a>
 8006134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006136:	07d9      	lsls	r1, r3, #31
 8006138:	d405      	bmi.n	8006146 <_vfiprintf_r+0x1fe>
 800613a:	89ab      	ldrh	r3, [r5, #12]
 800613c:	059a      	lsls	r2, r3, #22
 800613e:	d402      	bmi.n	8006146 <_vfiprintf_r+0x1fe>
 8006140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006142:	f7fe f92f 	bl	80043a4 <__retarget_lock_release_recursive>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	065b      	lsls	r3, r3, #25
 800614a:	f53f af1f 	bmi.w	8005f8c <_vfiprintf_r+0x44>
 800614e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006150:	e71e      	b.n	8005f90 <_vfiprintf_r+0x48>
 8006152:	ab03      	add	r3, sp, #12
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	462a      	mov	r2, r5
 8006158:	4b06      	ldr	r3, [pc, #24]	@ (8006174 <_vfiprintf_r+0x22c>)
 800615a:	a904      	add	r1, sp, #16
 800615c:	4630      	mov	r0, r6
 800615e:	f7fd fe5d 	bl	8003e1c <_printf_i>
 8006162:	e7e4      	b.n	800612e <_vfiprintf_r+0x1e6>
 8006164:	080066b8 	.word	0x080066b8
 8006168:	080066be 	.word	0x080066be
 800616c:	080066c2 	.word	0x080066c2
 8006170:	080038e9 	.word	0x080038e9
 8006174:	08005f25 	.word	0x08005f25

08006178 <__swbuf_r>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	460e      	mov	r6, r1
 800617c:	4614      	mov	r4, r2
 800617e:	4605      	mov	r5, r0
 8006180:	b118      	cbz	r0, 800618a <__swbuf_r+0x12>
 8006182:	6a03      	ldr	r3, [r0, #32]
 8006184:	b90b      	cbnz	r3, 800618a <__swbuf_r+0x12>
 8006186:	f7fd fff5 	bl	8004174 <__sinit>
 800618a:	69a3      	ldr	r3, [r4, #24]
 800618c:	60a3      	str	r3, [r4, #8]
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	071a      	lsls	r2, r3, #28
 8006192:	d501      	bpl.n	8006198 <__swbuf_r+0x20>
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	b943      	cbnz	r3, 80061aa <__swbuf_r+0x32>
 8006198:	4621      	mov	r1, r4
 800619a:	4628      	mov	r0, r5
 800619c:	f000 f82a 	bl	80061f4 <__swsetup_r>
 80061a0:	b118      	cbz	r0, 80061aa <__swbuf_r+0x32>
 80061a2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80061a6:	4638      	mov	r0, r7
 80061a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	6922      	ldr	r2, [r4, #16]
 80061ae:	1a98      	subs	r0, r3, r2
 80061b0:	6963      	ldr	r3, [r4, #20]
 80061b2:	b2f6      	uxtb	r6, r6
 80061b4:	4283      	cmp	r3, r0
 80061b6:	4637      	mov	r7, r6
 80061b8:	dc05      	bgt.n	80061c6 <__swbuf_r+0x4e>
 80061ba:	4621      	mov	r1, r4
 80061bc:	4628      	mov	r0, r5
 80061be:	f7ff fd9b 	bl	8005cf8 <_fflush_r>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d1ed      	bne.n	80061a2 <__swbuf_r+0x2a>
 80061c6:	68a3      	ldr	r3, [r4, #8]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	60a3      	str	r3, [r4, #8]
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	6022      	str	r2, [r4, #0]
 80061d2:	701e      	strb	r6, [r3, #0]
 80061d4:	6962      	ldr	r2, [r4, #20]
 80061d6:	1c43      	adds	r3, r0, #1
 80061d8:	429a      	cmp	r2, r3
 80061da:	d004      	beq.n	80061e6 <__swbuf_r+0x6e>
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	07db      	lsls	r3, r3, #31
 80061e0:	d5e1      	bpl.n	80061a6 <__swbuf_r+0x2e>
 80061e2:	2e0a      	cmp	r6, #10
 80061e4:	d1df      	bne.n	80061a6 <__swbuf_r+0x2e>
 80061e6:	4621      	mov	r1, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	f7ff fd85 	bl	8005cf8 <_fflush_r>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d0d9      	beq.n	80061a6 <__swbuf_r+0x2e>
 80061f2:	e7d6      	b.n	80061a2 <__swbuf_r+0x2a>

080061f4 <__swsetup_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4b29      	ldr	r3, [pc, #164]	@ (800629c <__swsetup_r+0xa8>)
 80061f8:	4605      	mov	r5, r0
 80061fa:	6818      	ldr	r0, [r3, #0]
 80061fc:	460c      	mov	r4, r1
 80061fe:	b118      	cbz	r0, 8006208 <__swsetup_r+0x14>
 8006200:	6a03      	ldr	r3, [r0, #32]
 8006202:	b90b      	cbnz	r3, 8006208 <__swsetup_r+0x14>
 8006204:	f7fd ffb6 	bl	8004174 <__sinit>
 8006208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620c:	0719      	lsls	r1, r3, #28
 800620e:	d422      	bmi.n	8006256 <__swsetup_r+0x62>
 8006210:	06da      	lsls	r2, r3, #27
 8006212:	d407      	bmi.n	8006224 <__swsetup_r+0x30>
 8006214:	2209      	movs	r2, #9
 8006216:	602a      	str	r2, [r5, #0]
 8006218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800621c:	81a3      	strh	r3, [r4, #12]
 800621e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006222:	e033      	b.n	800628c <__swsetup_r+0x98>
 8006224:	0758      	lsls	r0, r3, #29
 8006226:	d512      	bpl.n	800624e <__swsetup_r+0x5a>
 8006228:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800622a:	b141      	cbz	r1, 800623e <__swsetup_r+0x4a>
 800622c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006230:	4299      	cmp	r1, r3
 8006232:	d002      	beq.n	800623a <__swsetup_r+0x46>
 8006234:	4628      	mov	r0, r5
 8006236:	f7fe ff07 	bl	8005048 <_free_r>
 800623a:	2300      	movs	r3, #0
 800623c:	6363      	str	r3, [r4, #52]	@ 0x34
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	2300      	movs	r3, #0
 8006248:	6063      	str	r3, [r4, #4]
 800624a:	6923      	ldr	r3, [r4, #16]
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	f043 0308 	orr.w	r3, r3, #8
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	b94b      	cbnz	r3, 800626e <__swsetup_r+0x7a>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006264:	d003      	beq.n	800626e <__swsetup_r+0x7a>
 8006266:	4621      	mov	r1, r4
 8006268:	4628      	mov	r0, r5
 800626a:	f000 f883 	bl	8006374 <__smakebuf_r>
 800626e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006272:	f013 0201 	ands.w	r2, r3, #1
 8006276:	d00a      	beq.n	800628e <__swsetup_r+0x9a>
 8006278:	2200      	movs	r2, #0
 800627a:	60a2      	str	r2, [r4, #8]
 800627c:	6962      	ldr	r2, [r4, #20]
 800627e:	4252      	negs	r2, r2
 8006280:	61a2      	str	r2, [r4, #24]
 8006282:	6922      	ldr	r2, [r4, #16]
 8006284:	b942      	cbnz	r2, 8006298 <__swsetup_r+0xa4>
 8006286:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800628a:	d1c5      	bne.n	8006218 <__swsetup_r+0x24>
 800628c:	bd38      	pop	{r3, r4, r5, pc}
 800628e:	0799      	lsls	r1, r3, #30
 8006290:	bf58      	it	pl
 8006292:	6962      	ldrpl	r2, [r4, #20]
 8006294:	60a2      	str	r2, [r4, #8]
 8006296:	e7f4      	b.n	8006282 <__swsetup_r+0x8e>
 8006298:	2000      	movs	r0, #0
 800629a:	e7f7      	b.n	800628c <__swsetup_r+0x98>
 800629c:	20000018 	.word	0x20000018

080062a0 <_raise_r>:
 80062a0:	291f      	cmp	r1, #31
 80062a2:	b538      	push	{r3, r4, r5, lr}
 80062a4:	4605      	mov	r5, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	d904      	bls.n	80062b4 <_raise_r+0x14>
 80062aa:	2316      	movs	r3, #22
 80062ac:	6003      	str	r3, [r0, #0]
 80062ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062b6:	b112      	cbz	r2, 80062be <_raise_r+0x1e>
 80062b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062bc:	b94b      	cbnz	r3, 80062d2 <_raise_r+0x32>
 80062be:	4628      	mov	r0, r5
 80062c0:	f000 f830 	bl	8006324 <_getpid_r>
 80062c4:	4622      	mov	r2, r4
 80062c6:	4601      	mov	r1, r0
 80062c8:	4628      	mov	r0, r5
 80062ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062ce:	f000 b817 	b.w	8006300 <_kill_r>
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d00a      	beq.n	80062ec <_raise_r+0x4c>
 80062d6:	1c59      	adds	r1, r3, #1
 80062d8:	d103      	bne.n	80062e2 <_raise_r+0x42>
 80062da:	2316      	movs	r3, #22
 80062dc:	6003      	str	r3, [r0, #0]
 80062de:	2001      	movs	r0, #1
 80062e0:	e7e7      	b.n	80062b2 <_raise_r+0x12>
 80062e2:	2100      	movs	r1, #0
 80062e4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80062e8:	4620      	mov	r0, r4
 80062ea:	4798      	blx	r3
 80062ec:	2000      	movs	r0, #0
 80062ee:	e7e0      	b.n	80062b2 <_raise_r+0x12>

080062f0 <raise>:
 80062f0:	4b02      	ldr	r3, [pc, #8]	@ (80062fc <raise+0xc>)
 80062f2:	4601      	mov	r1, r0
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f7ff bfd3 	b.w	80062a0 <_raise_r>
 80062fa:	bf00      	nop
 80062fc:	20000018 	.word	0x20000018

08006300 <_kill_r>:
 8006300:	b538      	push	{r3, r4, r5, lr}
 8006302:	4d07      	ldr	r5, [pc, #28]	@ (8006320 <_kill_r+0x20>)
 8006304:	2300      	movs	r3, #0
 8006306:	4604      	mov	r4, r0
 8006308:	4608      	mov	r0, r1
 800630a:	4611      	mov	r1, r2
 800630c:	602b      	str	r3, [r5, #0]
 800630e:	f7fb f98e 	bl	800162e <_kill>
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	d102      	bne.n	800631c <_kill_r+0x1c>
 8006316:	682b      	ldr	r3, [r5, #0]
 8006318:	b103      	cbz	r3, 800631c <_kill_r+0x1c>
 800631a:	6023      	str	r3, [r4, #0]
 800631c:	bd38      	pop	{r3, r4, r5, pc}
 800631e:	bf00      	nop
 8006320:	200003fc 	.word	0x200003fc

08006324 <_getpid_r>:
 8006324:	f7fb b97c 	b.w	8001620 <_getpid>

08006328 <__swhatbuf_r>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	460c      	mov	r4, r1
 800632c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006330:	2900      	cmp	r1, #0
 8006332:	b096      	sub	sp, #88	@ 0x58
 8006334:	4615      	mov	r5, r2
 8006336:	461e      	mov	r6, r3
 8006338:	da0d      	bge.n	8006356 <__swhatbuf_r+0x2e>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	bf14      	ite	ne
 8006346:	2340      	movne	r3, #64	@ 0x40
 8006348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800634c:	2000      	movs	r0, #0
 800634e:	6031      	str	r1, [r6, #0]
 8006350:	602b      	str	r3, [r5, #0]
 8006352:	b016      	add	sp, #88	@ 0x58
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	466a      	mov	r2, sp
 8006358:	f000 f848 	bl	80063ec <_fstat_r>
 800635c:	2800      	cmp	r0, #0
 800635e:	dbec      	blt.n	800633a <__swhatbuf_r+0x12>
 8006360:	9901      	ldr	r1, [sp, #4]
 8006362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800636a:	4259      	negs	r1, r3
 800636c:	4159      	adcs	r1, r3
 800636e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006372:	e7eb      	b.n	800634c <__swhatbuf_r+0x24>

08006374 <__smakebuf_r>:
 8006374:	898b      	ldrh	r3, [r1, #12]
 8006376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006378:	079d      	lsls	r5, r3, #30
 800637a:	4606      	mov	r6, r0
 800637c:	460c      	mov	r4, r1
 800637e:	d507      	bpl.n	8006390 <__smakebuf_r+0x1c>
 8006380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	2301      	movs	r3, #1
 800638a:	6163      	str	r3, [r4, #20]
 800638c:	b003      	add	sp, #12
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006390:	ab01      	add	r3, sp, #4
 8006392:	466a      	mov	r2, sp
 8006394:	f7ff ffc8 	bl	8006328 <__swhatbuf_r>
 8006398:	9f00      	ldr	r7, [sp, #0]
 800639a:	4605      	mov	r5, r0
 800639c:	4639      	mov	r1, r7
 800639e:	4630      	mov	r0, r6
 80063a0:	f7fe fec6 	bl	8005130 <_malloc_r>
 80063a4:	b948      	cbnz	r0, 80063ba <__smakebuf_r+0x46>
 80063a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063aa:	059a      	lsls	r2, r3, #22
 80063ac:	d4ee      	bmi.n	800638c <__smakebuf_r+0x18>
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	f043 0302 	orr.w	r3, r3, #2
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	e7e2      	b.n	8006380 <__smakebuf_r+0xc>
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	6020      	str	r0, [r4, #0]
 80063be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	9b01      	ldr	r3, [sp, #4]
 80063c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063ca:	b15b      	cbz	r3, 80063e4 <__smakebuf_r+0x70>
 80063cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d0:	4630      	mov	r0, r6
 80063d2:	f000 f81d 	bl	8006410 <_isatty_r>
 80063d6:	b128      	cbz	r0, 80063e4 <__smakebuf_r+0x70>
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	f043 0301 	orr.w	r3, r3, #1
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	431d      	orrs	r5, r3
 80063e8:	81a5      	strh	r5, [r4, #12]
 80063ea:	e7cf      	b.n	800638c <__smakebuf_r+0x18>

080063ec <_fstat_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4d07      	ldr	r5, [pc, #28]	@ (800640c <_fstat_r+0x20>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4604      	mov	r4, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	4611      	mov	r1, r2
 80063f8:	602b      	str	r3, [r5, #0]
 80063fa:	f7fb f977 	bl	80016ec <_fstat>
 80063fe:	1c43      	adds	r3, r0, #1
 8006400:	d102      	bne.n	8006408 <_fstat_r+0x1c>
 8006402:	682b      	ldr	r3, [r5, #0]
 8006404:	b103      	cbz	r3, 8006408 <_fstat_r+0x1c>
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	bd38      	pop	{r3, r4, r5, pc}
 800640a:	bf00      	nop
 800640c:	200003fc 	.word	0x200003fc

08006410 <_isatty_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4d06      	ldr	r5, [pc, #24]	@ (800642c <_isatty_r+0x1c>)
 8006414:	2300      	movs	r3, #0
 8006416:	4604      	mov	r4, r0
 8006418:	4608      	mov	r0, r1
 800641a:	602b      	str	r3, [r5, #0]
 800641c:	f7fb f975 	bl	800170a <_isatty>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_isatty_r+0x1a>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_isatty_r+0x1a>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	200003fc 	.word	0x200003fc

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
